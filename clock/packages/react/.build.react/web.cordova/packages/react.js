(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/react/vendor/react-0.10.0.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * React v0.10.0                                                                                                       // 2
 */                                                                                                                    // 3
!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**                                                                                                                    // 5
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 6
 *                                                                                                                     // 7
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8
 * you may not use this file except in compliance with the License.                                                    // 9
 * You may obtain a copy of the License at                                                                             // 10
 *                                                                                                                     // 11
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12
 *                                                                                                                     // 13
 * Unless required by applicable law or agreed to in writing, software                                                 // 14
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16
 * See the License for the specific language governing permissions and                                                 // 17
 * limitations under the License.                                                                                      // 18
 *                                                                                                                     // 19
 * @providesModule AutoFocusMixin                                                                                      // 20
 * @typechecks static-only                                                                                             // 21
 */                                                                                                                    // 22
                                                                                                                       // 23
"use strict";                                                                                                          // 24
                                                                                                                       // 25
var focusNode = _dereq_("./focusNode");                                                                                // 26
                                                                                                                       // 27
var AutoFocusMixin = {                                                                                                 // 28
  componentDidMount: function() {                                                                                      // 29
    if (this.props.autoFocus) {                                                                                        // 30
      focusNode(this.getDOMNode());                                                                                    // 31
    }                                                                                                                  // 32
  }                                                                                                                    // 33
};                                                                                                                     // 34
                                                                                                                       // 35
module.exports = AutoFocusMixin;                                                                                       // 36
                                                                                                                       // 37
},{"./focusNode":100}],2:[function(_dereq_,module,exports){                                                            // 38
/**                                                                                                                    // 39
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 40
 *                                                                                                                     // 41
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 42
 * you may not use this file except in compliance with the License.                                                    // 43
 * You may obtain a copy of the License at                                                                             // 44
 *                                                                                                                     // 45
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 46
 *                                                                                                                     // 47
 * Unless required by applicable law or agreed to in writing, software                                                 // 48
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 49
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 50
 * See the License for the specific language governing permissions and                                                 // 51
 * limitations under the License.                                                                                      // 52
 *                                                                                                                     // 53
 * @providesModule CSSProperty                                                                                         // 54
 */                                                                                                                    // 55
                                                                                                                       // 56
"use strict";                                                                                                          // 57
                                                                                                                       // 58
/**                                                                                                                    // 59
 * CSS properties which accept numbers but are not in units of "px".                                                   // 60
 */                                                                                                                    // 61
var isUnitlessNumber = {                                                                                               // 62
  columnCount: true,                                                                                                   // 63
  fillOpacity: true,                                                                                                   // 64
  flex: true,                                                                                                          // 65
  flexGrow: true,                                                                                                      // 66
  flexShrink: true,                                                                                                    // 67
  fontWeight: true,                                                                                                    // 68
  lineClamp: true,                                                                                                     // 69
  lineHeight: true,                                                                                                    // 70
  opacity: true,                                                                                                       // 71
  order: true,                                                                                                         // 72
  orphans: true,                                                                                                       // 73
  widows: true,                                                                                                        // 74
  zIndex: true,                                                                                                        // 75
  zoom: true                                                                                                           // 76
};                                                                                                                     // 77
                                                                                                                       // 78
/**                                                                                                                    // 79
 * @param {string} prefix vendor-specific prefix, eg: Webkit                                                           // 80
 * @param {string} key style name, eg: transitionDuration                                                              // 81
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:                                        // 82
 * WebkitTransitionDuration                                                                                            // 83
 */                                                                                                                    // 84
function prefixKey(prefix, key) {                                                                                      // 85
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);                                                      // 86
}                                                                                                                      // 87
                                                                                                                       // 88
/**                                                                                                                    // 89
 * Support style names that may come passed in prefixed by adding permutations                                         // 90
 * of vendor prefixes.                                                                                                 // 91
 */                                                                                                                    // 92
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];                                                                           // 93
                                                                                                                       // 94
// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an                                        // 95
// infinite loop, because it iterates over the newly added props too.                                                  // 96
Object.keys(isUnitlessNumber).forEach(function(prop) {                                                                 // 97
  prefixes.forEach(function(prefix) {                                                                                  // 98
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];                                                // 99
  });                                                                                                                  // 100
});                                                                                                                    // 101
                                                                                                                       // 102
/**                                                                                                                    // 103
 * Most style properties can be unset by doing .style[prop] = '' but IE8                                               // 104
 * doesn't like doing that with shorthand properties so for the properties that                                        // 105
 * IE8 breaks on, which are listed here, we instead unset each of the                                                  // 106
 * individual properties. See http://bugs.jquery.com/ticket/12385.                                                     // 107
 * The 4-value 'clock' properties like margin, padding, border-width seem to                                           // 108
 * behave without any problems. Curiously, list-style works too without any                                            // 109
 * special prodding.                                                                                                   // 110
 */                                                                                                                    // 111
var shorthandPropertyExpansions = {                                                                                    // 112
  background: {                                                                                                        // 113
    backgroundImage: true,                                                                                             // 114
    backgroundPosition: true,                                                                                          // 115
    backgroundRepeat: true,                                                                                            // 116
    backgroundColor: true                                                                                              // 117
  },                                                                                                                   // 118
  border: {                                                                                                            // 119
    borderWidth: true,                                                                                                 // 120
    borderStyle: true,                                                                                                 // 121
    borderColor: true                                                                                                  // 122
  },                                                                                                                   // 123
  borderBottom: {                                                                                                      // 124
    borderBottomWidth: true,                                                                                           // 125
    borderBottomStyle: true,                                                                                           // 126
    borderBottomColor: true                                                                                            // 127
  },                                                                                                                   // 128
  borderLeft: {                                                                                                        // 129
    borderLeftWidth: true,                                                                                             // 130
    borderLeftStyle: true,                                                                                             // 131
    borderLeftColor: true                                                                                              // 132
  },                                                                                                                   // 133
  borderRight: {                                                                                                       // 134
    borderRightWidth: true,                                                                                            // 135
    borderRightStyle: true,                                                                                            // 136
    borderRightColor: true                                                                                             // 137
  },                                                                                                                   // 138
  borderTop: {                                                                                                         // 139
    borderTopWidth: true,                                                                                              // 140
    borderTopStyle: true,                                                                                              // 141
    borderTopColor: true                                                                                               // 142
  },                                                                                                                   // 143
  font: {                                                                                                              // 144
    fontStyle: true,                                                                                                   // 145
    fontVariant: true,                                                                                                 // 146
    fontWeight: true,                                                                                                  // 147
    fontSize: true,                                                                                                    // 148
    lineHeight: true,                                                                                                  // 149
    fontFamily: true                                                                                                   // 150
  }                                                                                                                    // 151
};                                                                                                                     // 152
                                                                                                                       // 153
var CSSProperty = {                                                                                                    // 154
  isUnitlessNumber: isUnitlessNumber,                                                                                  // 155
  shorthandPropertyExpansions: shorthandPropertyExpansions                                                             // 156
};                                                                                                                     // 157
                                                                                                                       // 158
module.exports = CSSProperty;                                                                                          // 159
                                                                                                                       // 160
},{}],3:[function(_dereq_,module,exports){                                                                             // 161
/**                                                                                                                    // 162
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 163
 *                                                                                                                     // 164
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 165
 * you may not use this file except in compliance with the License.                                                    // 166
 * You may obtain a copy of the License at                                                                             // 167
 *                                                                                                                     // 168
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 169
 *                                                                                                                     // 170
 * Unless required by applicable law or agreed to in writing, software                                                 // 171
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 172
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 173
 * See the License for the specific language governing permissions and                                                 // 174
 * limitations under the License.                                                                                      // 175
 *                                                                                                                     // 176
 * @providesModule CSSPropertyOperations                                                                               // 177
 * @typechecks static-only                                                                                             // 178
 */                                                                                                                    // 179
                                                                                                                       // 180
"use strict";                                                                                                          // 181
                                                                                                                       // 182
var CSSProperty = _dereq_("./CSSProperty");                                                                            // 183
                                                                                                                       // 184
var dangerousStyleValue = _dereq_("./dangerousStyleValue");                                                            // 185
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");                                                          // 186
var hyphenate = _dereq_("./hyphenate");                                                                                // 187
var memoizeStringOnly = _dereq_("./memoizeStringOnly");                                                                // 188
                                                                                                                       // 189
var processStyleName = memoizeStringOnly(function(styleName) {                                                         // 190
  return escapeTextForBrowser(hyphenate(styleName));                                                                   // 191
});                                                                                                                    // 192
                                                                                                                       // 193
/**                                                                                                                    // 194
 * Operations for dealing with CSS properties.                                                                         // 195
 */                                                                                                                    // 196
var CSSPropertyOperations = {                                                                                          // 197
                                                                                                                       // 198
  /**                                                                                                                  // 199
   * Serializes a mapping of style properties for use as inline styles:                                                // 200
   *                                                                                                                   // 201
   *   > createMarkupForStyles({width: '200px', height: 0})                                                            // 202
   *   "width:200px;height:0;"                                                                                         // 203
   *                                                                                                                   // 204
   * Undefined values are ignored so that declarative programming is easier.                                           // 205
   *                                                                                                                   // 206
   * @param {object} styles                                                                                            // 207
   * @return {?string}                                                                                                 // 208
   */                                                                                                                  // 209
  createMarkupForStyles: function(styles) {                                                                            // 210
    var serialized = '';                                                                                               // 211
    for (var styleName in styles) {                                                                                    // 212
      if (!styles.hasOwnProperty(styleName)) {                                                                         // 213
        continue;                                                                                                      // 214
      }                                                                                                                // 215
      var styleValue = styles[styleName];                                                                              // 216
      if (styleValue != null) {                                                                                        // 217
        serialized += processStyleName(styleName) + ':';                                                               // 218
        serialized += dangerousStyleValue(styleName, styleValue) + ';';                                                // 219
      }                                                                                                                // 220
    }                                                                                                                  // 221
    return serialized || null;                                                                                         // 222
  },                                                                                                                   // 223
                                                                                                                       // 224
  /**                                                                                                                  // 225
   * Sets the value for multiple styles on a node.  If a value is specified as                                         // 226
   * '' (empty string), the corresponding style property will be unset.                                                // 227
   *                                                                                                                   // 228
   * @param {DOMElement} node                                                                                          // 229
   * @param {object} styles                                                                                            // 230
   */                                                                                                                  // 231
  setValueForStyles: function(node, styles) {                                                                          // 232
    var style = node.style;                                                                                            // 233
    for (var styleName in styles) {                                                                                    // 234
      if (!styles.hasOwnProperty(styleName)) {                                                                         // 235
        continue;                                                                                                      // 236
      }                                                                                                                // 237
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);                                              // 238
      if (styleValue) {                                                                                                // 239
        style[styleName] = styleValue;                                                                                 // 240
      } else {                                                                                                         // 241
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];                                            // 242
        if (expansion) {                                                                                               // 243
          // Shorthand property that IE8 won't like unsetting, so unset each                                           // 244
          // component to placate it                                                                                   // 245
          for (var individualStyleName in expansion) {                                                                 // 246
            style[individualStyleName] = '';                                                                           // 247
          }                                                                                                            // 248
        } else {                                                                                                       // 249
          style[styleName] = '';                                                                                       // 250
        }                                                                                                              // 251
      }                                                                                                                // 252
    }                                                                                                                  // 253
  }                                                                                                                    // 254
                                                                                                                       // 255
};                                                                                                                     // 256
                                                                                                                       // 257
module.exports = CSSPropertyOperations;                                                                                // 258
                                                                                                                       // 259
},{"./CSSProperty":2,"./dangerousStyleValue":95,"./escapeTextForBrowser":98,"./hyphenate":110,"./memoizeStringOnly":120}],4:[function(_dereq_,module,exports){
/**                                                                                                                    // 261
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 262
 *                                                                                                                     // 263
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 264
 * you may not use this file except in compliance with the License.                                                    // 265
 * You may obtain a copy of the License at                                                                             // 266
 *                                                                                                                     // 267
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 268
 *                                                                                                                     // 269
 * Unless required by applicable law or agreed to in writing, software                                                 // 270
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 271
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 272
 * See the License for the specific language governing permissions and                                                 // 273
 * limitations under the License.                                                                                      // 274
 *                                                                                                                     // 275
 * @providesModule ChangeEventPlugin                                                                                   // 276
 */                                                                                                                    // 277
                                                                                                                       // 278
"use strict";                                                                                                          // 279
                                                                                                                       // 280
var EventConstants = _dereq_("./EventConstants");                                                                      // 281
var EventPluginHub = _dereq_("./EventPluginHub");                                                                      // 282
var EventPropagators = _dereq_("./EventPropagators");                                                                  // 283
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 284
var ReactUpdates = _dereq_("./ReactUpdates");                                                                          // 285
var SyntheticEvent = _dereq_("./SyntheticEvent");                                                                      // 286
                                                                                                                       // 287
var isEventSupported = _dereq_("./isEventSupported");                                                                  // 288
var isTextInputElement = _dereq_("./isTextInputElement");                                                              // 289
var keyOf = _dereq_("./keyOf");                                                                                        // 290
                                                                                                                       // 291
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 292
                                                                                                                       // 293
var eventTypes = {                                                                                                     // 294
  change: {                                                                                                            // 295
    phasedRegistrationNames: {                                                                                         // 296
      bubbled: keyOf({onChange: null}),                                                                                // 297
      captured: keyOf({onChangeCapture: null})                                                                         // 298
    },                                                                                                                 // 299
    dependencies: [                                                                                                    // 300
      topLevelTypes.topBlur,                                                                                           // 301
      topLevelTypes.topChange,                                                                                         // 302
      topLevelTypes.topClick,                                                                                          // 303
      topLevelTypes.topFocus,                                                                                          // 304
      topLevelTypes.topInput,                                                                                          // 305
      topLevelTypes.topKeyDown,                                                                                        // 306
      topLevelTypes.topKeyUp,                                                                                          // 307
      topLevelTypes.topSelectionChange                                                                                 // 308
    ]                                                                                                                  // 309
  }                                                                                                                    // 310
};                                                                                                                     // 311
                                                                                                                       // 312
/**                                                                                                                    // 313
 * For IE shims                                                                                                        // 314
 */                                                                                                                    // 315
var activeElement = null;                                                                                              // 316
var activeElementID = null;                                                                                            // 317
var activeElementValue = null;                                                                                         // 318
var activeElementValueProp = null;                                                                                     // 319
                                                                                                                       // 320
/**                                                                                                                    // 321
 * SECTION: handle `change` event                                                                                      // 322
 */                                                                                                                    // 323
function shouldUseChangeEvent(elem) {                                                                                  // 324
  return (                                                                                                             // 325
    elem.nodeName === 'SELECT' ||                                                                                      // 326
    (elem.nodeName === 'INPUT' && elem.type === 'file')                                                                // 327
  );                                                                                                                   // 328
}                                                                                                                      // 329
                                                                                                                       // 330
var doesChangeEventBubble = false;                                                                                     // 331
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 332
  // See `handleChange` comment below                                                                                  // 333
  doesChangeEventBubble = isEventSupported('change') && (                                                              // 334
    !('documentMode' in document) || document.documentMode > 8                                                         // 335
  );                                                                                                                   // 336
}                                                                                                                      // 337
                                                                                                                       // 338
function manualDispatchChangeEvent(nativeEvent) {                                                                      // 339
  var event = SyntheticEvent.getPooled(                                                                                // 340
    eventTypes.change,                                                                                                 // 341
    activeElementID,                                                                                                   // 342
    nativeEvent                                                                                                        // 343
  );                                                                                                                   // 344
  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 345
                                                                                                                       // 346
  // If change and propertychange bubbled, we'd just bind to it like all the                                           // 347
  // other events and have it go through ReactEventTopLevelCallback. Since it                                          // 348
  // doesn't, we manually listen for the events and so we have to enqueue and                                          // 349
  // process the abstract event manually.                                                                              // 350
  //                                                                                                                   // 351
  // Batching is necessary here in order to ensure that all event handlers run                                         // 352
  // before the next rerender (including event handlers attached to ancestor                                           // 353
  // elements instead of directly on the input). Without this, controlled                                              // 354
  // components don't work properly in conjunction with event bubbling because                                         // 355
  // the component is rerendered and the value reverted before all the event                                           // 356
  // handlers can run. See https://github.com/facebook/react/issues/708.                                               // 357
  ReactUpdates.batchedUpdates(runEventInBatch, event);                                                                 // 358
}                                                                                                                      // 359
                                                                                                                       // 360
function runEventInBatch(event) {                                                                                      // 361
  EventPluginHub.enqueueEvents(event);                                                                                 // 362
  EventPluginHub.processEventQueue();                                                                                  // 363
}                                                                                                                      // 364
                                                                                                                       // 365
function startWatchingForChangeEventIE8(target, targetID) {                                                            // 366
  activeElement = target;                                                                                              // 367
  activeElementID = targetID;                                                                                          // 368
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);                                                    // 369
}                                                                                                                      // 370
                                                                                                                       // 371
function stopWatchingForChangeEventIE8() {                                                                             // 372
  if (!activeElement) {                                                                                                // 373
    return;                                                                                                            // 374
  }                                                                                                                    // 375
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);                                                    // 376
  activeElement = null;                                                                                                // 377
  activeElementID = null;                                                                                              // 378
}                                                                                                                      // 379
                                                                                                                       // 380
function getTargetIDForChangeEvent(                                                                                    // 381
    topLevelType,                                                                                                      // 382
    topLevelTarget,                                                                                                    // 383
    topLevelTargetID) {                                                                                                // 384
  if (topLevelType === topLevelTypes.topChange) {                                                                      // 385
    return topLevelTargetID;                                                                                           // 386
  }                                                                                                                    // 387
}                                                                                                                      // 388
function handleEventsForChangeEventIE8(                                                                                // 389
    topLevelType,                                                                                                      // 390
    topLevelTarget,                                                                                                    // 391
    topLevelTargetID) {                                                                                                // 392
  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 393
    // stopWatching() should be a noop here but we call it just in case we                                             // 394
    // missed a blur event somehow.                                                                                    // 395
    stopWatchingForChangeEventIE8();                                                                                   // 396
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);                                                  // 397
  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 398
    stopWatchingForChangeEventIE8();                                                                                   // 399
  }                                                                                                                    // 400
}                                                                                                                      // 401
                                                                                                                       // 402
                                                                                                                       // 403
/**                                                                                                                    // 404
 * SECTION: handle `input` event                                                                                       // 405
 */                                                                                                                    // 406
var isInputEventSupported = false;                                                                                     // 407
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 408
  // IE9 claims to support the input event but fails to trigger it when                                                // 409
  // deleting text, so we ignore its input events                                                                      // 410
  isInputEventSupported = isEventSupported('input') && (                                                               // 411
    !('documentMode' in document) || document.documentMode > 9                                                         // 412
  );                                                                                                                   // 413
}                                                                                                                      // 414
                                                                                                                       // 415
/**                                                                                                                    // 416
 * (For old IE.) Replacement getter/setter for the `value` property that gets                                          // 417
 * set on the active element.                                                                                          // 418
 */                                                                                                                    // 419
var newValueProp =  {                                                                                                  // 420
  get: function() {                                                                                                    // 421
    return activeElementValueProp.get.call(this);                                                                      // 422
  },                                                                                                                   // 423
  set: function(val) {                                                                                                 // 424
    // Cast to a string so we can do equality checks.                                                                  // 425
    activeElementValue = '' + val;                                                                                     // 426
    activeElementValueProp.set.call(this, val);                                                                        // 427
  }                                                                                                                    // 428
};                                                                                                                     // 429
                                                                                                                       // 430
/**                                                                                                                    // 431
 * (For old IE.) Starts tracking propertychange events on the passed-in element                                        // 432
 * and override the value property so that we can distinguish user events from                                         // 433
 * value changes in JS.                                                                                                // 434
 */                                                                                                                    // 435
function startWatchingForValueChange(target, targetID) {                                                               // 436
  activeElement = target;                                                                                              // 437
  activeElementID = targetID;                                                                                          // 438
  activeElementValue = target.value;                                                                                   // 439
  activeElementValueProp = Object.getOwnPropertyDescriptor(                                                            // 440
    target.constructor.prototype,                                                                                      // 441
    'value'                                                                                                            // 442
  );                                                                                                                   // 443
                                                                                                                       // 444
  Object.defineProperty(activeElement, 'value', newValueProp);                                                         // 445
  activeElement.attachEvent('onpropertychange', handlePropertyChange);                                                 // 446
}                                                                                                                      // 447
                                                                                                                       // 448
/**                                                                                                                    // 449
 * (For old IE.) Removes the event listeners from the currently-tracked element,                                       // 450
 * if any exists.                                                                                                      // 451
 */                                                                                                                    // 452
function stopWatchingForValueChange() {                                                                                // 453
  if (!activeElement) {                                                                                                // 454
    return;                                                                                                            // 455
  }                                                                                                                    // 456
                                                                                                                       // 457
  // delete restores the original property definition                                                                  // 458
  delete activeElement.value;                                                                                          // 459
  activeElement.detachEvent('onpropertychange', handlePropertyChange);                                                 // 460
                                                                                                                       // 461
  activeElement = null;                                                                                                // 462
  activeElementID = null;                                                                                              // 463
  activeElementValue = null;                                                                                           // 464
  activeElementValueProp = null;                                                                                       // 465
}                                                                                                                      // 466
                                                                                                                       // 467
/**                                                                                                                    // 468
 * (For old IE.) Handles a propertychange event, sending a `change` event if                                           // 469
 * the value of the active element has changed.                                                                        // 470
 */                                                                                                                    // 471
function handlePropertyChange(nativeEvent) {                                                                           // 472
  if (nativeEvent.propertyName !== 'value') {                                                                          // 473
    return;                                                                                                            // 474
  }                                                                                                                    // 475
  var value = nativeEvent.srcElement.value;                                                                            // 476
  if (value === activeElementValue) {                                                                                  // 477
    return;                                                                                                            // 478
  }                                                                                                                    // 479
  activeElementValue = value;                                                                                          // 480
                                                                                                                       // 481
  manualDispatchChangeEvent(nativeEvent);                                                                              // 482
}                                                                                                                      // 483
                                                                                                                       // 484
/**                                                                                                                    // 485
 * If a `change` event should be fired, returns the target's ID.                                                       // 486
 */                                                                                                                    // 487
function getTargetIDForInputEvent(                                                                                     // 488
    topLevelType,                                                                                                      // 489
    topLevelTarget,                                                                                                    // 490
    topLevelTargetID) {                                                                                                // 491
  if (topLevelType === topLevelTypes.topInput) {                                                                       // 492
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly                                           // 493
    // what we want so fall through here and trigger an abstract event                                                 // 494
    return topLevelTargetID;                                                                                           // 495
  }                                                                                                                    // 496
}                                                                                                                      // 497
                                                                                                                       // 498
// For IE8 and IE9.                                                                                                    // 499
function handleEventsForInputEventIE(                                                                                  // 500
    topLevelType,                                                                                                      // 501
    topLevelTarget,                                                                                                    // 502
    topLevelTargetID) {                                                                                                // 503
  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 504
    // In IE8, we can capture almost all .value changes by adding a                                                    // 505
    // propertychange handler and looking for events with propertyName                                                 // 506
    // equal to 'value'                                                                                                // 507
    // In IE9, propertychange fires for most input events but is buggy and                                             // 508
    // doesn't fire when text is deleted, but conveniently, selectionchange                                            // 509
    // appears to fire in all of the remaining cases so we catch those and                                             // 510
    // forward the event if the value has changed                                                                      // 511
    // In either case, we don't want to call the event handler if the value                                            // 512
    // is changed from JS so we redefine a setter for `.value` that updates                                            // 513
    // our activeElementValue variable, allowing us to ignore those changes                                            // 514
    //                                                                                                                 // 515
    // stopWatching() should be a noop here but we call it just in case we                                             // 516
    // missed a blur event somehow.                                                                                    // 517
    stopWatchingForValueChange();                                                                                      // 518
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);                                                     // 519
  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 520
    stopWatchingForValueChange();                                                                                      // 521
  }                                                                                                                    // 522
}                                                                                                                      // 523
                                                                                                                       // 524
// For IE8 and IE9.                                                                                                    // 525
function getTargetIDForInputEventIE(                                                                                   // 526
    topLevelType,                                                                                                      // 527
    topLevelTarget,                                                                                                    // 528
    topLevelTargetID) {                                                                                                // 529
  if (topLevelType === topLevelTypes.topSelectionChange ||                                                             // 530
      topLevelType === topLevelTypes.topKeyUp ||                                                                       // 531
      topLevelType === topLevelTypes.topKeyDown) {                                                                     // 532
    // On the selectionchange event, the target is just document which isn't                                           // 533
    // helpful for us so just check activeElement instead.                                                             // 534
    //                                                                                                                 // 535
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire                                          // 536
    // propertychange on the first input event after setting `value` from a                                            // 537
    // script and fires only keydown, keypress, keyup. Catching keyup usually                                          // 538
    // gets it and catching keydown lets us fire an event for the first                                                // 539
    // keystroke if user does a key repeat (it'll be a little delayed: right                                           // 540
    // before the second keystroke). Other input methods (e.g., paste) seem to                                         // 541
    // fire selectionchange normally.                                                                                  // 542
    if (activeElement && activeElement.value !== activeElementValue) {                                                 // 543
      activeElementValue = activeElement.value;                                                                        // 544
      return activeElementID;                                                                                          // 545
    }                                                                                                                  // 546
  }                                                                                                                    // 547
}                                                                                                                      // 548
                                                                                                                       // 549
                                                                                                                       // 550
/**                                                                                                                    // 551
 * SECTION: handle `click` event                                                                                       // 552
 */                                                                                                                    // 553
function shouldUseClickEvent(elem) {                                                                                   // 554
  // Use the `click` event to detect changes to checkbox and radio inputs.                                             // 555
  // This approach works across all browsers, whereas `change` does not fire                                           // 556
  // until `blur` in IE8.                                                                                              // 557
  return (                                                                                                             // 558
    elem.nodeName === 'INPUT' &&                                                                                       // 559
    (elem.type === 'checkbox' || elem.type === 'radio')                                                                // 560
  );                                                                                                                   // 561
}                                                                                                                      // 562
                                                                                                                       // 563
function getTargetIDForClickEvent(                                                                                     // 564
    topLevelType,                                                                                                      // 565
    topLevelTarget,                                                                                                    // 566
    topLevelTargetID) {                                                                                                // 567
  if (topLevelType === topLevelTypes.topClick) {                                                                       // 568
    return topLevelTargetID;                                                                                           // 569
  }                                                                                                                    // 570
}                                                                                                                      // 571
                                                                                                                       // 572
/**                                                                                                                    // 573
 * This plugin creates an `onChange` event that normalizes change events                                               // 574
 * across form elements. This event fires at a time when it's possible to                                              // 575
 * change the element's value without seeing a flicker.                                                                // 576
 *                                                                                                                     // 577
 * Supported elements are:                                                                                             // 578
 * - input (see `isTextInputElement`)                                                                                  // 579
 * - textarea                                                                                                          // 580
 * - select                                                                                                            // 581
 */                                                                                                                    // 582
var ChangeEventPlugin = {                                                                                              // 583
                                                                                                                       // 584
  eventTypes: eventTypes,                                                                                              // 585
                                                                                                                       // 586
  /**                                                                                                                  // 587
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 588
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 589
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 590
   * @param {object} nativeEvent Native browser event.                                                                 // 591
   * @return {*} An accumulation of synthetic events.                                                                  // 592
   * @see {EventPluginHub.extractEvents}                                                                               // 593
   */                                                                                                                  // 594
  extractEvents: function(                                                                                             // 595
      topLevelType,                                                                                                    // 596
      topLevelTarget,                                                                                                  // 597
      topLevelTargetID,                                                                                                // 598
      nativeEvent) {                                                                                                   // 599
                                                                                                                       // 600
    var getTargetIDFunc, handleEventFunc;                                                                              // 601
    if (shouldUseChangeEvent(topLevelTarget)) {                                                                        // 602
      if (doesChangeEventBubble) {                                                                                     // 603
        getTargetIDFunc = getTargetIDForChangeEvent;                                                                   // 604
      } else {                                                                                                         // 605
        handleEventFunc = handleEventsForChangeEventIE8;                                                               // 606
      }                                                                                                                // 607
    } else if (isTextInputElement(topLevelTarget)) {                                                                   // 608
      if (isInputEventSupported) {                                                                                     // 609
        getTargetIDFunc = getTargetIDForInputEvent;                                                                    // 610
      } else {                                                                                                         // 611
        getTargetIDFunc = getTargetIDForInputEventIE;                                                                  // 612
        handleEventFunc = handleEventsForInputEventIE;                                                                 // 613
      }                                                                                                                // 614
    } else if (shouldUseClickEvent(topLevelTarget)) {                                                                  // 615
      getTargetIDFunc = getTargetIDForClickEvent;                                                                      // 616
    }                                                                                                                  // 617
                                                                                                                       // 618
    if (getTargetIDFunc) {                                                                                             // 619
      var targetID = getTargetIDFunc(                                                                                  // 620
        topLevelType,                                                                                                  // 621
        topLevelTarget,                                                                                                // 622
        topLevelTargetID                                                                                               // 623
      );                                                                                                               // 624
      if (targetID) {                                                                                                  // 625
        var event = SyntheticEvent.getPooled(                                                                          // 626
          eventTypes.change,                                                                                           // 627
          targetID,                                                                                                    // 628
          nativeEvent                                                                                                  // 629
        );                                                                                                             // 630
        EventPropagators.accumulateTwoPhaseDispatches(event);                                                          // 631
        return event;                                                                                                  // 632
      }                                                                                                                // 633
    }                                                                                                                  // 634
                                                                                                                       // 635
    if (handleEventFunc) {                                                                                             // 636
      handleEventFunc(                                                                                                 // 637
        topLevelType,                                                                                                  // 638
        topLevelTarget,                                                                                                // 639
        topLevelTargetID                                                                                               // 640
      );                                                                                                               // 641
    }                                                                                                                  // 642
  }                                                                                                                    // 643
                                                                                                                       // 644
};                                                                                                                     // 645
                                                                                                                       // 646
module.exports = ChangeEventPlugin;                                                                                    // 647
                                                                                                                       // 648
},{"./EventConstants":14,"./EventPluginHub":16,"./EventPropagators":19,"./ExecutionEnvironment":20,"./ReactUpdates":71,"./SyntheticEvent":78,"./isEventSupported":113,"./isTextInputElement":115,"./keyOf":119}],5:[function(_dereq_,module,exports){
/**                                                                                                                    // 650
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 651
 *                                                                                                                     // 652
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 653
 * you may not use this file except in compliance with the License.                                                    // 654
 * You may obtain a copy of the License at                                                                             // 655
 *                                                                                                                     // 656
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 657
 *                                                                                                                     // 658
 * Unless required by applicable law or agreed to in writing, software                                                 // 659
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 660
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 661
 * See the License for the specific language governing permissions and                                                 // 662
 * limitations under the License.                                                                                      // 663
 *                                                                                                                     // 664
 * @providesModule ClientReactRootIndex                                                                                // 665
 * @typechecks                                                                                                         // 666
 */                                                                                                                    // 667
                                                                                                                       // 668
"use strict";                                                                                                          // 669
                                                                                                                       // 670
var nextReactRootIndex = 0;                                                                                            // 671
                                                                                                                       // 672
var ClientReactRootIndex = {                                                                                           // 673
  createReactRootIndex: function() {                                                                                   // 674
    return nextReactRootIndex++;                                                                                       // 675
  }                                                                                                                    // 676
};                                                                                                                     // 677
                                                                                                                       // 678
module.exports = ClientReactRootIndex;                                                                                 // 679
                                                                                                                       // 680
},{}],6:[function(_dereq_,module,exports){                                                                             // 681
/**                                                                                                                    // 682
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 683
 *                                                                                                                     // 684
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 685
 * you may not use this file except in compliance with the License.                                                    // 686
 * You may obtain a copy of the License at                                                                             // 687
 *                                                                                                                     // 688
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 689
 *                                                                                                                     // 690
 * Unless required by applicable law or agreed to in writing, software                                                 // 691
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 692
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 693
 * See the License for the specific language governing permissions and                                                 // 694
 * limitations under the License.                                                                                      // 695
 *                                                                                                                     // 696
 * @providesModule CompositionEventPlugin                                                                              // 697
 * @typechecks static-only                                                                                             // 698
 */                                                                                                                    // 699
                                                                                                                       // 700
"use strict";                                                                                                          // 701
                                                                                                                       // 702
var EventConstants = _dereq_("./EventConstants");                                                                      // 703
var EventPropagators = _dereq_("./EventPropagators");                                                                  // 704
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 705
var ReactInputSelection = _dereq_("./ReactInputSelection");                                                            // 706
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");                                                // 707
                                                                                                                       // 708
var getTextContentAccessor = _dereq_("./getTextContentAccessor");                                                      // 709
var keyOf = _dereq_("./keyOf");                                                                                        // 710
                                                                                                                       // 711
var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space                                                         // 712
var START_KEYCODE = 229;                                                                                               // 713
                                                                                                                       // 714
var useCompositionEvent = (                                                                                            // 715
  ExecutionEnvironment.canUseDOM &&                                                                                    // 716
  'CompositionEvent' in window                                                                                         // 717
);                                                                                                                     // 718
                                                                                                                       // 719
// In IE9+, we have access to composition events, but the data supplied                                                // 720
// by the native compositionend event may be incorrect. In Korean, for example,                                        // 721
// the compositionend event contains only one character regardless of                                                  // 722
// how many characters have been composed since compositionstart.                                                      // 723
// We therefore use the fallback data while still using the native                                                     // 724
// events as triggers.                                                                                                 // 725
var useFallbackData = (                                                                                                // 726
  !useCompositionEvent ||                                                                                              // 727
  'documentMode' in document && document.documentMode > 8                                                              // 728
);                                                                                                                     // 729
                                                                                                                       // 730
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 731
var currentComposition = null;                                                                                         // 732
                                                                                                                       // 733
// Events and their corresponding property names.                                                                      // 734
var eventTypes = {                                                                                                     // 735
  compositionEnd: {                                                                                                    // 736
    phasedRegistrationNames: {                                                                                         // 737
      bubbled: keyOf({onCompositionEnd: null}),                                                                        // 738
      captured: keyOf({onCompositionEndCapture: null})                                                                 // 739
    },                                                                                                                 // 740
    dependencies: [                                                                                                    // 741
      topLevelTypes.topBlur,                                                                                           // 742
      topLevelTypes.topCompositionEnd,                                                                                 // 743
      topLevelTypes.topKeyDown,                                                                                        // 744
      topLevelTypes.topKeyPress,                                                                                       // 745
      topLevelTypes.topKeyUp,                                                                                          // 746
      topLevelTypes.topMouseDown                                                                                       // 747
    ]                                                                                                                  // 748
  },                                                                                                                   // 749
  compositionStart: {                                                                                                  // 750
    phasedRegistrationNames: {                                                                                         // 751
      bubbled: keyOf({onCompositionStart: null}),                                                                      // 752
      captured: keyOf({onCompositionStartCapture: null})                                                               // 753
    },                                                                                                                 // 754
    dependencies: [                                                                                                    // 755
      topLevelTypes.topBlur,                                                                                           // 756
      topLevelTypes.topCompositionStart,                                                                               // 757
      topLevelTypes.topKeyDown,                                                                                        // 758
      topLevelTypes.topKeyPress,                                                                                       // 759
      topLevelTypes.topKeyUp,                                                                                          // 760
      topLevelTypes.topMouseDown                                                                                       // 761
    ]                                                                                                                  // 762
  },                                                                                                                   // 763
  compositionUpdate: {                                                                                                 // 764
    phasedRegistrationNames: {                                                                                         // 765
      bubbled: keyOf({onCompositionUpdate: null}),                                                                     // 766
      captured: keyOf({onCompositionUpdateCapture: null})                                                              // 767
    },                                                                                                                 // 768
    dependencies: [                                                                                                    // 769
      topLevelTypes.topBlur,                                                                                           // 770
      topLevelTypes.topCompositionUpdate,                                                                              // 771
      topLevelTypes.topKeyDown,                                                                                        // 772
      topLevelTypes.topKeyPress,                                                                                       // 773
      topLevelTypes.topKeyUp,                                                                                          // 774
      topLevelTypes.topMouseDown                                                                                       // 775
    ]                                                                                                                  // 776
  }                                                                                                                    // 777
};                                                                                                                     // 778
                                                                                                                       // 779
/**                                                                                                                    // 780
 * Translate native top level events into event types.                                                                 // 781
 *                                                                                                                     // 782
 * @param {string} topLevelType                                                                                        // 783
 * @return {object}                                                                                                    // 784
 */                                                                                                                    // 785
function getCompositionEventType(topLevelType) {                                                                       // 786
  switch (topLevelType) {                                                                                              // 787
    case topLevelTypes.topCompositionStart:                                                                            // 788
      return eventTypes.compositionStart;                                                                              // 789
    case topLevelTypes.topCompositionEnd:                                                                              // 790
      return eventTypes.compositionEnd;                                                                                // 791
    case topLevelTypes.topCompositionUpdate:                                                                           // 792
      return eventTypes.compositionUpdate;                                                                             // 793
  }                                                                                                                    // 794
}                                                                                                                      // 795
                                                                                                                       // 796
/**                                                                                                                    // 797
 * Does our fallback best-guess model think this event signifies that                                                  // 798
 * composition has begun?                                                                                              // 799
 *                                                                                                                     // 800
 * @param {string} topLevelType                                                                                        // 801
 * @param {object} nativeEvent                                                                                         // 802
 * @return {boolean}                                                                                                   // 803
 */                                                                                                                    // 804
function isFallbackStart(topLevelType, nativeEvent) {                                                                  // 805
  return (                                                                                                             // 806
    topLevelType === topLevelTypes.topKeyDown &&                                                                       // 807
    nativeEvent.keyCode === START_KEYCODE                                                                              // 808
  );                                                                                                                   // 809
}                                                                                                                      // 810
                                                                                                                       // 811
/**                                                                                                                    // 812
 * Does our fallback mode think that this event is the end of composition?                                             // 813
 *                                                                                                                     // 814
 * @param {string} topLevelType                                                                                        // 815
 * @param {object} nativeEvent                                                                                         // 816
 * @return {boolean}                                                                                                   // 817
 */                                                                                                                    // 818
function isFallbackEnd(topLevelType, nativeEvent) {                                                                    // 819
  switch (topLevelType) {                                                                                              // 820
    case topLevelTypes.topKeyUp:                                                                                       // 821
      // Command keys insert or clear IME input.                                                                       // 822
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);                                                       // 823
    case topLevelTypes.topKeyDown:                                                                                     // 824
      // Expect IME keyCode on each keydown. If we get any other                                                       // 825
      // code we must have exited earlier.                                                                             // 826
      return (nativeEvent.keyCode !== START_KEYCODE);                                                                  // 827
    case topLevelTypes.topKeyPress:                                                                                    // 828
    case topLevelTypes.topMouseDown:                                                                                   // 829
    case topLevelTypes.topBlur:                                                                                        // 830
      // Events are not possible without cancelling IME.                                                               // 831
      return true;                                                                                                     // 832
    default:                                                                                                           // 833
      return false;                                                                                                    // 834
  }                                                                                                                    // 835
}                                                                                                                      // 836
                                                                                                                       // 837
/**                                                                                                                    // 838
 * Helper class stores information about selection and document state                                                  // 839
 * so we can figure out what changed at a later date.                                                                  // 840
 *                                                                                                                     // 841
 * @param {DOMEventTarget} root                                                                                        // 842
 */                                                                                                                    // 843
function FallbackCompositionState(root) {                                                                              // 844
  this.root = root;                                                                                                    // 845
  this.startSelection = ReactInputSelection.getSelection(root);                                                        // 846
  this.startValue = this.getText();                                                                                    // 847
}                                                                                                                      // 848
                                                                                                                       // 849
/**                                                                                                                    // 850
 * Get current text of input.                                                                                          // 851
 *                                                                                                                     // 852
 * @return {string}                                                                                                    // 853
 */                                                                                                                    // 854
FallbackCompositionState.prototype.getText = function() {                                                              // 855
  return this.root.value || this.root[getTextContentAccessor()];                                                       // 856
};                                                                                                                     // 857
                                                                                                                       // 858
/**                                                                                                                    // 859
 * Text that has changed since the start of composition.                                                               // 860
 *                                                                                                                     // 861
 * @return {string}                                                                                                    // 862
 */                                                                                                                    // 863
FallbackCompositionState.prototype.getData = function() {                                                              // 864
  var endValue = this.getText();                                                                                       // 865
  var prefixLength = this.startSelection.start;                                                                        // 866
  var suffixLength = this.startValue.length - this.startSelection.end;                                                 // 867
                                                                                                                       // 868
  return endValue.substr(                                                                                              // 869
    prefixLength,                                                                                                      // 870
    endValue.length - suffixLength - prefixLength                                                                      // 871
  );                                                                                                                   // 872
};                                                                                                                     // 873
                                                                                                                       // 874
/**                                                                                                                    // 875
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and                                                 // 876
 * `onCompositionEnd` events on inputs, textareas and contentEditable                                                  // 877
 * nodes.                                                                                                              // 878
 */                                                                                                                    // 879
var CompositionEventPlugin = {                                                                                         // 880
                                                                                                                       // 881
  eventTypes: eventTypes,                                                                                              // 882
                                                                                                                       // 883
  /**                                                                                                                  // 884
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 885
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 886
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 887
   * @param {object} nativeEvent Native browser event.                                                                 // 888
   * @return {*} An accumulation of synthetic events.                                                                  // 889
   * @see {EventPluginHub.extractEvents}                                                                               // 890
   */                                                                                                                  // 891
  extractEvents: function(                                                                                             // 892
      topLevelType,                                                                                                    // 893
      topLevelTarget,                                                                                                  // 894
      topLevelTargetID,                                                                                                // 895
      nativeEvent) {                                                                                                   // 896
                                                                                                                       // 897
    var eventType;                                                                                                     // 898
    var data;                                                                                                          // 899
                                                                                                                       // 900
    if (useCompositionEvent) {                                                                                         // 901
      eventType = getCompositionEventType(topLevelType);                                                               // 902
    } else if (!currentComposition) {                                                                                  // 903
      if (isFallbackStart(topLevelType, nativeEvent)) {                                                                // 904
        eventType = eventTypes.compositionStart;                                                                       // 905
      }                                                                                                                // 906
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {                                                             // 907
      eventType = eventTypes.compositionEnd;                                                                           // 908
    }                                                                                                                  // 909
                                                                                                                       // 910
    if (useFallbackData) {                                                                                             // 911
      // The current composition is stored statically and must not be                                                  // 912
      // overwritten while composition continues.                                                                      // 913
      if (!currentComposition && eventType === eventTypes.compositionStart) {                                          // 914
        currentComposition = new FallbackCompositionState(topLevelTarget);                                             // 915
      } else if (eventType === eventTypes.compositionEnd) {                                                            // 916
        if (currentComposition) {                                                                                      // 917
          data = currentComposition.getData();                                                                         // 918
          currentComposition = null;                                                                                   // 919
        }                                                                                                              // 920
      }                                                                                                                // 921
    }                                                                                                                  // 922
                                                                                                                       // 923
    if (eventType) {                                                                                                   // 924
      var event = SyntheticCompositionEvent.getPooled(                                                                 // 925
        eventType,                                                                                                     // 926
        topLevelTargetID,                                                                                              // 927
        nativeEvent                                                                                                    // 928
      );                                                                                                               // 929
      if (data) {                                                                                                      // 930
        // Inject data generated from fallback path into the synthetic event.                                          // 931
        // This matches the property of native CompositionEventInterface.                                              // 932
        event.data = data;                                                                                             // 933
      }                                                                                                                // 934
      EventPropagators.accumulateTwoPhaseDispatches(event);                                                            // 935
      return event;                                                                                                    // 936
    }                                                                                                                  // 937
  }                                                                                                                    // 938
};                                                                                                                     // 939
                                                                                                                       // 940
module.exports = CompositionEventPlugin;                                                                               // 941
                                                                                                                       // 942
},{"./EventConstants":14,"./EventPropagators":19,"./ExecutionEnvironment":20,"./ReactInputSelection":52,"./SyntheticCompositionEvent":76,"./getTextContentAccessor":108,"./keyOf":119}],7:[function(_dereq_,module,exports){
/**                                                                                                                    // 944
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 945
 *                                                                                                                     // 946
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 947
 * you may not use this file except in compliance with the License.                                                    // 948
 * You may obtain a copy of the License at                                                                             // 949
 *                                                                                                                     // 950
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 951
 *                                                                                                                     // 952
 * Unless required by applicable law or agreed to in writing, software                                                 // 953
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 954
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 955
 * See the License for the specific language governing permissions and                                                 // 956
 * limitations under the License.                                                                                      // 957
 *                                                                                                                     // 958
 * @providesModule DOMChildrenOperations                                                                               // 959
 * @typechecks static-only                                                                                             // 960
 */                                                                                                                    // 961
                                                                                                                       // 962
"use strict";                                                                                                          // 963
                                                                                                                       // 964
var Danger = _dereq_("./Danger");                                                                                      // 965
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");                                              // 966
                                                                                                                       // 967
var getTextContentAccessor = _dereq_("./getTextContentAccessor");                                                      // 968
                                                                                                                       // 969
/**                                                                                                                    // 970
 * The DOM property to use when setting text content.                                                                  // 971
 *                                                                                                                     // 972
 * @type {string}                                                                                                      // 973
 * @private                                                                                                            // 974
 */                                                                                                                    // 975
var textContentAccessor = getTextContentAccessor();                                                                    // 976
                                                                                                                       // 977
/**                                                                                                                    // 978
 * Inserts `childNode` as a child of `parentNode` at the `index`.                                                      // 979
 *                                                                                                                     // 980
 * @param {DOMElement} parentNode Parent node in which to insert.                                                      // 981
 * @param {DOMElement} childNode Child node to insert.                                                                 // 982
 * @param {number} index Index at which to insert the child.                                                           // 983
 * @internal                                                                                                           // 984
 */                                                                                                                    // 985
function insertChildAt(parentNode, childNode, index) {                                                                 // 986
  var childNodes = parentNode.childNodes;                                                                              // 987
  if (childNodes[index] === childNode) {                                                                               // 988
    return;                                                                                                            // 989
  }                                                                                                                    // 990
  // If `childNode` is already a child of `parentNode`, remove it so that                                              // 991
  // computing `childNodes[index]` takes into account the removal.                                                     // 992
  if (childNode.parentNode === parentNode) {                                                                           // 993
    parentNode.removeChild(childNode);                                                                                 // 994
  }                                                                                                                    // 995
  if (index >= childNodes.length) {                                                                                    // 996
    parentNode.appendChild(childNode);                                                                                 // 997
  } else {                                                                                                             // 998
    parentNode.insertBefore(childNode, childNodes[index]);                                                             // 999
  }                                                                                                                    // 1000
}                                                                                                                      // 1001
                                                                                                                       // 1002
var updateTextContent;                                                                                                 // 1003
if (textContentAccessor === 'textContent') {                                                                           // 1004
  /**                                                                                                                  // 1005
   * Sets the text content of `node` to `text`.                                                                        // 1006
   *                                                                                                                   // 1007
   * @param {DOMElement} node Node to change                                                                           // 1008
   * @param {string} text New text content                                                                             // 1009
   */                                                                                                                  // 1010
  updateTextContent = function(node, text) {                                                                           // 1011
    node.textContent = text;                                                                                           // 1012
  };                                                                                                                   // 1013
} else {                                                                                                               // 1014
  /**                                                                                                                  // 1015
   * Sets the text content of `node` to `text`.                                                                        // 1016
   *                                                                                                                   // 1017
   * @param {DOMElement} node Node to change                                                                           // 1018
   * @param {string} text New text content                                                                             // 1019
   */                                                                                                                  // 1020
  updateTextContent = function(node, text) {                                                                           // 1021
    // In order to preserve newlines correctly, we can't use .innerText to set                                         // 1022
    // the contents (see #1080), so we empty the element then append a text node                                       // 1023
    while (node.firstChild) {                                                                                          // 1024
      node.removeChild(node.firstChild);                                                                               // 1025
    }                                                                                                                  // 1026
    if (text) {                                                                                                        // 1027
      var doc = node.ownerDocument || document;                                                                        // 1028
      node.appendChild(doc.createTextNode(text));                                                                      // 1029
    }                                                                                                                  // 1030
  };                                                                                                                   // 1031
}                                                                                                                      // 1032
                                                                                                                       // 1033
/**                                                                                                                    // 1034
 * Operations for updating with DOM children.                                                                          // 1035
 */                                                                                                                    // 1036
var DOMChildrenOperations = {                                                                                          // 1037
                                                                                                                       // 1038
  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,                                           // 1039
                                                                                                                       // 1040
  updateTextContent: updateTextContent,                                                                                // 1041
                                                                                                                       // 1042
  /**                                                                                                                  // 1043
   * Updates a component's children by processing a series of updates. The                                             // 1044
   * update configurations are each expected to have a `parentNode` property.                                          // 1045
   *                                                                                                                   // 1046
   * @param {array<object>} updates List of update configurations.                                                     // 1047
   * @param {array<string>} markupList List of markup strings.                                                         // 1048
   * @internal                                                                                                         // 1049
   */                                                                                                                  // 1050
  processUpdates: function(updates, markupList) {                                                                      // 1051
    var update;                                                                                                        // 1052
    // Mapping from parent IDs to initial child orderings.                                                             // 1053
    var initialChildren = null;                                                                                        // 1054
    // List of children that will be moved or removed.                                                                 // 1055
    var updatedChildren = null;                                                                                        // 1056
                                                                                                                       // 1057
    for (var i = 0; update = updates[i]; i++) {                                                                        // 1058
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||                                                  // 1059
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {                                                    // 1060
        var updatedIndex = update.fromIndex;                                                                           // 1061
        var updatedChild = update.parentNode.childNodes[updatedIndex];                                                 // 1062
        var parentID = update.parentID;                                                                                // 1063
                                                                                                                       // 1064
        initialChildren = initialChildren || {};                                                                       // 1065
        initialChildren[parentID] = initialChildren[parentID] || [];                                                   // 1066
        initialChildren[parentID][updatedIndex] = updatedChild;                                                        // 1067
                                                                                                                       // 1068
        updatedChildren = updatedChildren || [];                                                                       // 1069
        updatedChildren.push(updatedChild);                                                                            // 1070
      }                                                                                                                // 1071
    }                                                                                                                  // 1072
                                                                                                                       // 1073
    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);                                                   // 1074
                                                                                                                       // 1075
    // Remove updated children first so that `toIndex` is consistent.                                                  // 1076
    if (updatedChildren) {                                                                                             // 1077
      for (var j = 0; j < updatedChildren.length; j++) {                                                               // 1078
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);                                                 // 1079
      }                                                                                                                // 1080
    }                                                                                                                  // 1081
                                                                                                                       // 1082
    for (var k = 0; update = updates[k]; k++) {                                                                        // 1083
      switch (update.type) {                                                                                           // 1084
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:                                                                 // 1085
          insertChildAt(                                                                                               // 1086
            update.parentNode,                                                                                         // 1087
            renderedMarkup[update.markupIndex],                                                                        // 1088
            update.toIndex                                                                                             // 1089
          );                                                                                                           // 1090
          break;                                                                                                       // 1091
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:                                                                 // 1092
          insertChildAt(                                                                                               // 1093
            update.parentNode,                                                                                         // 1094
            initialChildren[update.parentID][update.fromIndex],                                                        // 1095
            update.toIndex                                                                                             // 1096
          );                                                                                                           // 1097
          break;                                                                                                       // 1098
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:                                                                  // 1099
          updateTextContent(                                                                                           // 1100
            update.parentNode,                                                                                         // 1101
            update.textContent                                                                                         // 1102
          );                                                                                                           // 1103
          break;                                                                                                       // 1104
        case ReactMultiChildUpdateTypes.REMOVE_NODE:                                                                   // 1105
          // Already removed by the for-loop above.                                                                    // 1106
          break;                                                                                                       // 1107
      }                                                                                                                // 1108
    }                                                                                                                  // 1109
  }                                                                                                                    // 1110
                                                                                                                       // 1111
};                                                                                                                     // 1112
                                                                                                                       // 1113
module.exports = DOMChildrenOperations;                                                                                // 1114
                                                                                                                       // 1115
},{"./Danger":10,"./ReactMultiChildUpdateTypes":58,"./getTextContentAccessor":108}],8:[function(_dereq_,module,exports){
/**                                                                                                                    // 1117
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 1118
 *                                                                                                                     // 1119
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1120
 * you may not use this file except in compliance with the License.                                                    // 1121
 * You may obtain a copy of the License at                                                                             // 1122
 *                                                                                                                     // 1123
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1124
 *                                                                                                                     // 1125
 * Unless required by applicable law or agreed to in writing, software                                                 // 1126
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1127
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1128
 * See the License for the specific language governing permissions and                                                 // 1129
 * limitations under the License.                                                                                      // 1130
 *                                                                                                                     // 1131
 * @providesModule DOMProperty                                                                                         // 1132
 * @typechecks static-only                                                                                             // 1133
 */                                                                                                                    // 1134
                                                                                                                       // 1135
/*jslint bitwise: true */                                                                                              // 1136
                                                                                                                       // 1137
"use strict";                                                                                                          // 1138
                                                                                                                       // 1139
var invariant = _dereq_("./invariant");                                                                                // 1140
                                                                                                                       // 1141
var DOMPropertyInjection = {                                                                                           // 1142
  /**                                                                                                                  // 1143
   * Mapping from normalized, camelcased property names to a configuration that                                        // 1144
   * specifies how the associated DOM property should be accessed or rendered.                                         // 1145
   */                                                                                                                  // 1146
  MUST_USE_ATTRIBUTE: 0x1,                                                                                             // 1147
  MUST_USE_PROPERTY: 0x2,                                                                                              // 1148
  HAS_SIDE_EFFECTS: 0x4,                                                                                               // 1149
  HAS_BOOLEAN_VALUE: 0x8,                                                                                              // 1150
  HAS_POSITIVE_NUMERIC_VALUE: 0x10,                                                                                    // 1151
                                                                                                                       // 1152
  /**                                                                                                                  // 1153
   * Inject some specialized knowledge about the DOM. This takes a config object                                       // 1154
   * with the following properties:                                                                                    // 1155
   *                                                                                                                   // 1156
   * isCustomAttribute: function that given an attribute name will return true                                         // 1157
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*                                          // 1158
   * attributes where it's impossible to enumerate all of the possible                                                 // 1159
   * attribute names,                                                                                                  // 1160
   *                                                                                                                   // 1161
   * Properties: object mapping DOM property name to one of the                                                        // 1162
   * DOMPropertyInjection constants or null. If your attribute isn't in here,                                          // 1163
   * it won't get written to the DOM.                                                                                  // 1164
   *                                                                                                                   // 1165
   * DOMAttributeNames: object mapping React attribute name to the DOM                                                 // 1166
   * attribute name. Attribute names not specified use the **lowercase**                                               // 1167
   * normalized name.                                                                                                  // 1168
   *                                                                                                                   // 1169
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.                                            // 1170
   * Property names not specified use the normalized name.                                                             // 1171
   *                                                                                                                   // 1172
   * DOMMutationMethods: Properties that require special mutation methods. If                                          // 1173
   * `value` is undefined, the mutation method should unset the property.                                              // 1174
   *                                                                                                                   // 1175
   * @param {object} domPropertyConfig the config as described above.                                                  // 1176
   */                                                                                                                  // 1177
  injectDOMPropertyConfig: function(domPropertyConfig) {                                                               // 1178
    var Properties = domPropertyConfig.Properties || {};                                                               // 1179
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};                                                 // 1180
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};                                                   // 1181
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};                                               // 1182
                                                                                                                       // 1183
    if (domPropertyConfig.isCustomAttribute) {                                                                         // 1184
      DOMProperty._isCustomAttributeFunctions.push(                                                                    // 1185
        domPropertyConfig.isCustomAttribute                                                                            // 1186
      );                                                                                                               // 1187
    }                                                                                                                  // 1188
                                                                                                                       // 1189
    for (var propName in Properties) {                                                                                 // 1190
      ("production" !== "development" ? invariant(                                                                     // 1191
        !DOMProperty.isStandardName[propName],                                                                         // 1192
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +                                       // 1193
        '\'%s\' which has already been injected. You may be accidentally ' +                                           // 1194
        'injecting the same DOM property config twice, or you may be ' +                                               // 1195
        'injecting two configs that have conflicting property names.',                                                 // 1196
        propName                                                                                                       // 1197
      ) : invariant(!DOMProperty.isStandardName[propName]));                                                           // 1198
                                                                                                                       // 1199
      DOMProperty.isStandardName[propName] = true;                                                                     // 1200
                                                                                                                       // 1201
      var lowerCased = propName.toLowerCase();                                                                         // 1202
      DOMProperty.getPossibleStandardName[lowerCased] = propName;                                                      // 1203
                                                                                                                       // 1204
      var attributeName = DOMAttributeNames[propName];                                                                 // 1205
      if (attributeName) {                                                                                             // 1206
        DOMProperty.getPossibleStandardName[attributeName] = propName;                                                 // 1207
      }                                                                                                                // 1208
                                                                                                                       // 1209
      DOMProperty.getAttributeName[propName] = attributeName || lowerCased;                                            // 1210
                                                                                                                       // 1211
      DOMProperty.getPropertyName[propName] =                                                                          // 1212
        DOMPropertyNames[propName] || propName;                                                                        // 1213
                                                                                                                       // 1214
      var mutationMethod = DOMMutationMethods[propName];                                                               // 1215
      if (mutationMethod) {                                                                                            // 1216
        DOMProperty.getMutationMethod[propName] = mutationMethod;                                                      // 1217
      }                                                                                                                // 1218
                                                                                                                       // 1219
      var propConfig = Properties[propName];                                                                           // 1220
      DOMProperty.mustUseAttribute[propName] =                                                                         // 1221
        propConfig & DOMPropertyInjection.MUST_USE_ATTRIBUTE;                                                          // 1222
      DOMProperty.mustUseProperty[propName] =                                                                          // 1223
        propConfig & DOMPropertyInjection.MUST_USE_PROPERTY;                                                           // 1224
      DOMProperty.hasSideEffects[propName] =                                                                           // 1225
        propConfig & DOMPropertyInjection.HAS_SIDE_EFFECTS;                                                            // 1226
      DOMProperty.hasBooleanValue[propName] =                                                                          // 1227
        propConfig & DOMPropertyInjection.HAS_BOOLEAN_VALUE;                                                           // 1228
      DOMProperty.hasPositiveNumericValue[propName] =                                                                  // 1229
        propConfig & DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE;                                                  // 1230
                                                                                                                       // 1231
      ("production" !== "development" ? invariant(                                                                     // 1232
        !DOMProperty.mustUseAttribute[propName] ||                                                                     // 1233
          !DOMProperty.mustUseProperty[propName],                                                                      // 1234
        'DOMProperty: Cannot require using both attribute and property: %s',                                           // 1235
        propName                                                                                                       // 1236
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||                                                         // 1237
        !DOMProperty.mustUseProperty[propName]));                                                                      // 1238
      ("production" !== "development" ? invariant(                                                                     // 1239
        DOMProperty.mustUseProperty[propName] ||                                                                       // 1240
          !DOMProperty.hasSideEffects[propName],                                                                       // 1241
        'DOMProperty: Properties that have side effects must use property: %s',                                        // 1242
        propName                                                                                                       // 1243
      ) : invariant(DOMProperty.mustUseProperty[propName] ||                                                           // 1244
        !DOMProperty.hasSideEffects[propName]));                                                                       // 1245
      ("production" !== "development" ? invariant(                                                                     // 1246
        !DOMProperty.hasBooleanValue[propName] ||                                                                      // 1247
          !DOMProperty.hasPositiveNumericValue[propName],                                                              // 1248
        'DOMProperty: Cannot have both boolean and positive numeric value: %s',                                        // 1249
        propName                                                                                                       // 1250
      ) : invariant(!DOMProperty.hasBooleanValue[propName] ||                                                          // 1251
        !DOMProperty.hasPositiveNumericValue[propName]));                                                              // 1252
    }                                                                                                                  // 1253
  }                                                                                                                    // 1254
};                                                                                                                     // 1255
var defaultValueCache = {};                                                                                            // 1256
                                                                                                                       // 1257
/**                                                                                                                    // 1258
 * DOMProperty exports lookup objects that can be used like functions:                                                 // 1259
 *                                                                                                                     // 1260
 *   > DOMProperty.isValid['id']                                                                                       // 1261
 *   true                                                                                                              // 1262
 *   > DOMProperty.isValid['foobar']                                                                                   // 1263
 *   undefined                                                                                                         // 1264
 *                                                                                                                     // 1265
 * Although this may be confusing, it performs better in general.                                                      // 1266
 *                                                                                                                     // 1267
 * @see http://jsperf.com/key-exists                                                                                   // 1268
 * @see http://jsperf.com/key-missing                                                                                  // 1269
 */                                                                                                                    // 1270
var DOMProperty = {                                                                                                    // 1271
                                                                                                                       // 1272
  ID_ATTRIBUTE_NAME: 'data-reactid',                                                                                   // 1273
                                                                                                                       // 1274
  /**                                                                                                                  // 1275
   * Checks whether a property name is a standard property.                                                            // 1276
   * @type {Object}                                                                                                    // 1277
   */                                                                                                                  // 1278
  isStandardName: {},                                                                                                  // 1279
                                                                                                                       // 1280
  /**                                                                                                                  // 1281
   * Mapping from lowercase property names to the properly cased version, used                                         // 1282
   * to warn in the case of missing properties.                                                                        // 1283
   * @type {Object}                                                                                                    // 1284
   */                                                                                                                  // 1285
  getPossibleStandardName: {},                                                                                         // 1286
                                                                                                                       // 1287
  /**                                                                                                                  // 1288
   * Mapping from normalized names to attribute names that differ. Attribute                                           // 1289
   * names are used when rendering markup or with `*Attribute()`.                                                      // 1290
   * @type {Object}                                                                                                    // 1291
   */                                                                                                                  // 1292
  getAttributeName: {},                                                                                                // 1293
                                                                                                                       // 1294
  /**                                                                                                                  // 1295
   * Mapping from normalized names to properties on DOM node instances.                                                // 1296
   * (This includes properties that mutate due to external factors.)                                                   // 1297
   * @type {Object}                                                                                                    // 1298
   */                                                                                                                  // 1299
  getPropertyName: {},                                                                                                 // 1300
                                                                                                                       // 1301
  /**                                                                                                                  // 1302
   * Mapping from normalized names to mutation methods. This will only exist if                                        // 1303
   * mutation cannot be set simply by the property or `setAttribute()`.                                                // 1304
   * @type {Object}                                                                                                    // 1305
   */                                                                                                                  // 1306
  getMutationMethod: {},                                                                                               // 1307
                                                                                                                       // 1308
  /**                                                                                                                  // 1309
   * Whether the property must be accessed and mutated as an object property.                                          // 1310
   * @type {Object}                                                                                                    // 1311
   */                                                                                                                  // 1312
  mustUseAttribute: {},                                                                                                // 1313
                                                                                                                       // 1314
  /**                                                                                                                  // 1315
   * Whether the property must be accessed and mutated using `*Attribute()`.                                           // 1316
   * (This includes anything that fails `<propName> in <element>`.)                                                    // 1317
   * @type {Object}                                                                                                    // 1318
   */                                                                                                                  // 1319
  mustUseProperty: {},                                                                                                 // 1320
                                                                                                                       // 1321
  /**                                                                                                                  // 1322
   * Whether or not setting a value causes side effects such as triggering                                             // 1323
   * resources to be loaded or text selection changes. We must ensure that                                             // 1324
   * the value is only set if it has changed.                                                                          // 1325
   * @type {Object}                                                                                                    // 1326
   */                                                                                                                  // 1327
  hasSideEffects: {},                                                                                                  // 1328
                                                                                                                       // 1329
  /**                                                                                                                  // 1330
   * Whether the property should be removed when set to a falsey value.                                                // 1331
   * @type {Object}                                                                                                    // 1332
   */                                                                                                                  // 1333
  hasBooleanValue: {},                                                                                                 // 1334
                                                                                                                       // 1335
  /**                                                                                                                  // 1336
   * Whether the property must be positive numeric or parse as a positive                                              // 1337
   * numeric and should be removed when set to a falsey value.                                                         // 1338
   * @type {Object}                                                                                                    // 1339
   */                                                                                                                  // 1340
  hasPositiveNumericValue: {},                                                                                         // 1341
                                                                                                                       // 1342
  /**                                                                                                                  // 1343
   * All of the isCustomAttribute() functions that have been injected.                                                 // 1344
   */                                                                                                                  // 1345
  _isCustomAttributeFunctions: [],                                                                                     // 1346
                                                                                                                       // 1347
  /**                                                                                                                  // 1348
   * Checks whether a property name is a custom attribute.                                                             // 1349
   * @method                                                                                                           // 1350
   */                                                                                                                  // 1351
  isCustomAttribute: function(attributeName) {                                                                         // 1352
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {                                         // 1353
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];                                            // 1354
      if (isCustomAttributeFn(attributeName)) {                                                                        // 1355
        return true;                                                                                                   // 1356
      }                                                                                                                // 1357
    }                                                                                                                  // 1358
    return false;                                                                                                      // 1359
  },                                                                                                                   // 1360
                                                                                                                       // 1361
  /**                                                                                                                  // 1362
   * Returns the default property value for a DOM property (i.e., not an                                               // 1363
   * attribute). Most default values are '' or false, but not all. Worse yet,                                          // 1364
   * some (in particular, `type`) vary depending on the type of element.                                               // 1365
   *                                                                                                                   // 1366
   * TODO: Is it better to grab all the possible properties when creating an                                           // 1367
   * element to avoid having to create the same element twice?                                                         // 1368
   */                                                                                                                  // 1369
  getDefaultValueForProperty: function(nodeName, prop) {                                                               // 1370
    var nodeDefaults = defaultValueCache[nodeName];                                                                    // 1371
    var testElement;                                                                                                   // 1372
    if (!nodeDefaults) {                                                                                               // 1373
      defaultValueCache[nodeName] = nodeDefaults = {};                                                                 // 1374
    }                                                                                                                  // 1375
    if (!(prop in nodeDefaults)) {                                                                                     // 1376
      testElement = document.createElement(nodeName);                                                                  // 1377
      nodeDefaults[prop] = testElement[prop];                                                                          // 1378
    }                                                                                                                  // 1379
    return nodeDefaults[prop];                                                                                         // 1380
  },                                                                                                                   // 1381
                                                                                                                       // 1382
  injection: DOMPropertyInjection                                                                                      // 1383
};                                                                                                                     // 1384
                                                                                                                       // 1385
module.exports = DOMProperty;                                                                                          // 1386
                                                                                                                       // 1387
},{"./invariant":112}],9:[function(_dereq_,module,exports){                                                            // 1388
/**                                                                                                                    // 1389
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 1390
 *                                                                                                                     // 1391
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1392
 * you may not use this file except in compliance with the License.                                                    // 1393
 * You may obtain a copy of the License at                                                                             // 1394
 *                                                                                                                     // 1395
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1396
 *                                                                                                                     // 1397
 * Unless required by applicable law or agreed to in writing, software                                                 // 1398
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1399
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1400
 * See the License for the specific language governing permissions and                                                 // 1401
 * limitations under the License.                                                                                      // 1402
 *                                                                                                                     // 1403
 * @providesModule DOMPropertyOperations                                                                               // 1404
 * @typechecks static-only                                                                                             // 1405
 */                                                                                                                    // 1406
                                                                                                                       // 1407
"use strict";                                                                                                          // 1408
                                                                                                                       // 1409
var DOMProperty = _dereq_("./DOMProperty");                                                                            // 1410
                                                                                                                       // 1411
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");                                                          // 1412
var memoizeStringOnly = _dereq_("./memoizeStringOnly");                                                                // 1413
var warning = _dereq_("./warning");                                                                                    // 1414
                                                                                                                       // 1415
function shouldIgnoreValue(name, value) {                                                                              // 1416
  return value == null ||                                                                                              // 1417
    DOMProperty.hasBooleanValue[name] && !value ||                                                                     // 1418
    DOMProperty.hasPositiveNumericValue[name] && (isNaN(value) || value < 1);                                          // 1419
}                                                                                                                      // 1420
                                                                                                                       // 1421
var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {                                                 // 1422
  return escapeTextForBrowser(name) + '="';                                                                            // 1423
});                                                                                                                    // 1424
                                                                                                                       // 1425
if ("production" !== "development") {                                                                                  // 1426
  var reactProps = {                                                                                                   // 1427
    children: true,                                                                                                    // 1428
    dangerouslySetInnerHTML: true,                                                                                     // 1429
    key: true,                                                                                                         // 1430
    ref: true                                                                                                          // 1431
  };                                                                                                                   // 1432
  var warnedProperties = {};                                                                                           // 1433
                                                                                                                       // 1434
  var warnUnknownProperty = function(name) {                                                                           // 1435
    if (reactProps[name] || warnedProperties[name]) {                                                                  // 1436
      return;                                                                                                          // 1437
    }                                                                                                                  // 1438
                                                                                                                       // 1439
    warnedProperties[name] = true;                                                                                     // 1440
    var lowerCasedName = name.toLowerCase();                                                                           // 1441
                                                                                                                       // 1442
    // data-* attributes should be lowercase; suggest the lowercase version                                            // 1443
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ?                                                 // 1444
      lowerCasedName : DOMProperty.getPossibleStandardName[lowerCasedName];                                            // 1445
                                                                                                                       // 1446
    // For now, only warn when we have a suggested correction. This prevents                                           // 1447
    // logging too much when using transferPropsTo.                                                                    // 1448
    ("production" !== "development" ? warning(                                                                         // 1449
      standardName == null,                                                                                            // 1450
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'                                          // 1451
    ) : null);                                                                                                         // 1452
                                                                                                                       // 1453
  };                                                                                                                   // 1454
}                                                                                                                      // 1455
                                                                                                                       // 1456
/**                                                                                                                    // 1457
 * Operations for dealing with DOM properties.                                                                         // 1458
 */                                                                                                                    // 1459
var DOMPropertyOperations = {                                                                                          // 1460
                                                                                                                       // 1461
  /**                                                                                                                  // 1462
   * Creates markup for the ID property.                                                                               // 1463
   *                                                                                                                   // 1464
   * @param {string} id Unescaped ID.                                                                                  // 1465
   * @return {string} Markup string.                                                                                   // 1466
   */                                                                                                                  // 1467
  createMarkupForID: function(id) {                                                                                    // 1468
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +                                              // 1469
      escapeTextForBrowser(id) + '"';                                                                                  // 1470
  },                                                                                                                   // 1471
                                                                                                                       // 1472
  /**                                                                                                                  // 1473
   * Creates markup for a property.                                                                                    // 1474
   *                                                                                                                   // 1475
   * @param {string} name                                                                                              // 1476
   * @param {*} value                                                                                                  // 1477
   * @return {?string} Markup string, or null if the property was invalid.                                             // 1478
   */                                                                                                                  // 1479
  createMarkupForProperty: function(name, value) {                                                                     // 1480
    if (DOMProperty.isStandardName[name]) {                                                                            // 1481
      if (shouldIgnoreValue(name, value)) {                                                                            // 1482
        return '';                                                                                                     // 1483
      }                                                                                                                // 1484
      var attributeName = DOMProperty.getAttributeName[name];                                                          // 1485
      if (DOMProperty.hasBooleanValue[name]) {                                                                         // 1486
        return escapeTextForBrowser(attributeName);                                                                    // 1487
      }                                                                                                                // 1488
      return processAttributeNameAndPrefix(attributeName) +                                                            // 1489
        escapeTextForBrowser(value) + '"';                                                                             // 1490
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1491
      if (value == null) {                                                                                             // 1492
        return '';                                                                                                     // 1493
      }                                                                                                                // 1494
      return processAttributeNameAndPrefix(name) +                                                                     // 1495
        escapeTextForBrowser(value) + '"';                                                                             // 1496
    } else if ("production" !== "development") {                                                                       // 1497
      warnUnknownProperty(name);                                                                                       // 1498
    }                                                                                                                  // 1499
    return null;                                                                                                       // 1500
  },                                                                                                                   // 1501
                                                                                                                       // 1502
  /**                                                                                                                  // 1503
   * Sets the value for a property on a node.                                                                          // 1504
   *                                                                                                                   // 1505
   * @param {DOMElement} node                                                                                          // 1506
   * @param {string} name                                                                                              // 1507
   * @param {*} value                                                                                                  // 1508
   */                                                                                                                  // 1509
  setValueForProperty: function(node, name, value) {                                                                   // 1510
    if (DOMProperty.isStandardName[name]) {                                                                            // 1511
      var mutationMethod = DOMProperty.getMutationMethod[name];                                                        // 1512
      if (mutationMethod) {                                                                                            // 1513
        mutationMethod(node, value);                                                                                   // 1514
      } else if (shouldIgnoreValue(name, value)) {                                                                     // 1515
        this.deleteValueForProperty(node, name);                                                                       // 1516
      } else if (DOMProperty.mustUseAttribute[name]) {                                                                 // 1517
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);                                             // 1518
      } else {                                                                                                         // 1519
        var propName = DOMProperty.getPropertyName[name];                                                              // 1520
        if (!DOMProperty.hasSideEffects[name] || node[propName] !== value) {                                           // 1521
          node[propName] = value;                                                                                      // 1522
        }                                                                                                              // 1523
      }                                                                                                                // 1524
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1525
      if (value == null) {                                                                                             // 1526
        node.removeAttribute(DOMProperty.getAttributeName[name]);                                                      // 1527
      } else {                                                                                                         // 1528
        node.setAttribute(name, '' + value);                                                                           // 1529
      }                                                                                                                // 1530
    } else if ("production" !== "development") {                                                                       // 1531
      warnUnknownProperty(name);                                                                                       // 1532
    }                                                                                                                  // 1533
  },                                                                                                                   // 1534
                                                                                                                       // 1535
  /**                                                                                                                  // 1536
   * Deletes the value for a property on a node.                                                                       // 1537
   *                                                                                                                   // 1538
   * @param {DOMElement} node                                                                                          // 1539
   * @param {string} name                                                                                              // 1540
   */                                                                                                                  // 1541
  deleteValueForProperty: function(node, name) {                                                                       // 1542
    if (DOMProperty.isStandardName[name]) {                                                                            // 1543
      var mutationMethod = DOMProperty.getMutationMethod[name];                                                        // 1544
      if (mutationMethod) {                                                                                            // 1545
        mutationMethod(node, undefined);                                                                               // 1546
      } else if (DOMProperty.mustUseAttribute[name]) {                                                                 // 1547
        node.removeAttribute(DOMProperty.getAttributeName[name]);                                                      // 1548
      } else {                                                                                                         // 1549
        var propName = DOMProperty.getPropertyName[name];                                                              // 1550
        var defaultValue = DOMProperty.getDefaultValueForProperty(                                                     // 1551
          node.nodeName,                                                                                               // 1552
          propName                                                                                                     // 1553
        );                                                                                                             // 1554
        if (!DOMProperty.hasSideEffects[name] ||                                                                       // 1555
            node[propName] !== defaultValue) {                                                                         // 1556
          node[propName] = defaultValue;                                                                               // 1557
        }                                                                                                              // 1558
      }                                                                                                                // 1559
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1560
      node.removeAttribute(name);                                                                                      // 1561
    } else if ("production" !== "development") {                                                                       // 1562
      warnUnknownProperty(name);                                                                                       // 1563
    }                                                                                                                  // 1564
  }                                                                                                                    // 1565
                                                                                                                       // 1566
};                                                                                                                     // 1567
                                                                                                                       // 1568
module.exports = DOMPropertyOperations;                                                                                // 1569
                                                                                                                       // 1570
},{"./DOMProperty":8,"./escapeTextForBrowser":98,"./memoizeStringOnly":120,"./warning":134}],10:[function(_dereq_,module,exports){
/**                                                                                                                    // 1572
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 1573
 *                                                                                                                     // 1574
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1575
 * you may not use this file except in compliance with the License.                                                    // 1576
 * You may obtain a copy of the License at                                                                             // 1577
 *                                                                                                                     // 1578
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1579
 *                                                                                                                     // 1580
 * Unless required by applicable law or agreed to in writing, software                                                 // 1581
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1582
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1583
 * See the License for the specific language governing permissions and                                                 // 1584
 * limitations under the License.                                                                                      // 1585
 *                                                                                                                     // 1586
 * @providesModule Danger                                                                                              // 1587
 * @typechecks static-only                                                                                             // 1588
 */                                                                                                                    // 1589
                                                                                                                       // 1590
/*jslint evil: true, sub: true */                                                                                      // 1591
                                                                                                                       // 1592
"use strict";                                                                                                          // 1593
                                                                                                                       // 1594
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 1595
                                                                                                                       // 1596
var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");                                                        // 1597
var emptyFunction = _dereq_("./emptyFunction");                                                                        // 1598
var getMarkupWrap = _dereq_("./getMarkupWrap");                                                                        // 1599
var invariant = _dereq_("./invariant");                                                                                // 1600
                                                                                                                       // 1601
var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;                                                                                // 1602
var RESULT_INDEX_ATTR = 'data-danger-index';                                                                           // 1603
                                                                                                                       // 1604
/**                                                                                                                    // 1605
 * Extracts the `nodeName` from a string of markup.                                                                    // 1606
 *                                                                                                                     // 1607
 * NOTE: Extracting the `nodeName` does not require a regular expression match                                         // 1608
 * because we make assumptions about React-generated markup (i.e. there are no                                         // 1609
 * spaces surrounding the opening tag and there is at least one attribute).                                            // 1610
 *                                                                                                                     // 1611
 * @param {string} markup String of markup.                                                                            // 1612
 * @return {string} Node name of the supplied markup.                                                                  // 1613
 * @see http://jsperf.com/extract-nodename                                                                             // 1614
 */                                                                                                                    // 1615
function getNodeName(markup) {                                                                                         // 1616
  return markup.substring(1, markup.indexOf(' '));                                                                     // 1617
}                                                                                                                      // 1618
                                                                                                                       // 1619
var Danger = {                                                                                                         // 1620
                                                                                                                       // 1621
  /**                                                                                                                  // 1622
   * Renders markup into an array of nodes. The markup is expected to render                                           // 1623
   * into a list of root nodes. Also, the length of `resultList` and                                                   // 1624
   * `markupList` should be the same.                                                                                  // 1625
   *                                                                                                                   // 1626
   * @param {array<string>} markupList List of markup strings to render.                                               // 1627
   * @return {array<DOMElement>} List of rendered nodes.                                                               // 1628
   * @internal                                                                                                         // 1629
   */                                                                                                                  // 1630
  dangerouslyRenderMarkup: function(markupList) {                                                                      // 1631
    ("production" !== "development" ? invariant(                                                                       // 1632
      ExecutionEnvironment.canUseDOM,                                                                                  // 1633
      'dangerouslyRenderMarkup(...): Cannot render markup in a Worker ' +                                              // 1634
      'thread. This is likely a bug in the framework. Please report ' +                                                // 1635
      'immediately.'                                                                                                   // 1636
    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 1637
    var nodeName;                                                                                                      // 1638
    var markupByNodeName = {};                                                                                         // 1639
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.                                                 // 1640
    for (var i = 0; i < markupList.length; i++) {                                                                      // 1641
      ("production" !== "development" ? invariant(                                                                     // 1642
        markupList[i],                                                                                                 // 1643
        'dangerouslyRenderMarkup(...): Missing markup.'                                                                // 1644
      ) : invariant(markupList[i]));                                                                                   // 1645
      nodeName = getNodeName(markupList[i]);                                                                           // 1646
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';                                                             // 1647
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];                                                   // 1648
      markupByNodeName[nodeName][i] = markupList[i];                                                                   // 1649
    }                                                                                                                  // 1650
    var resultList = [];                                                                                               // 1651
    var resultListAssignmentCount = 0;                                                                                 // 1652
    for (nodeName in markupByNodeName) {                                                                               // 1653
      if (!markupByNodeName.hasOwnProperty(nodeName)) {                                                                // 1654
        continue;                                                                                                      // 1655
      }                                                                                                                // 1656
      var markupListByNodeName = markupByNodeName[nodeName];                                                           // 1657
                                                                                                                       // 1658
      // This for-in loop skips the holes of the sparse array. The order of                                            // 1659
      // iteration should follow the order of assignment, which happens to match                                       // 1660
      // numerical index order, but we don't rely on that.                                                             // 1661
      for (var resultIndex in markupListByNodeName) {                                                                  // 1662
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {                                                        // 1663
          var markup = markupListByNodeName[resultIndex];                                                              // 1664
                                                                                                                       // 1665
          // Push the requested markup with an additional RESULT_INDEX_ATTR                                            // 1666
          // attribute.  If the markup does not start with a < character, it                                           // 1667
          // will be discarded below (with an appropriate console.error).                                              // 1668
          markupListByNodeName[resultIndex] = markup.replace(                                                          // 1669
            OPEN_TAG_NAME_EXP,                                                                                         // 1670
            // This index will be parsed back out below.                                                               // 1671
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '                                                      // 1672
          );                                                                                                           // 1673
        }                                                                                                              // 1674
      }                                                                                                                // 1675
                                                                                                                       // 1676
      // Render each group of markup with similar wrapping `nodeName`.                                                 // 1677
      var renderNodes = createNodesFromMarkup(                                                                         // 1678
        markupListByNodeName.join(''),                                                                                 // 1679
        emptyFunction // Do nothing special with <script> tags.                                                        // 1680
      );                                                                                                               // 1681
                                                                                                                       // 1682
      for (i = 0; i < renderNodes.length; ++i) {                                                                       // 1683
        var renderNode = renderNodes[i];                                                                               // 1684
        if (renderNode.hasAttribute &&                                                                                 // 1685
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {                                                              // 1686
                                                                                                                       // 1687
          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);                                                   // 1688
          renderNode.removeAttribute(RESULT_INDEX_ATTR);                                                               // 1689
                                                                                                                       // 1690
          ("production" !== "development" ? invariant(                                                                 // 1691
            !resultList.hasOwnProperty(resultIndex),                                                                   // 1692
            'Danger: Assigning to an already-occupied result index.'                                                   // 1693
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));                                                     // 1694
                                                                                                                       // 1695
          resultList[resultIndex] = renderNode;                                                                        // 1696
                                                                                                                       // 1697
          // This should match resultList.length and markupList.length when                                            // 1698
          // we're done.                                                                                               // 1699
          resultListAssignmentCount += 1;                                                                              // 1700
                                                                                                                       // 1701
        } else if ("production" !== "development") {                                                                   // 1702
          console.error(                                                                                               // 1703
            "Danger: Discarding unexpected node:",                                                                     // 1704
            renderNode                                                                                                 // 1705
          );                                                                                                           // 1706
        }                                                                                                              // 1707
      }                                                                                                                // 1708
    }                                                                                                                  // 1709
                                                                                                                       // 1710
    // Although resultList was populated out of order, it should now be a dense                                        // 1711
    // array.                                                                                                          // 1712
    ("production" !== "development" ? invariant(                                                                       // 1713
      resultListAssignmentCount === resultList.length,                                                                 // 1714
      'Danger: Did not assign to every index of resultList.'                                                           // 1715
    ) : invariant(resultListAssignmentCount === resultList.length));                                                   // 1716
                                                                                                                       // 1717
    ("production" !== "development" ? invariant(                                                                       // 1718
      resultList.length === markupList.length,                                                                         // 1719
      'Danger: Expected markup to render %s nodes, but rendered %s.',                                                  // 1720
      markupList.length,                                                                                               // 1721
      resultList.length                                                                                                // 1722
    ) : invariant(resultList.length === markupList.length));                                                           // 1723
                                                                                                                       // 1724
    return resultList;                                                                                                 // 1725
  },                                                                                                                   // 1726
                                                                                                                       // 1727
  /**                                                                                                                  // 1728
   * Replaces a node with a string of markup at its current position within its                                        // 1729
   * parent. The markup must render into a single root node.                                                           // 1730
   *                                                                                                                   // 1731
   * @param {DOMElement} oldChild Child node to replace.                                                               // 1732
   * @param {string} markup Markup to render in place of the child node.                                               // 1733
   * @internal                                                                                                         // 1734
   */                                                                                                                  // 1735
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {                                                       // 1736
    ("production" !== "development" ? invariant(                                                                       // 1737
      ExecutionEnvironment.canUseDOM,                                                                                  // 1738
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +                                            // 1739
      'worker thread. This is likely a bug in the framework. Please report ' +                                         // 1740
      'immediately.'                                                                                                   // 1741
    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 1742
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(                                                                       // 1744
      oldChild.tagName.toLowerCase() !== 'html',                                                                       // 1745
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +                                         // 1746
      '<html> node. This is because browser quirks make this unreliable ' +                                            // 1747
      'and/or slow. If you want to render to the root you must use ' +                                                 // 1748
      'server rendering. See renderComponentToString().'                                                               // 1749
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));                                                         // 1750
                                                                                                                       // 1751
    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];                                                    // 1752
    oldChild.parentNode.replaceChild(newChild, oldChild);                                                              // 1753
  }                                                                                                                    // 1754
                                                                                                                       // 1755
};                                                                                                                     // 1756
                                                                                                                       // 1757
module.exports = Danger;                                                                                               // 1758
                                                                                                                       // 1759
},{"./ExecutionEnvironment":20,"./createNodesFromMarkup":93,"./emptyFunction":96,"./getMarkupWrap":105,"./invariant":112}],11:[function(_dereq_,module,exports){
/**                                                                                                                    // 1761
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 1762
 *                                                                                                                     // 1763
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1764
 * you may not use this file except in compliance with the License.                                                    // 1765
 * You may obtain a copy of the License at                                                                             // 1766
 *                                                                                                                     // 1767
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1768
 *                                                                                                                     // 1769
 * Unless required by applicable law or agreed to in writing, software                                                 // 1770
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1771
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1772
 * See the License for the specific language governing permissions and                                                 // 1773
 * limitations under the License.                                                                                      // 1774
 *                                                                                                                     // 1775
 * @providesModule DefaultDOMPropertyConfig                                                                            // 1776
 */                                                                                                                    // 1777
                                                                                                                       // 1778
/*jslint bitwise: true*/                                                                                               // 1779
                                                                                                                       // 1780
"use strict";                                                                                                          // 1781
                                                                                                                       // 1782
var DOMProperty = _dereq_("./DOMProperty");                                                                            // 1783
                                                                                                                       // 1784
var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;                                                     // 1785
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;                                                       // 1786
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;                                                       // 1787
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;                                                         // 1788
var HAS_POSITIVE_NUMERIC_VALUE =                                                                                       // 1789
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;                                                                    // 1790
                                                                                                                       // 1791
var DefaultDOMPropertyConfig = {                                                                                       // 1792
  isCustomAttribute: RegExp.prototype.test.bind(                                                                       // 1793
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/                                                                                 // 1794
  ),                                                                                                                   // 1795
  Properties: {                                                                                                        // 1796
    /**                                                                                                                // 1797
     * Standard Properties                                                                                             // 1798
     */                                                                                                                // 1799
    accept: null,                                                                                                      // 1800
    accessKey: null,                                                                                                   // 1801
    action: null,                                                                                                      // 1802
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                           // 1803
    allowTransparency: MUST_USE_ATTRIBUTE,                                                                             // 1804
    alt: null,                                                                                                         // 1805
    async: HAS_BOOLEAN_VALUE,                                                                                          // 1806
    autoComplete: null,                                                                                                // 1807
    // autoFocus is polyfilled/normalized by AutoFocusMixin                                                            // 1808
    // autoFocus: HAS_BOOLEAN_VALUE,                                                                                   // 1809
    autoPlay: HAS_BOOLEAN_VALUE,                                                                                       // 1810
    cellPadding: null,                                                                                                 // 1811
    cellSpacing: null,                                                                                                 // 1812
    charSet: MUST_USE_ATTRIBUTE,                                                                                       // 1813
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                    // 1814
    className: MUST_USE_PROPERTY,                                                                                      // 1815
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 1816
    colSpan: null,                                                                                                     // 1817
    content: null,                                                                                                     // 1818
    contentEditable: null,                                                                                             // 1819
    contextMenu: MUST_USE_ATTRIBUTE,                                                                                   // 1820
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 1821
    crossOrigin: null,                                                                                                 // 1822
    data: null, // For `<object />` acts as `src`.                                                                     // 1823
    dateTime: MUST_USE_ATTRIBUTE,                                                                                      // 1824
    defer: HAS_BOOLEAN_VALUE,                                                                                          // 1825
    dir: null,                                                                                                         // 1826
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                  // 1827
    download: null,                                                                                                    // 1828
    draggable: null,                                                                                                   // 1829
    encType: null,                                                                                                     // 1830
    form: MUST_USE_ATTRIBUTE,                                                                                          // 1831
    formNoValidate: HAS_BOOLEAN_VALUE,                                                                                 // 1832
    frameBorder: MUST_USE_ATTRIBUTE,                                                                                   // 1833
    height: MUST_USE_ATTRIBUTE,                                                                                        // 1834
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                    // 1835
    href: null,                                                                                                        // 1836
    hrefLang: null,                                                                                                    // 1837
    htmlFor: null,                                                                                                     // 1838
    httpEquiv: null,                                                                                                   // 1839
    icon: null,                                                                                                        // 1840
    id: MUST_USE_PROPERTY,                                                                                             // 1841
    label: null,                                                                                                       // 1842
    lang: null,                                                                                                        // 1843
    list: null,                                                                                                        // 1844
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                       // 1845
    max: null,                                                                                                         // 1846
    maxLength: MUST_USE_ATTRIBUTE,                                                                                     // 1847
    mediaGroup: null,                                                                                                  // 1848
    method: null,                                                                                                      // 1849
    min: null,                                                                                                         // 1850
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 1851
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                      // 1852
    name: null,                                                                                                        // 1853
    noValidate: HAS_BOOLEAN_VALUE,                                                                                     // 1854
    pattern: null,                                                                                                     // 1855
    placeholder: null,                                                                                                 // 1856
    poster: null,                                                                                                      // 1857
    preload: null,                                                                                                     // 1858
    radioGroup: null,                                                                                                  // 1859
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 1860
    rel: null,                                                                                                         // 1861
    required: HAS_BOOLEAN_VALUE,                                                                                       // 1862
    role: MUST_USE_ATTRIBUTE,                                                                                          // 1863
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 1864
    rowSpan: null,                                                                                                     // 1865
    sandbox: null,                                                                                                     // 1866
    scope: null,                                                                                                       // 1867
    scrollLeft: MUST_USE_PROPERTY,                                                                                     // 1868
    scrollTop: MUST_USE_PROPERTY,                                                                                      // 1869
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                  // 1870
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 1871
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 1872
    span: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 1873
    spellCheck: null,                                                                                                  // 1874
    src: null,                                                                                                         // 1875
    srcDoc: MUST_USE_PROPERTY,                                                                                         // 1876
    srcSet: null,                                                                                                      // 1877
    step: null,                                                                                                        // 1878
    style: null,                                                                                                       // 1879
    tabIndex: null,                                                                                                    // 1880
    target: null,                                                                                                      // 1881
    title: null,                                                                                                       // 1882
    type: null,                                                                                                        // 1883
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,                                                                       // 1884
    width: MUST_USE_ATTRIBUTE,                                                                                         // 1885
    wmode: MUST_USE_ATTRIBUTE,                                                                                         // 1886
                                                                                                                       // 1887
    /**                                                                                                                // 1888
     * Non-standard Properties                                                                                         // 1889
     */                                                                                                                // 1890
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints                                             // 1891
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints                                                // 1892
    property: null, // Supports OG in meta tags                                                                        // 1893
                                                                                                                       // 1894
    /**                                                                                                                // 1895
     * SVG Properties                                                                                                  // 1896
     */                                                                                                                // 1897
    cx: MUST_USE_ATTRIBUTE,                                                                                            // 1898
    cy: MUST_USE_ATTRIBUTE,                                                                                            // 1899
    d: MUST_USE_ATTRIBUTE,                                                                                             // 1900
    fill: MUST_USE_ATTRIBUTE,                                                                                          // 1901
    fx: MUST_USE_ATTRIBUTE,                                                                                            // 1902
    fy: MUST_USE_ATTRIBUTE,                                                                                            // 1903
    gradientTransform: MUST_USE_ATTRIBUTE,                                                                             // 1904
    gradientUnits: MUST_USE_ATTRIBUTE,                                                                                 // 1905
    offset: MUST_USE_ATTRIBUTE,                                                                                        // 1906
    points: MUST_USE_ATTRIBUTE,                                                                                        // 1907
    r: MUST_USE_ATTRIBUTE,                                                                                             // 1908
    rx: MUST_USE_ATTRIBUTE,                                                                                            // 1909
    ry: MUST_USE_ATTRIBUTE,                                                                                            // 1910
    spreadMethod: MUST_USE_ATTRIBUTE,                                                                                  // 1911
    stopColor: MUST_USE_ATTRIBUTE,                                                                                     // 1912
    stopOpacity: MUST_USE_ATTRIBUTE,                                                                                   // 1913
    stroke: MUST_USE_ATTRIBUTE,                                                                                        // 1914
    strokeLinecap: MUST_USE_ATTRIBUTE,                                                                                 // 1915
    strokeWidth: MUST_USE_ATTRIBUTE,                                                                                   // 1916
    textAnchor: MUST_USE_ATTRIBUTE,                                                                                    // 1917
    transform: MUST_USE_ATTRIBUTE,                                                                                     // 1918
    version: MUST_USE_ATTRIBUTE,                                                                                       // 1919
    viewBox: MUST_USE_ATTRIBUTE,                                                                                       // 1920
    x1: MUST_USE_ATTRIBUTE,                                                                                            // 1921
    x2: MUST_USE_ATTRIBUTE,                                                                                            // 1922
    x: MUST_USE_ATTRIBUTE,                                                                                             // 1923
    y1: MUST_USE_ATTRIBUTE,                                                                                            // 1924
    y2: MUST_USE_ATTRIBUTE,                                                                                            // 1925
    y: MUST_USE_ATTRIBUTE                                                                                              // 1926
  },                                                                                                                   // 1927
  DOMAttributeNames: {                                                                                                 // 1928
    className: 'class',                                                                                                // 1929
    gradientTransform: 'gradientTransform',                                                                            // 1930
    gradientUnits: 'gradientUnits',                                                                                    // 1931
    htmlFor: 'for',                                                                                                    // 1932
    spreadMethod: 'spreadMethod',                                                                                      // 1933
    stopColor: 'stop-color',                                                                                           // 1934
    stopOpacity: 'stop-opacity',                                                                                       // 1935
    strokeLinecap: 'stroke-linecap',                                                                                   // 1936
    strokeWidth: 'stroke-width',                                                                                       // 1937
    textAnchor: 'text-anchor',                                                                                         // 1938
    viewBox: 'viewBox'                                                                                                 // 1939
  },                                                                                                                   // 1940
  DOMPropertyNames: {                                                                                                  // 1941
    autoCapitalize: 'autocapitalize',                                                                                  // 1942
    autoComplete: 'autocomplete',                                                                                      // 1943
    autoCorrect: 'autocorrect',                                                                                        // 1944
    autoFocus: 'autofocus',                                                                                            // 1945
    autoPlay: 'autoplay',                                                                                              // 1946
    encType: 'enctype',                                                                                                // 1947
    hrefLang: 'hreflang',                                                                                              // 1948
    radioGroup: 'radiogroup',                                                                                          // 1949
    spellCheck: 'spellcheck',                                                                                          // 1950
    srcDoc: 'srcdoc',                                                                                                  // 1951
    srcSet: 'srcset'                                                                                                   // 1952
  }                                                                                                                    // 1953
};                                                                                                                     // 1954
                                                                                                                       // 1955
module.exports = DefaultDOMPropertyConfig;                                                                             // 1956
                                                                                                                       // 1957
},{"./DOMProperty":8}],12:[function(_dereq_,module,exports){                                                           // 1958
/**                                                                                                                    // 1959
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 1960
 *                                                                                                                     // 1961
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1962
 * you may not use this file except in compliance with the License.                                                    // 1963
 * You may obtain a copy of the License at                                                                             // 1964
 *                                                                                                                     // 1965
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1966
 *                                                                                                                     // 1967
 * Unless required by applicable law or agreed to in writing, software                                                 // 1968
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1969
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1970
 * See the License for the specific language governing permissions and                                                 // 1971
 * limitations under the License.                                                                                      // 1972
 *                                                                                                                     // 1973
 * @providesModule DefaultEventPluginOrder                                                                             // 1974
 */                                                                                                                    // 1975
                                                                                                                       // 1976
"use strict";                                                                                                          // 1977
                                                                                                                       // 1978
 var keyOf = _dereq_("./keyOf");                                                                                       // 1979
                                                                                                                       // 1980
/**                                                                                                                    // 1981
 * Module that is injectable into `EventPluginHub`, that specifies a                                                   // 1982
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about                                          // 1983
 * plugins, without having to package every one of them. This is better than                                           // 1984
 * having plugins be ordered in the same order that they are injected because                                          // 1985
 * that ordering would be influenced by the packaging order.                                                           // 1986
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that                                                // 1987
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.                                         // 1988
 */                                                                                                                    // 1989
var DefaultEventPluginOrder = [                                                                                        // 1990
  keyOf({ResponderEventPlugin: null}),                                                                                 // 1991
  keyOf({SimpleEventPlugin: null}),                                                                                    // 1992
  keyOf({TapEventPlugin: null}),                                                                                       // 1993
  keyOf({EnterLeaveEventPlugin: null}),                                                                                // 1994
  keyOf({ChangeEventPlugin: null}),                                                                                    // 1995
  keyOf({SelectEventPlugin: null}),                                                                                    // 1996
  keyOf({CompositionEventPlugin: null}),                                                                               // 1997
  keyOf({AnalyticsEventPlugin: null}),                                                                                 // 1998
  keyOf({MobileSafariClickEventPlugin: null})                                                                          // 1999
];                                                                                                                     // 2000
                                                                                                                       // 2001
module.exports = DefaultEventPluginOrder;                                                                              // 2002
                                                                                                                       // 2003
},{"./keyOf":119}],13:[function(_dereq_,module,exports){                                                               // 2004
/**                                                                                                                    // 2005
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 2006
 *                                                                                                                     // 2007
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2008
 * you may not use this file except in compliance with the License.                                                    // 2009
 * You may obtain a copy of the License at                                                                             // 2010
 *                                                                                                                     // 2011
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2012
 *                                                                                                                     // 2013
 * Unless required by applicable law or agreed to in writing, software                                                 // 2014
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2015
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2016
 * See the License for the specific language governing permissions and                                                 // 2017
 * limitations under the License.                                                                                      // 2018
 *                                                                                                                     // 2019
 * @providesModule EnterLeaveEventPlugin                                                                               // 2020
 * @typechecks static-only                                                                                             // 2021
 */                                                                                                                    // 2022
                                                                                                                       // 2023
"use strict";                                                                                                          // 2024
                                                                                                                       // 2025
var EventConstants = _dereq_("./EventConstants");                                                                      // 2026
var EventPropagators = _dereq_("./EventPropagators");                                                                  // 2027
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");                                                            // 2028
                                                                                                                       // 2029
var ReactMount = _dereq_("./ReactMount");                                                                              // 2030
var keyOf = _dereq_("./keyOf");                                                                                        // 2031
                                                                                                                       // 2032
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 2033
var getFirstReactDOM = ReactMount.getFirstReactDOM;                                                                    // 2034
                                                                                                                       // 2035
var eventTypes = {                                                                                                     // 2036
  mouseEnter: {                                                                                                        // 2037
    registrationName: keyOf({onMouseEnter: null}),                                                                     // 2038
    dependencies: [                                                                                                    // 2039
      topLevelTypes.topMouseOut,                                                                                       // 2040
      topLevelTypes.topMouseOver                                                                                       // 2041
    ]                                                                                                                  // 2042
  },                                                                                                                   // 2043
  mouseLeave: {                                                                                                        // 2044
    registrationName: keyOf({onMouseLeave: null}),                                                                     // 2045
    dependencies: [                                                                                                    // 2046
      topLevelTypes.topMouseOut,                                                                                       // 2047
      topLevelTypes.topMouseOver                                                                                       // 2048
    ]                                                                                                                  // 2049
  }                                                                                                                    // 2050
};                                                                                                                     // 2051
                                                                                                                       // 2052
var extractedEvents = [null, null];                                                                                    // 2053
                                                                                                                       // 2054
var EnterLeaveEventPlugin = {                                                                                          // 2055
                                                                                                                       // 2056
  eventTypes: eventTypes,                                                                                              // 2057
                                                                                                                       // 2058
  /**                                                                                                                  // 2059
   * For almost every interaction we care about, there will be both a top-level                                        // 2060
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that                                         // 2061
   * we do not extract duplicate events. However, moving the mouse into the                                            // 2062
   * browser from outside will not fire a `mouseout` event. In this case, we use                                       // 2063
   * the `mouseover` top-level event.                                                                                  // 2064
   *                                                                                                                   // 2065
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 2066
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 2067
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 2068
   * @param {object} nativeEvent Native browser event.                                                                 // 2069
   * @return {*} An accumulation of synthetic events.                                                                  // 2070
   * @see {EventPluginHub.extractEvents}                                                                               // 2071
   */                                                                                                                  // 2072
  extractEvents: function(                                                                                             // 2073
      topLevelType,                                                                                                    // 2074
      topLevelTarget,                                                                                                  // 2075
      topLevelTargetID,                                                                                                // 2076
      nativeEvent) {                                                                                                   // 2077
    if (topLevelType === topLevelTypes.topMouseOver &&                                                                 // 2078
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {                                                      // 2079
      return null;                                                                                                     // 2080
    }                                                                                                                  // 2081
    if (topLevelType !== topLevelTypes.topMouseOut &&                                                                  // 2082
        topLevelType !== topLevelTypes.topMouseOver) {                                                                 // 2083
      // Must not be a mouse in or mouse out - ignoring.                                                               // 2084
      return null;                                                                                                     // 2085
    }                                                                                                                  // 2086
                                                                                                                       // 2087
    var win;                                                                                                           // 2088
    if (topLevelTarget.window === topLevelTarget) {                                                                    // 2089
      // `topLevelTarget` is probably a window object.                                                                 // 2090
      win = topLevelTarget;                                                                                            // 2091
    } else {                                                                                                           // 2092
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                           // 2093
      var doc = topLevelTarget.ownerDocument;                                                                          // 2094
      if (doc) {                                                                                                       // 2095
        win = doc.defaultView || doc.parentWindow;                                                                     // 2096
      } else {                                                                                                         // 2097
        win = window;                                                                                                  // 2098
      }                                                                                                                // 2099
    }                                                                                                                  // 2100
                                                                                                                       // 2101
    var from, to;                                                                                                      // 2102
    if (topLevelType === topLevelTypes.topMouseOut) {                                                                  // 2103
      from = topLevelTarget;                                                                                           // 2104
      to =                                                                                                             // 2105
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||                                        // 2106
        win;                                                                                                           // 2107
    } else {                                                                                                           // 2108
      from = win;                                                                                                      // 2109
      to = topLevelTarget;                                                                                             // 2110
    }                                                                                                                  // 2111
                                                                                                                       // 2112
    if (from === to) {                                                                                                 // 2113
      // Nothing pertains to our managed components.                                                                   // 2114
      return null;                                                                                                     // 2115
    }                                                                                                                  // 2116
                                                                                                                       // 2117
    var fromID = from ? ReactMount.getID(from) : '';                                                                   // 2118
    var toID = to ? ReactMount.getID(to) : '';                                                                         // 2119
                                                                                                                       // 2120
    var leave = SyntheticMouseEvent.getPooled(                                                                         // 2121
      eventTypes.mouseLeave,                                                                                           // 2122
      fromID,                                                                                                          // 2123
      nativeEvent                                                                                                      // 2124
    );                                                                                                                 // 2125
    leave.type = 'mouseleave';                                                                                         // 2126
    leave.target = from;                                                                                               // 2127
    leave.relatedTarget = to;                                                                                          // 2128
                                                                                                                       // 2129
    var enter = SyntheticMouseEvent.getPooled(                                                                         // 2130
      eventTypes.mouseEnter,                                                                                           // 2131
      toID,                                                                                                            // 2132
      nativeEvent                                                                                                      // 2133
    );                                                                                                                 // 2134
    enter.type = 'mouseenter';                                                                                         // 2135
    enter.target = to;                                                                                                 // 2136
    enter.relatedTarget = from;                                                                                        // 2137
                                                                                                                       // 2138
    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);                                       // 2139
                                                                                                                       // 2140
    extractedEvents[0] = leave;                                                                                        // 2141
    extractedEvents[1] = enter;                                                                                        // 2142
                                                                                                                       // 2143
    return extractedEvents;                                                                                            // 2144
  }                                                                                                                    // 2145
                                                                                                                       // 2146
};                                                                                                                     // 2147
                                                                                                                       // 2148
module.exports = EnterLeaveEventPlugin;                                                                                // 2149
                                                                                                                       // 2150
},{"./EventConstants":14,"./EventPropagators":19,"./ReactMount":55,"./SyntheticMouseEvent":81,"./keyOf":119}],14:[function(_dereq_,module,exports){
/**                                                                                                                    // 2152
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 2153
 *                                                                                                                     // 2154
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2155
 * you may not use this file except in compliance with the License.                                                    // 2156
 * You may obtain a copy of the License at                                                                             // 2157
 *                                                                                                                     // 2158
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2159
 *                                                                                                                     // 2160
 * Unless required by applicable law or agreed to in writing, software                                                 // 2161
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2162
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2163
 * See the License for the specific language governing permissions and                                                 // 2164
 * limitations under the License.                                                                                      // 2165
 *                                                                                                                     // 2166
 * @providesModule EventConstants                                                                                      // 2167
 */                                                                                                                    // 2168
                                                                                                                       // 2169
"use strict";                                                                                                          // 2170
                                                                                                                       // 2171
var keyMirror = _dereq_("./keyMirror");                                                                                // 2172
                                                                                                                       // 2173
var PropagationPhases = keyMirror({bubbled: null, captured: null});                                                    // 2174
                                                                                                                       // 2175
/**                                                                                                                    // 2176
 * Types of raw signals from the browser caught at the top level.                                                      // 2177
 */                                                                                                                    // 2178
var topLevelTypes = keyMirror({                                                                                        // 2179
  topBlur: null,                                                                                                       // 2180
  topChange: null,                                                                                                     // 2181
  topClick: null,                                                                                                      // 2182
  topCompositionEnd: null,                                                                                             // 2183
  topCompositionStart: null,                                                                                           // 2184
  topCompositionUpdate: null,                                                                                          // 2185
  topContextMenu: null,                                                                                                // 2186
  topCopy: null,                                                                                                       // 2187
  topCut: null,                                                                                                        // 2188
  topDoubleClick: null,                                                                                                // 2189
  topDrag: null,                                                                                                       // 2190
  topDragEnd: null,                                                                                                    // 2191
  topDragEnter: null,                                                                                                  // 2192
  topDragExit: null,                                                                                                   // 2193
  topDragLeave: null,                                                                                                  // 2194
  topDragOver: null,                                                                                                   // 2195
  topDragStart: null,                                                                                                  // 2196
  topDrop: null,                                                                                                       // 2197
  topError: null,                                                                                                      // 2198
  topFocus: null,                                                                                                      // 2199
  topInput: null,                                                                                                      // 2200
  topKeyDown: null,                                                                                                    // 2201
  topKeyPress: null,                                                                                                   // 2202
  topKeyUp: null,                                                                                                      // 2203
  topLoad: null,                                                                                                       // 2204
  topMouseDown: null,                                                                                                  // 2205
  topMouseMove: null,                                                                                                  // 2206
  topMouseOut: null,                                                                                                   // 2207
  topMouseOver: null,                                                                                                  // 2208
  topMouseUp: null,                                                                                                    // 2209
  topPaste: null,                                                                                                      // 2210
  topReset: null,                                                                                                      // 2211
  topScroll: null,                                                                                                     // 2212
  topSelectionChange: null,                                                                                            // 2213
  topSubmit: null,                                                                                                     // 2214
  topTouchCancel: null,                                                                                                // 2215
  topTouchEnd: null,                                                                                                   // 2216
  topTouchMove: null,                                                                                                  // 2217
  topTouchStart: null,                                                                                                 // 2218
  topWheel: null                                                                                                       // 2219
});                                                                                                                    // 2220
                                                                                                                       // 2221
var EventConstants = {                                                                                                 // 2222
  topLevelTypes: topLevelTypes,                                                                                        // 2223
  PropagationPhases: PropagationPhases                                                                                 // 2224
};                                                                                                                     // 2225
                                                                                                                       // 2226
module.exports = EventConstants;                                                                                       // 2227
                                                                                                                       // 2228
},{"./keyMirror":118}],15:[function(_dereq_,module,exports){                                                           // 2229
/**                                                                                                                    // 2230
 * @providesModule EventListener                                                                                       // 2231
 */                                                                                                                    // 2232
                                                                                                                       // 2233
var emptyFunction = _dereq_("./emptyFunction");                                                                        // 2234
                                                                                                                       // 2235
/**                                                                                                                    // 2236
 * Upstream version of event listener. Does not take into account specific                                             // 2237
 * nature of platform.                                                                                                 // 2238
 */                                                                                                                    // 2239
var EventListener = {                                                                                                  // 2240
  /**                                                                                                                  // 2241
   * Listen to DOM events during the bubble phase.                                                                     // 2242
   *                                                                                                                   // 2243
   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 2244
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 2245
   * @param {function} callback Callback function.                                                                     // 2246
   * @return {object} Object with a `remove` method.                                                                   // 2247
   */                                                                                                                  // 2248
  listen: function(target, eventType, callback) {                                                                      // 2249
    if (target.addEventListener) {                                                                                     // 2250
      target.addEventListener(eventType, callback, false);                                                             // 2251
      return {                                                                                                         // 2252
        remove: function() {                                                                                           // 2253
          target.removeEventListener(eventType, callback, false);                                                      // 2254
        }                                                                                                              // 2255
      };                                                                                                               // 2256
    } else if (target.attachEvent) {                                                                                   // 2257
      target.attachEvent('on' + eventType, callback);                                                                  // 2258
      return {                                                                                                         // 2259
        remove: function() {                                                                                           // 2260
          target.detachEvent(eventType, callback);                                                                     // 2261
        }                                                                                                              // 2262
      };                                                                                                               // 2263
    }                                                                                                                  // 2264
  },                                                                                                                   // 2265
                                                                                                                       // 2266
  /**                                                                                                                  // 2267
   * Listen to DOM events during the capture phase.                                                                    // 2268
   *                                                                                                                   // 2269
   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 2270
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 2271
   * @param {function} callback Callback function.                                                                     // 2272
   * @return {object} Object with a `remove` method.                                                                   // 2273
   */                                                                                                                  // 2274
  capture: function(target, eventType, callback) {                                                                     // 2275
    if (!target.addEventListener) {                                                                                    // 2276
      if ("production" !== "development") {                                                                            // 2277
        console.error(                                                                                                 // 2278
          'Attempted to listen to events during the capture phase on a ' +                                             // 2279
          'browser that does not support the capture phase. Your application ' +                                       // 2280
          'will not receive some events.'                                                                              // 2281
        );                                                                                                             // 2282
      }                                                                                                                // 2283
      return {                                                                                                         // 2284
        remove: emptyFunction                                                                                          // 2285
      };                                                                                                               // 2286
    } else {                                                                                                           // 2287
      target.addEventListener(eventType, callback, true);                                                              // 2288
      return {                                                                                                         // 2289
        remove: function() {                                                                                           // 2290
          target.removeEventListener(eventType, callback, true);                                                       // 2291
        }                                                                                                              // 2292
      };                                                                                                               // 2293
    }                                                                                                                  // 2294
  }                                                                                                                    // 2295
};                                                                                                                     // 2296
                                                                                                                       // 2297
module.exports = EventListener;                                                                                        // 2298
                                                                                                                       // 2299
},{"./emptyFunction":96}],16:[function(_dereq_,module,exports){                                                        // 2300
/**                                                                                                                    // 2301
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 2302
 *                                                                                                                     // 2303
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2304
 * you may not use this file except in compliance with the License.                                                    // 2305
 * You may obtain a copy of the License at                                                                             // 2306
 *                                                                                                                     // 2307
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2308
 *                                                                                                                     // 2309
 * Unless required by applicable law or agreed to in writing, software                                                 // 2310
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2311
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2312
 * See the License for the specific language governing permissions and                                                 // 2313
 * limitations under the License.                                                                                      // 2314
 *                                                                                                                     // 2315
 * @providesModule EventPluginHub                                                                                      // 2316
 */                                                                                                                    // 2317
                                                                                                                       // 2318
"use strict";                                                                                                          // 2319
                                                                                                                       // 2320
var EventPluginRegistry = _dereq_("./EventPluginRegistry");                                                            // 2321
var EventPluginUtils = _dereq_("./EventPluginUtils");                                                                  // 2322
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 2323
                                                                                                                       // 2324
var accumulate = _dereq_("./accumulate");                                                                              // 2325
var forEachAccumulated = _dereq_("./forEachAccumulated");                                                              // 2326
var invariant = _dereq_("./invariant");                                                                                // 2327
var isEventSupported = _dereq_("./isEventSupported");                                                                  // 2328
var monitorCodeUse = _dereq_("./monitorCodeUse");                                                                      // 2329
                                                                                                                       // 2330
/**                                                                                                                    // 2331
 * Internal store for event listeners                                                                                  // 2332
 */                                                                                                                    // 2333
var listenerBank = {};                                                                                                 // 2334
                                                                                                                       // 2335
/**                                                                                                                    // 2336
 * Internal queue of events that have accumulated their dispatches and are                                             // 2337
 * waiting to have their dispatches executed.                                                                          // 2338
 */                                                                                                                    // 2339
var eventQueue = null;                                                                                                 // 2340
                                                                                                                       // 2341
/**                                                                                                                    // 2342
 * Dispatches an event and releases it back into the pool, unless persistent.                                          // 2343
 *                                                                                                                     // 2344
 * @param {?object} event Synthetic event to be dispatched.                                                            // 2345
 * @private                                                                                                            // 2346
 */                                                                                                                    // 2347
var executeDispatchesAndRelease = function(event) {                                                                    // 2348
  if (event) {                                                                                                         // 2349
    var executeDispatch = EventPluginUtils.executeDispatch;                                                            // 2350
    // Plugins can provide custom behavior when dispatching events.                                                    // 2351
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);                                             // 2352
    if (PluginModule && PluginModule.executeDispatch) {                                                                // 2353
      executeDispatch = PluginModule.executeDispatch;                                                                  // 2354
    }                                                                                                                  // 2355
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);                                                 // 2356
                                                                                                                       // 2357
    if (!event.isPersistent()) {                                                                                       // 2358
      event.constructor.release(event);                                                                                // 2359
    }                                                                                                                  // 2360
  }                                                                                                                    // 2361
};                                                                                                                     // 2362
                                                                                                                       // 2363
/**                                                                                                                    // 2364
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM                                       // 2365
 *   hierarchy given ids of the logical DOM elements involved.                                                         // 2366
 */                                                                                                                    // 2367
var InstanceHandle = null;                                                                                             // 2368
                                                                                                                       // 2369
function validateInstanceHandle() {                                                                                    // 2370
  var invalid = !InstanceHandle||                                                                                      // 2371
    !InstanceHandle.traverseTwoPhase ||                                                                                // 2372
    !InstanceHandle.traverseEnterLeave;                                                                                // 2373
  if (invalid) {                                                                                                       // 2374
    throw new Error('InstanceHandle not injected before use!');                                                        // 2375
  }                                                                                                                    // 2376
}                                                                                                                      // 2377
                                                                                                                       // 2378
/**                                                                                                                    // 2379
 * This is a unified interface for event plugins to be installed and configured.                                       // 2380
 *                                                                                                                     // 2381
 * Event plugins can implement the following properties:                                                               // 2382
 *                                                                                                                     // 2383
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}                                             // 2384
 *     Required. When a top-level event is fired, this method is expected to                                           // 2385
 *     extract synthetic events that will in turn be queued and dispatched.                                            // 2386
 *                                                                                                                     // 2387
 *   `eventTypes` {object}                                                                                             // 2388
 *     Optional, plugins that fire events must publish a mapping of registration                                       // 2389
 *     names that are used to register listeners. Values of this mapping must                                          // 2390
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.                                        // 2391
 *                                                                                                                     // 2392
 *   `executeDispatch` {function(object, function, string)}                                                            // 2393
 *     Optional, allows plugins to override how an event gets dispatched. By                                           // 2394
 *     default, the listener is simply invoked.                                                                        // 2395
 *                                                                                                                     // 2396
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.                                        // 2397
 *                                                                                                                     // 2398
 * @public                                                                                                             // 2399
 */                                                                                                                    // 2400
var EventPluginHub = {                                                                                                 // 2401
                                                                                                                       // 2402
  /**                                                                                                                  // 2403
   * Methods for injecting dependencies.                                                                               // 2404
   */                                                                                                                  // 2405
  injection: {                                                                                                         // 2406
                                                                                                                       // 2407
    /**                                                                                                                // 2408
     * @param {object} InjectedMount                                                                                   // 2409
     * @public                                                                                                         // 2410
     */                                                                                                                // 2411
    injectMount: EventPluginUtils.injection.injectMount,                                                               // 2412
                                                                                                                       // 2413
    /**                                                                                                                // 2414
     * @param {object} InjectedInstanceHandle                                                                          // 2415
     * @public                                                                                                         // 2416
     */                                                                                                                // 2417
    injectInstanceHandle: function(InjectedInstanceHandle) {                                                           // 2418
      InstanceHandle = InjectedInstanceHandle;                                                                         // 2419
      if ("production" !== "development") {                                                                            // 2420
        validateInstanceHandle();                                                                                      // 2421
      }                                                                                                                // 2422
    },                                                                                                                 // 2423
                                                                                                                       // 2424
    getInstanceHandle: function() {                                                                                    // 2425
      if ("production" !== "development") {                                                                            // 2426
        validateInstanceHandle();                                                                                      // 2427
      }                                                                                                                // 2428
      return InstanceHandle;                                                                                           // 2429
    },                                                                                                                 // 2430
                                                                                                                       // 2431
    /**                                                                                                                // 2432
     * @param {array} InjectedEventPluginOrder                                                                         // 2433
     * @public                                                                                                         // 2434
     */                                                                                                                // 2435
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,                                                // 2436
                                                                                                                       // 2437
    /**                                                                                                                // 2438
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                        // 2439
     */                                                                                                                // 2440
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName                                             // 2441
                                                                                                                       // 2442
  },                                                                                                                   // 2443
                                                                                                                       // 2444
  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,                                              // 2445
                                                                                                                       // 2446
  registrationNameModules: EventPluginRegistry.registrationNameModules,                                                // 2447
                                                                                                                       // 2448
  /**                                                                                                                  // 2449
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.                                         // 2450
   *                                                                                                                   // 2451
   * @param {string} id ID of the DOM element.                                                                         // 2452
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 2453
   * @param {?function} listener The callback to store.                                                                // 2454
   */                                                                                                                  // 2455
  putListener: function(id, registrationName, listener) {                                                              // 2456
    ("production" !== "development" ? invariant(                                                                       // 2457
      ExecutionEnvironment.canUseDOM,                                                                                  // 2458
      'Cannot call putListener() in a non-DOM environment.'                                                            // 2459
    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 2460
    ("production" !== "development" ? invariant(                                                                       // 2461
      !listener || typeof listener === 'function',                                                                     // 2462
      'Expected %s listener to be a function, instead got type %s',                                                    // 2463
      registrationName, typeof listener                                                                                // 2464
    ) : invariant(!listener || typeof listener === 'function'));                                                       // 2465
                                                                                                                       // 2466
    if ("production" !== "development") {                                                                              // 2467
      // IE8 has no API for event capturing and the `onScroll` event doesn't                                           // 2468
      // bubble.                                                                                                       // 2469
      if (registrationName === 'onScroll' &&                                                                           // 2470
          !isEventSupported('scroll', true)) {                                                                         // 2471
        monitorCodeUse('react_no_scroll_event');                                                                       // 2472
        console.warn('This browser doesn\'t support the `onScroll` event');                                            // 2473
      }                                                                                                                // 2474
    }                                                                                                                  // 2475
    var bankForRegistrationName =                                                                                      // 2476
      listenerBank[registrationName] || (listenerBank[registrationName] = {});                                         // 2477
    bankForRegistrationName[id] = listener;                                                                            // 2478
  },                                                                                                                   // 2479
                                                                                                                       // 2480
  /**                                                                                                                  // 2481
   * @param {string} id ID of the DOM element.                                                                         // 2482
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 2483
   * @return {?function} The stored callback.                                                                          // 2484
   */                                                                                                                  // 2485
  getListener: function(id, registrationName) {                                                                        // 2486
    var bankForRegistrationName = listenerBank[registrationName];                                                      // 2487
    return bankForRegistrationName && bankForRegistrationName[id];                                                     // 2488
  },                                                                                                                   // 2489
                                                                                                                       // 2490
  /**                                                                                                                  // 2491
   * Deletes a listener from the registration bank.                                                                    // 2492
   *                                                                                                                   // 2493
   * @param {string} id ID of the DOM element.                                                                         // 2494
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 2495
   */                                                                                                                  // 2496
  deleteListener: function(id, registrationName) {                                                                     // 2497
    var bankForRegistrationName = listenerBank[registrationName];                                                      // 2498
    if (bankForRegistrationName) {                                                                                     // 2499
      delete bankForRegistrationName[id];                                                                              // 2500
    }                                                                                                                  // 2501
  },                                                                                                                   // 2502
                                                                                                                       // 2503
  /**                                                                                                                  // 2504
   * Deletes all listeners for the DOM element with the supplied ID.                                                   // 2505
   *                                                                                                                   // 2506
   * @param {string} id ID of the DOM element.                                                                         // 2507
   */                                                                                                                  // 2508
  deleteAllListeners: function(id) {                                                                                   // 2509
    for (var registrationName in listenerBank) {                                                                       // 2510
      delete listenerBank[registrationName][id];                                                                       // 2511
    }                                                                                                                  // 2512
  },                                                                                                                   // 2513
                                                                                                                       // 2514
  /**                                                                                                                  // 2515
   * Allows registered plugins an opportunity to extract events from top-level                                         // 2516
   * native browser events.                                                                                            // 2517
   *                                                                                                                   // 2518
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 2519
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 2520
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 2521
   * @param {object} nativeEvent Native browser event.                                                                 // 2522
   * @return {*} An accumulation of synthetic events.                                                                  // 2523
   * @internal                                                                                                         // 2524
   */                                                                                                                  // 2525
  extractEvents: function(                                                                                             // 2526
      topLevelType,                                                                                                    // 2527
      topLevelTarget,                                                                                                  // 2528
      topLevelTargetID,                                                                                                // 2529
      nativeEvent) {                                                                                                   // 2530
    var events;                                                                                                        // 2531
    var plugins = EventPluginRegistry.plugins;                                                                         // 2532
    for (var i = 0, l = plugins.length; i < l; i++) {                                                                  // 2533
      // Not every plugin in the ordering may be loaded at runtime.                                                    // 2534
      var possiblePlugin = plugins[i];                                                                                 // 2535
      if (possiblePlugin) {                                                                                            // 2536
        var extractedEvents = possiblePlugin.extractEvents(                                                            // 2537
          topLevelType,                                                                                                // 2538
          topLevelTarget,                                                                                              // 2539
          topLevelTargetID,                                                                                            // 2540
          nativeEvent                                                                                                  // 2541
        );                                                                                                             // 2542
        if (extractedEvents) {                                                                                         // 2543
          events = accumulate(events, extractedEvents);                                                                // 2544
        }                                                                                                              // 2545
      }                                                                                                                // 2546
    }                                                                                                                  // 2547
    return events;                                                                                                     // 2548
  },                                                                                                                   // 2549
                                                                                                                       // 2550
  /**                                                                                                                  // 2551
   * Enqueues a synthetic event that should be dispatched when                                                         // 2552
   * `processEventQueue` is invoked.                                                                                   // 2553
   *                                                                                                                   // 2554
   * @param {*} events An accumulation of synthetic events.                                                            // 2555
   * @internal                                                                                                         // 2556
   */                                                                                                                  // 2557
  enqueueEvents: function(events) {                                                                                    // 2558
    if (events) {                                                                                                      // 2559
      eventQueue = accumulate(eventQueue, events);                                                                     // 2560
    }                                                                                                                  // 2561
  },                                                                                                                   // 2562
                                                                                                                       // 2563
  /**                                                                                                                  // 2564
   * Dispatches all synthetic events on the event queue.                                                               // 2565
   *                                                                                                                   // 2566
   * @internal                                                                                                         // 2567
   */                                                                                                                  // 2568
  processEventQueue: function() {                                                                                      // 2569
    // Set `eventQueue` to null before processing it so that we can tell if more                                       // 2570
    // events get enqueued while processing.                                                                           // 2571
    var processingEventQueue = eventQueue;                                                                             // 2572
    eventQueue = null;                                                                                                 // 2573
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);                                             // 2574
    ("production" !== "development" ? invariant(                                                                       // 2575
      !eventQueue,                                                                                                     // 2576
      'processEventQueue(): Additional events were enqueued while processing ' +                                       // 2577
      'an event queue. Support for this has not yet been implemented.'                                                 // 2578
    ) : invariant(!eventQueue));                                                                                       // 2579
  },                                                                                                                   // 2580
                                                                                                                       // 2581
  /**                                                                                                                  // 2582
   * These are needed for tests only. Do not use!                                                                      // 2583
   */                                                                                                                  // 2584
  __purge: function() {                                                                                                // 2585
    listenerBank = {};                                                                                                 // 2586
  },                                                                                                                   // 2587
                                                                                                                       // 2588
  __getListenerBank: function() {                                                                                      // 2589
    return listenerBank;                                                                                               // 2590
  }                                                                                                                    // 2591
                                                                                                                       // 2592
};                                                                                                                     // 2593
                                                                                                                       // 2594
module.exports = EventPluginHub;                                                                                       // 2595
                                                                                                                       // 2596
},{"./EventPluginRegistry":17,"./EventPluginUtils":18,"./ExecutionEnvironment":20,"./accumulate":87,"./forEachAccumulated":101,"./invariant":112,"./isEventSupported":113,"./monitorCodeUse":125}],17:[function(_dereq_,module,exports){
/**                                                                                                                    // 2598
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 2599
 *                                                                                                                     // 2600
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2601
 * you may not use this file except in compliance with the License.                                                    // 2602
 * You may obtain a copy of the License at                                                                             // 2603
 *                                                                                                                     // 2604
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2605
 *                                                                                                                     // 2606
 * Unless required by applicable law or agreed to in writing, software                                                 // 2607
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2608
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2609
 * See the License for the specific language governing permissions and                                                 // 2610
 * limitations under the License.                                                                                      // 2611
 *                                                                                                                     // 2612
 * @providesModule EventPluginRegistry                                                                                 // 2613
 * @typechecks static-only                                                                                             // 2614
 */                                                                                                                    // 2615
                                                                                                                       // 2616
"use strict";                                                                                                          // 2617
                                                                                                                       // 2618
var invariant = _dereq_("./invariant");                                                                                // 2619
                                                                                                                       // 2620
/**                                                                                                                    // 2621
 * Injectable ordering of event plugins.                                                                               // 2622
 */                                                                                                                    // 2623
var EventPluginOrder = null;                                                                                           // 2624
                                                                                                                       // 2625
/**                                                                                                                    // 2626
 * Injectable mapping from names to event plugin modules.                                                              // 2627
 */                                                                                                                    // 2628
var namesToPlugins = {};                                                                                               // 2629
                                                                                                                       // 2630
/**                                                                                                                    // 2631
 * Recomputes the plugin list using the injected plugins and plugin ordering.                                          // 2632
 *                                                                                                                     // 2633
 * @private                                                                                                            // 2634
 */                                                                                                                    // 2635
function recomputePluginOrdering() {                                                                                   // 2636
  if (!EventPluginOrder) {                                                                                             // 2637
    // Wait until an `EventPluginOrder` is injected.                                                                   // 2638
    return;                                                                                                            // 2639
  }                                                                                                                    // 2640
  for (var pluginName in namesToPlugins) {                                                                             // 2641
    var PluginModule = namesToPlugins[pluginName];                                                                     // 2642
    var pluginIndex = EventPluginOrder.indexOf(pluginName);                                                            // 2643
    ("production" !== "development" ? invariant(                                                                       // 2644
      pluginIndex > -1,                                                                                                // 2645
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +                                       // 2646
      'the plugin ordering, `%s`.',                                                                                    // 2647
      pluginName                                                                                                       // 2648
    ) : invariant(pluginIndex > -1));                                                                                  // 2649
    if (EventPluginRegistry.plugins[pluginIndex]) {                                                                    // 2650
      continue;                                                                                                        // 2651
    }                                                                                                                  // 2652
    ("production" !== "development" ? invariant(                                                                       // 2653
      PluginModule.extractEvents,                                                                                      // 2654
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +                                        // 2655
      'method, but `%s` does not.',                                                                                    // 2656
      pluginName                                                                                                       // 2657
    ) : invariant(PluginModule.extractEvents));                                                                        // 2658
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;                                                           // 2659
    var publishedEvents = PluginModule.eventTypes;                                                                     // 2660
    for (var eventName in publishedEvents) {                                                                           // 2661
      ("production" !== "development" ? invariant(                                                                     // 2662
        publishEventForPlugin(                                                                                         // 2663
          publishedEvents[eventName],                                                                                  // 2664
          PluginModule,                                                                                                // 2665
          eventName                                                                                                    // 2666
        ),                                                                                                             // 2667
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',                                          // 2668
        eventName,                                                                                                     // 2669
        pluginName                                                                                                     // 2670
      ) : invariant(publishEventForPlugin(                                                                             // 2671
        publishedEvents[eventName],                                                                                    // 2672
        PluginModule,                                                                                                  // 2673
        eventName                                                                                                      // 2674
      )));                                                                                                             // 2675
    }                                                                                                                  // 2676
  }                                                                                                                    // 2677
}                                                                                                                      // 2678
                                                                                                                       // 2679
/**                                                                                                                    // 2680
 * Publishes an event so that it can be dispatched by the supplied plugin.                                             // 2681
 *                                                                                                                     // 2682
 * @param {object} dispatchConfig Dispatch configuration for the event.                                                // 2683
 * @param {object} PluginModule Plugin publishing the event.                                                           // 2684
 * @return {boolean} True if the event was successfully published.                                                     // 2685
 * @private                                                                                                            // 2686
 */                                                                                                                    // 2687
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {                                              // 2688
  ("production" !== "development" ? invariant(                                                                         // 2689
    !EventPluginRegistry.eventNameDispatchConfigs[eventName],                                                          // 2690
    'EventPluginHub: More than one plugin attempted to publish the same ' +                                            // 2691
    'event name, `%s`.',                                                                                               // 2692
    eventName                                                                                                          // 2693
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs[eventName]));                                            // 2694
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;                                            // 2695
                                                                                                                       // 2696
  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                                // 2697
  if (phasedRegistrationNames) {                                                                                       // 2698
    for (var phaseName in phasedRegistrationNames) {                                                                   // 2699
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {                                                         // 2700
        var phasedRegistrationName = phasedRegistrationNames[phaseName];                                               // 2701
        publishRegistrationName(                                                                                       // 2702
          phasedRegistrationName,                                                                                      // 2703
          PluginModule,                                                                                                // 2704
          eventName                                                                                                    // 2705
        );                                                                                                             // 2706
      }                                                                                                                // 2707
    }                                                                                                                  // 2708
    return true;                                                                                                       // 2709
  } else if (dispatchConfig.registrationName) {                                                                        // 2710
    publishRegistrationName(                                                                                           // 2711
      dispatchConfig.registrationName,                                                                                 // 2712
      PluginModule,                                                                                                    // 2713
      eventName                                                                                                        // 2714
    );                                                                                                                 // 2715
    return true;                                                                                                       // 2716
  }                                                                                                                    // 2717
  return false;                                                                                                        // 2718
}                                                                                                                      // 2719
                                                                                                                       // 2720
/**                                                                                                                    // 2721
 * Publishes a registration name that is used to identify dispatched events and                                        // 2722
 * can be used with `EventPluginHub.putListener` to register listeners.                                                // 2723
 *                                                                                                                     // 2724
 * @param {string} registrationName Registration name to add.                                                          // 2725
 * @param {object} PluginModule Plugin publishing the event.                                                           // 2726
 * @private                                                                                                            // 2727
 */                                                                                                                    // 2728
function publishRegistrationName(registrationName, PluginModule, eventName) {                                          // 2729
  ("production" !== "development" ? invariant(                                                                         // 2730
    !EventPluginRegistry.registrationNameModules[registrationName],                                                    // 2731
    'EventPluginHub: More than one plugin attempted to publish the same ' +                                            // 2732
    'registration name, `%s`.',                                                                                        // 2733
    registrationName                                                                                                   // 2734
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));                                      // 2735
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;                                        // 2736
  EventPluginRegistry.registrationNameDependencies[registrationName] =                                                 // 2737
    PluginModule.eventTypes[eventName].dependencies;                                                                   // 2738
}                                                                                                                      // 2739
                                                                                                                       // 2740
/**                                                                                                                    // 2741
 * Registers plugins so that they can extract and dispatch events.                                                     // 2742
 *                                                                                                                     // 2743
 * @see {EventPluginHub}                                                                                               // 2744
 */                                                                                                                    // 2745
var EventPluginRegistry = {                                                                                            // 2746
                                                                                                                       // 2747
  /**                                                                                                                  // 2748
   * Ordered list of injected plugins.                                                                                 // 2749
   */                                                                                                                  // 2750
  plugins: [],                                                                                                         // 2751
                                                                                                                       // 2752
  /**                                                                                                                  // 2753
   * Mapping from event name to dispatch config                                                                        // 2754
   */                                                                                                                  // 2755
  eventNameDispatchConfigs: {},                                                                                        // 2756
                                                                                                                       // 2757
  /**                                                                                                                  // 2758
   * Mapping from registration name to plugin module                                                                   // 2759
   */                                                                                                                  // 2760
  registrationNameModules: {},                                                                                         // 2761
                                                                                                                       // 2762
  /**                                                                                                                  // 2763
   * Mapping from registration name to event name                                                                      // 2764
   */                                                                                                                  // 2765
  registrationNameDependencies: {},                                                                                    // 2766
                                                                                                                       // 2767
  /**                                                                                                                  // 2768
   * Injects an ordering of plugins (by plugin name). This allows the ordering                                         // 2769
   * to be decoupled from injection of the actual plugins so that ordering is                                          // 2770
   * always deterministic regardless of packaging, on-the-fly injection, etc.                                          // 2771
   *                                                                                                                   // 2772
   * @param {array} InjectedEventPluginOrder                                                                           // 2773
   * @internal                                                                                                         // 2774
   * @see {EventPluginHub.injection.injectEventPluginOrder}                                                            // 2775
   */                                                                                                                  // 2776
  injectEventPluginOrder: function(InjectedEventPluginOrder) {                                                         // 2777
    ("production" !== "development" ? invariant(                                                                       // 2778
      !EventPluginOrder,                                                                                               // 2779
      'EventPluginRegistry: Cannot inject event plugin ordering more than once.'                                       // 2780
    ) : invariant(!EventPluginOrder));                                                                                 // 2781
    // Clone the ordering so it cannot be dynamically mutated.                                                         // 2782
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);                                           // 2783
    recomputePluginOrdering();                                                                                         // 2784
  },                                                                                                                   // 2785
                                                                                                                       // 2786
  /**                                                                                                                  // 2787
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be                                          // 2788
   * in the ordering injected by `injectEventPluginOrder`.                                                             // 2789
   *                                                                                                                   // 2790
   * Plugins can be injected as part of page initialization or on-the-fly.                                             // 2791
   *                                                                                                                   // 2792
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                          // 2793
   * @internal                                                                                                         // 2794
   * @see {EventPluginHub.injection.injectEventPluginsByName}                                                          // 2795
   */                                                                                                                  // 2796
  injectEventPluginsByName: function(injectedNamesToPlugins) {                                                         // 2797
    var isOrderingDirty = false;                                                                                       // 2798
    for (var pluginName in injectedNamesToPlugins) {                                                                   // 2799
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {                                                        // 2800
        continue;                                                                                                      // 2801
      }                                                                                                                // 2802
      var PluginModule = injectedNamesToPlugins[pluginName];                                                           // 2803
      if (namesToPlugins[pluginName] !== PluginModule) {                                                               // 2804
        ("production" !== "development" ? invariant(                                                                   // 2805
          !namesToPlugins[pluginName],                                                                                 // 2806
          'EventPluginRegistry: Cannot inject two different event plugins ' +                                          // 2807
          'using the same name, `%s`.',                                                                                // 2808
          pluginName                                                                                                   // 2809
        ) : invariant(!namesToPlugins[pluginName]));                                                                   // 2810
        namesToPlugins[pluginName] = PluginModule;                                                                     // 2811
        isOrderingDirty = true;                                                                                        // 2812
      }                                                                                                                // 2813
    }                                                                                                                  // 2814
    if (isOrderingDirty) {                                                                                             // 2815
      recomputePluginOrdering();                                                                                       // 2816
    }                                                                                                                  // 2817
  },                                                                                                                   // 2818
                                                                                                                       // 2819
  /**                                                                                                                  // 2820
   * Looks up the plugin for the supplied event.                                                                       // 2821
   *                                                                                                                   // 2822
   * @param {object} event A synthetic event.                                                                          // 2823
   * @return {?object} The plugin that created the supplied event.                                                     // 2824
   * @internal                                                                                                         // 2825
   */                                                                                                                  // 2826
  getPluginModuleForEvent: function(event) {                                                                           // 2827
    var dispatchConfig = event.dispatchConfig;                                                                         // 2828
    if (dispatchConfig.registrationName) {                                                                             // 2829
      return EventPluginRegistry.registrationNameModules[                                                              // 2830
        dispatchConfig.registrationName                                                                                // 2831
      ] || null;                                                                                                       // 2832
    }                                                                                                                  // 2833
    for (var phase in dispatchConfig.phasedRegistrationNames) {                                                        // 2834
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {                                             // 2835
        continue;                                                                                                      // 2836
      }                                                                                                                // 2837
      var PluginModule = EventPluginRegistry.registrationNameModules[                                                  // 2838
        dispatchConfig.phasedRegistrationNames[phase]                                                                  // 2839
      ];                                                                                                               // 2840
      if (PluginModule) {                                                                                              // 2841
        return PluginModule;                                                                                           // 2842
      }                                                                                                                // 2843
    }                                                                                                                  // 2844
    return null;                                                                                                       // 2845
  },                                                                                                                   // 2846
                                                                                                                       // 2847
  /**                                                                                                                  // 2848
   * Exposed for unit testing.                                                                                         // 2849
   * @private                                                                                                          // 2850
   */                                                                                                                  // 2851
  _resetEventPlugins: function() {                                                                                     // 2852
    EventPluginOrder = null;                                                                                           // 2853
    for (var pluginName in namesToPlugins) {                                                                           // 2854
      if (namesToPlugins.hasOwnProperty(pluginName)) {                                                                 // 2855
        delete namesToPlugins[pluginName];                                                                             // 2856
      }                                                                                                                // 2857
    }                                                                                                                  // 2858
    EventPluginRegistry.plugins.length = 0;                                                                            // 2859
                                                                                                                       // 2860
    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;                                       // 2861
    for (var eventName in eventNameDispatchConfigs) {                                                                  // 2862
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {                                                        // 2863
        delete eventNameDispatchConfigs[eventName];                                                                    // 2864
      }                                                                                                                // 2865
    }                                                                                                                  // 2866
                                                                                                                       // 2867
    var registrationNameModules = EventPluginRegistry.registrationNameModules;                                         // 2868
    for (var registrationName in registrationNameModules) {                                                            // 2869
      if (registrationNameModules.hasOwnProperty(registrationName)) {                                                  // 2870
        delete registrationNameModules[registrationName];                                                              // 2871
      }                                                                                                                // 2872
    }                                                                                                                  // 2873
  }                                                                                                                    // 2874
                                                                                                                       // 2875
};                                                                                                                     // 2876
                                                                                                                       // 2877
module.exports = EventPluginRegistry;                                                                                  // 2878
                                                                                                                       // 2879
},{"./invariant":112}],18:[function(_dereq_,module,exports){                                                           // 2880
/**                                                                                                                    // 2881
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 2882
 *                                                                                                                     // 2883
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2884
 * you may not use this file except in compliance with the License.                                                    // 2885
 * You may obtain a copy of the License at                                                                             // 2886
 *                                                                                                                     // 2887
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2888
 *                                                                                                                     // 2889
 * Unless required by applicable law or agreed to in writing, software                                                 // 2890
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2891
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2892
 * See the License for the specific language governing permissions and                                                 // 2893
 * limitations under the License.                                                                                      // 2894
 *                                                                                                                     // 2895
 * @providesModule EventPluginUtils                                                                                    // 2896
 */                                                                                                                    // 2897
                                                                                                                       // 2898
"use strict";                                                                                                          // 2899
                                                                                                                       // 2900
var EventConstants = _dereq_("./EventConstants");                                                                      // 2901
                                                                                                                       // 2902
var invariant = _dereq_("./invariant");                                                                                // 2903
                                                                                                                       // 2904
/**                                                                                                                    // 2905
 * Injected dependencies:                                                                                              // 2906
 */                                                                                                                    // 2907
                                                                                                                       // 2908
/**                                                                                                                    // 2909
 * - `Mount`: [required] Module that can convert between React dom IDs and                                             // 2910
 *   actual node references.                                                                                           // 2911
 */                                                                                                                    // 2912
var injection = {                                                                                                      // 2913
  Mount: null,                                                                                                         // 2914
  injectMount: function(InjectedMount) {                                                                               // 2915
    injection.Mount = InjectedMount;                                                                                   // 2916
    if ("production" !== "development") {                                                                              // 2917
      ("production" !== "development" ? invariant(                                                                     // 2918
        InjectedMount && InjectedMount.getNode,                                                                        // 2919
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +                                        // 2920
        'is missing getNode.'                                                                                          // 2921
      ) : invariant(InjectedMount && InjectedMount.getNode));                                                          // 2922
    }                                                                                                                  // 2923
  }                                                                                                                    // 2924
};                                                                                                                     // 2925
                                                                                                                       // 2926
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 2927
                                                                                                                       // 2928
function isEndish(topLevelType) {                                                                                      // 2929
  return topLevelType === topLevelTypes.topMouseUp ||                                                                  // 2930
         topLevelType === topLevelTypes.topTouchEnd ||                                                                 // 2931
         topLevelType === topLevelTypes.topTouchCancel;                                                                // 2932
}                                                                                                                      // 2933
                                                                                                                       // 2934
function isMoveish(topLevelType) {                                                                                     // 2935
  return topLevelType === topLevelTypes.topMouseMove ||                                                                // 2936
         topLevelType === topLevelTypes.topTouchMove;                                                                  // 2937
}                                                                                                                      // 2938
function isStartish(topLevelType) {                                                                                    // 2939
  return topLevelType === topLevelTypes.topMouseDown ||                                                                // 2940
         topLevelType === topLevelTypes.topTouchStart;                                                                 // 2941
}                                                                                                                      // 2942
                                                                                                                       // 2943
                                                                                                                       // 2944
var validateEventDispatches;                                                                                           // 2945
if ("production" !== "development") {                                                                                  // 2946
  validateEventDispatches = function(event) {                                                                          // 2947
    var dispatchListeners = event._dispatchListeners;                                                                  // 2948
    var dispatchIDs = event._dispatchIDs;                                                                              // 2949
                                                                                                                       // 2950
    var listenersIsArr = Array.isArray(dispatchListeners);                                                             // 2951
    var idsIsArr = Array.isArray(dispatchIDs);                                                                         // 2952
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;                                                  // 2953
    var listenersLen = listenersIsArr ?                                                                                // 2954
      dispatchListeners.length :                                                                                       // 2955
      dispatchListeners ? 1 : 0;                                                                                       // 2956
                                                                                                                       // 2957
    ("production" !== "development" ? invariant(                                                                       // 2958
      idsIsArr === listenersIsArr && IDsLen === listenersLen,                                                          // 2959
      'EventPluginUtils: Invalid `event`.'                                                                             // 2960
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));                                            // 2961
  };                                                                                                                   // 2962
}                                                                                                                      // 2963
                                                                                                                       // 2964
/**                                                                                                                    // 2965
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is                                                 // 2966
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are                                         // 2967
 * kept separate to conserve memory.                                                                                   // 2968
 */                                                                                                                    // 2969
function forEachEventDispatch(event, cb) {                                                                             // 2970
  var dispatchListeners = event._dispatchListeners;                                                                    // 2971
  var dispatchIDs = event._dispatchIDs;                                                                                // 2972
  if ("production" !== "development") {                                                                                // 2973
    validateEventDispatches(event);                                                                                    // 2974
  }                                                                                                                    // 2975
  if (Array.isArray(dispatchListeners)) {                                                                              // 2976
    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 2977
      if (event.isPropagationStopped()) {                                                                              // 2978
        break;                                                                                                         // 2979
      }                                                                                                                // 2980
      // Listeners and IDs are two parallel arrays that are always in sync.                                            // 2981
      cb(event, dispatchListeners[i], dispatchIDs[i]);                                                                 // 2982
    }                                                                                                                  // 2983
  } else if (dispatchListeners) {                                                                                      // 2984
    cb(event, dispatchListeners, dispatchIDs);                                                                         // 2985
  }                                                                                                                    // 2986
}                                                                                                                      // 2987
                                                                                                                       // 2988
/**                                                                                                                    // 2989
 * Default implementation of PluginModule.executeDispatch().                                                           // 2990
 * @param {SyntheticEvent} SyntheticEvent to handle                                                                    // 2991
 * @param {function} Application-level callback                                                                        // 2992
 * @param {string} domID DOM id to pass to the callback.                                                               // 2993
 */                                                                                                                    // 2994
function executeDispatch(event, listener, domID) {                                                                     // 2995
  event.currentTarget = injection.Mount.getNode(domID);                                                                // 2996
  var returnValue = listener(event, domID);                                                                            // 2997
  event.currentTarget = null;                                                                                          // 2998
  return returnValue;                                                                                                  // 2999
}                                                                                                                      // 3000
                                                                                                                       // 3001
/**                                                                                                                    // 3002
 * Standard/simple iteration through an event's collected dispatches.                                                  // 3003
 */                                                                                                                    // 3004
function executeDispatchesInOrder(event, executeDispatch) {                                                            // 3005
  forEachEventDispatch(event, executeDispatch);                                                                        // 3006
  event._dispatchListeners = null;                                                                                     // 3007
  event._dispatchIDs = null;                                                                                           // 3008
}                                                                                                                      // 3009
                                                                                                                       // 3010
/**                                                                                                                    // 3011
 * Standard/simple iteration through an event's collected dispatches, but stops                                        // 3012
 * at the first dispatch execution returning true, and returns that id.                                                // 3013
 *                                                                                                                     // 3014
 * @return id of the first dispatch execution who's listener returns true, or                                          // 3015
 * null if no listener returned true.                                                                                  // 3016
 */                                                                                                                    // 3017
function executeDispatchesInOrderStopAtTrue(event) {                                                                   // 3018
  var dispatchListeners = event._dispatchListeners;                                                                    // 3019
  var dispatchIDs = event._dispatchIDs;                                                                                // 3020
  if ("production" !== "development") {                                                                                // 3021
    validateEventDispatches(event);                                                                                    // 3022
  }                                                                                                                    // 3023
  if (Array.isArray(dispatchListeners)) {                                                                              // 3024
    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 3025
      if (event.isPropagationStopped()) {                                                                              // 3026
        break;                                                                                                         // 3027
      }                                                                                                                // 3028
      // Listeners and IDs are two parallel arrays that are always in sync.                                            // 3029
      if (dispatchListeners[i](event, dispatchIDs[i])) {                                                               // 3030
        return dispatchIDs[i];                                                                                         // 3031
      }                                                                                                                // 3032
    }                                                                                                                  // 3033
  } else if (dispatchListeners) {                                                                                      // 3034
    if (dispatchListeners(event, dispatchIDs)) {                                                                       // 3035
      return dispatchIDs;                                                                                              // 3036
    }                                                                                                                  // 3037
  }                                                                                                                    // 3038
  return null;                                                                                                         // 3039
}                                                                                                                      // 3040
                                                                                                                       // 3041
/**                                                                                                                    // 3042
 * Execution of a "direct" dispatch - there must be at most one dispatch                                               // 3043
 * accumulated on the event or it is considered an error. It doesn't really make                                       // 3044
 * sense for an event with multiple dispatches (bubbled) to keep track of the                                          // 3045
 * return values at each dispatch execution, but it does tend to make sense when                                       // 3046
 * dealing with "direct" dispatches.                                                                                   // 3047
 *                                                                                                                     // 3048
 * @return The return value of executing the single dispatch.                                                          // 3049
 */                                                                                                                    // 3050
function executeDirectDispatch(event) {                                                                                // 3051
  if ("production" !== "development") {                                                                                // 3052
    validateEventDispatches(event);                                                                                    // 3053
  }                                                                                                                    // 3054
  var dispatchListener = event._dispatchListeners;                                                                     // 3055
  var dispatchID = event._dispatchIDs;                                                                                 // 3056
  ("production" !== "development" ? invariant(                                                                         // 3057
    !Array.isArray(dispatchListener),                                                                                  // 3058
    'executeDirectDispatch(...): Invalid `event`.'                                                                     // 3059
  ) : invariant(!Array.isArray(dispatchListener)));                                                                    // 3060
  var res = dispatchListener ?                                                                                         // 3061
    dispatchListener(event, dispatchID) :                                                                              // 3062
    null;                                                                                                              // 3063
  event._dispatchListeners = null;                                                                                     // 3064
  event._dispatchIDs = null;                                                                                           // 3065
  return res;                                                                                                          // 3066
}                                                                                                                      // 3067
                                                                                                                       // 3068
/**                                                                                                                    // 3069
 * @param {SyntheticEvent} event                                                                                       // 3070
 * @return {bool} True iff number of dispatches accumulated is greater than 0.                                         // 3071
 */                                                                                                                    // 3072
function hasDispatches(event) {                                                                                        // 3073
  return !!event._dispatchListeners;                                                                                   // 3074
}                                                                                                                      // 3075
                                                                                                                       // 3076
/**                                                                                                                    // 3077
 * General utilities that are useful in creating custom Event Plugins.                                                 // 3078
 */                                                                                                                    // 3079
var EventPluginUtils = {                                                                                               // 3080
  isEndish: isEndish,                                                                                                  // 3081
  isMoveish: isMoveish,                                                                                                // 3082
  isStartish: isStartish,                                                                                              // 3083
                                                                                                                       // 3084
  executeDirectDispatch: executeDirectDispatch,                                                                        // 3085
  executeDispatch: executeDispatch,                                                                                    // 3086
  executeDispatchesInOrder: executeDispatchesInOrder,                                                                  // 3087
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,                                              // 3088
  hasDispatches: hasDispatches,                                                                                        // 3089
  injection: injection,                                                                                                // 3090
  useTouchEvents: false                                                                                                // 3091
};                                                                                                                     // 3092
                                                                                                                       // 3093
module.exports = EventPluginUtils;                                                                                     // 3094
                                                                                                                       // 3095
},{"./EventConstants":14,"./invariant":112}],19:[function(_dereq_,module,exports){                                     // 3096
/**                                                                                                                    // 3097
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 3098
 *                                                                                                                     // 3099
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3100
 * you may not use this file except in compliance with the License.                                                    // 3101
 * You may obtain a copy of the License at                                                                             // 3102
 *                                                                                                                     // 3103
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3104
 *                                                                                                                     // 3105
 * Unless required by applicable law or agreed to in writing, software                                                 // 3106
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3107
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3108
 * See the License for the specific language governing permissions and                                                 // 3109
 * limitations under the License.                                                                                      // 3110
 *                                                                                                                     // 3111
 * @providesModule EventPropagators                                                                                    // 3112
 */                                                                                                                    // 3113
                                                                                                                       // 3114
"use strict";                                                                                                          // 3115
                                                                                                                       // 3116
var EventConstants = _dereq_("./EventConstants");                                                                      // 3117
var EventPluginHub = _dereq_("./EventPluginHub");                                                                      // 3118
                                                                                                                       // 3119
var accumulate = _dereq_("./accumulate");                                                                              // 3120
var forEachAccumulated = _dereq_("./forEachAccumulated");                                                              // 3121
                                                                                                                       // 3122
var PropagationPhases = EventConstants.PropagationPhases;                                                              // 3123
var getListener = EventPluginHub.getListener;                                                                          // 3124
                                                                                                                       // 3125
/**                                                                                                                    // 3126
 * Some event types have a notion of different registration names for different                                        // 3127
 * "phases" of propagation. This finds listeners by a given phase.                                                     // 3128
 */                                                                                                                    // 3129
function listenerAtPhase(id, event, propagationPhase) {                                                                // 3130
  var registrationName =                                                                                               // 3131
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];                                                    // 3132
  return getListener(id, registrationName);                                                                            // 3133
}                                                                                                                      // 3134
                                                                                                                       // 3135
/**                                                                                                                    // 3136
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function                                           // 3137
 * here, allows us to not have to bind or create functions for each event.                                             // 3138
 * Mutating the event's members allows us to not have to create a wrapping                                             // 3139
 * "dispatch" object that pairs the event with the listener.                                                           // 3140
 */                                                                                                                    // 3141
function accumulateDirectionalDispatches(domID, upwards, event) {                                                      // 3142
  if ("production" !== "development") {                                                                                // 3143
    if (!domID) {                                                                                                      // 3144
      throw new Error('Dispatching id must not be null');                                                              // 3145
    }                                                                                                                  // 3146
  }                                                                                                                    // 3147
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;                                        // 3148
  var listener = listenerAtPhase(domID, event, phase);                                                                 // 3149
  if (listener) {                                                                                                      // 3150
    event._dispatchListeners = accumulate(event._dispatchListeners, listener);                                         // 3151
    event._dispatchIDs = accumulate(event._dispatchIDs, domID);                                                        // 3152
  }                                                                                                                    // 3153
}                                                                                                                      // 3154
                                                                                                                       // 3155
/**                                                                                                                    // 3156
 * Collect dispatches (must be entirely collected before dispatching - see unit                                        // 3157
 * tests). Lazily allocate the array to conserve memory.  We must loop through                                         // 3158
 * each event and perform the traversal for each one. We can not perform a                                             // 3159
 * single traversal for the entire collection of events because each event may                                         // 3160
 * have a different target.                                                                                            // 3161
 */                                                                                                                    // 3162
function accumulateTwoPhaseDispatchesSingle(event) {                                                                   // 3163
  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 3164
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(                                                     // 3165
      event.dispatchMarker,                                                                                            // 3166
      accumulateDirectionalDispatches,                                                                                 // 3167
      event                                                                                                            // 3168
    );                                                                                                                 // 3169
  }                                                                                                                    // 3170
}                                                                                                                      // 3171
                                                                                                                       // 3172
                                                                                                                       // 3173
/**                                                                                                                    // 3174
 * Accumulates without regard to direction, does not look for phased                                                   // 3175
 * registration names. Same as `accumulateDirectDispatchesSingle` but without                                          // 3176
 * requiring that the `dispatchMarker` be the same as the dispatched ID.                                               // 3177
 */                                                                                                                    // 3178
function accumulateDispatches(id, ignoredDirection, event) {                                                           // 3179
  if (event && event.dispatchConfig.registrationName) {                                                                // 3180
    var registrationName = event.dispatchConfig.registrationName;                                                      // 3181
    var listener = getListener(id, registrationName);                                                                  // 3182
    if (listener) {                                                                                                    // 3183
      event._dispatchListeners = accumulate(event._dispatchListeners, listener);                                       // 3184
      event._dispatchIDs = accumulate(event._dispatchIDs, id);                                                         // 3185
    }                                                                                                                  // 3186
  }                                                                                                                    // 3187
}                                                                                                                      // 3188
                                                                                                                       // 3189
/**                                                                                                                    // 3190
 * Accumulates dispatches on an `SyntheticEvent`, but only for the                                                     // 3191
 * `dispatchMarker`.                                                                                                   // 3192
 * @param {SyntheticEvent} event                                                                                       // 3193
 */                                                                                                                    // 3194
function accumulateDirectDispatchesSingle(event) {                                                                     // 3195
  if (event && event.dispatchConfig.registrationName) {                                                                // 3196
    accumulateDispatches(event.dispatchMarker, null, event);                                                           // 3197
  }                                                                                                                    // 3198
}                                                                                                                      // 3199
                                                                                                                       // 3200
function accumulateTwoPhaseDispatches(events) {                                                                        // 3201
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);                                                      // 3202
}                                                                                                                      // 3203
                                                                                                                       // 3204
function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {                                                  // 3205
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(                                                     // 3206
    fromID,                                                                                                            // 3207
    toID,                                                                                                              // 3208
    accumulateDispatches,                                                                                              // 3209
    leave,                                                                                                             // 3210
    enter                                                                                                              // 3211
  );                                                                                                                   // 3212
}                                                                                                                      // 3213
                                                                                                                       // 3214
                                                                                                                       // 3215
function accumulateDirectDispatches(events) {                                                                          // 3216
  forEachAccumulated(events, accumulateDirectDispatchesSingle);                                                        // 3217
}                                                                                                                      // 3218
                                                                                                                       // 3219
                                                                                                                       // 3220
                                                                                                                       // 3221
/**                                                                                                                    // 3222
 * A small set of propagation patterns, each of which will accept a small amount                                       // 3223
 * of information, and generate a set of "dispatch ready event objects" - which                                        // 3224
 * are sets of events that have already been annotated with a set of dispatched                                        // 3225
 * listener functions/ids. The API is designed this way to discourage these                                            // 3226
 * propagation strategies from actually executing the dispatches, since we                                             // 3227
 * always want to collect the entire set of dispatches before executing event a                                        // 3228
 * single one.                                                                                                         // 3229
 *                                                                                                                     // 3230
 * @constructor EventPropagators                                                                                       // 3231
 */                                                                                                                    // 3232
var EventPropagators = {                                                                                               // 3233
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,                                                          // 3234
  accumulateDirectDispatches: accumulateDirectDispatches,                                                              // 3235
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches                                                       // 3236
};                                                                                                                     // 3237
                                                                                                                       // 3238
module.exports = EventPropagators;                                                                                     // 3239
                                                                                                                       // 3240
},{"./EventConstants":14,"./EventPluginHub":16,"./accumulate":87,"./forEachAccumulated":101}],20:[function(_dereq_,module,exports){
/**                                                                                                                    // 3242
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 3243
 *                                                                                                                     // 3244
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3245
 * you may not use this file except in compliance with the License.                                                    // 3246
 * You may obtain a copy of the License at                                                                             // 3247
 *                                                                                                                     // 3248
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3249
 *                                                                                                                     // 3250
 * Unless required by applicable law or agreed to in writing, software                                                 // 3251
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3252
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3253
 * See the License for the specific language governing permissions and                                                 // 3254
 * limitations under the License.                                                                                      // 3255
 *                                                                                                                     // 3256
 * @providesModule ExecutionEnvironment                                                                                // 3257
 */                                                                                                                    // 3258
                                                                                                                       // 3259
/*jslint evil: true */                                                                                                 // 3260
                                                                                                                       // 3261
"use strict";                                                                                                          // 3262
                                                                                                                       // 3263
var canUseDOM = typeof window !== 'undefined';                                                                         // 3264
                                                                                                                       // 3265
/**                                                                                                                    // 3266
 * Simple, lightweight module assisting with the detection and context of                                              // 3267
 * Worker. Helps avoid circular dependencies and allows code to reason about                                           // 3268
 * whether or not they are in a Worker, even if they never include the main                                            // 3269
 * `ReactWorker` dependency.                                                                                           // 3270
 */                                                                                                                    // 3271
var ExecutionEnvironment = {                                                                                           // 3272
                                                                                                                       // 3273
  canUseDOM: canUseDOM,                                                                                                // 3274
                                                                                                                       // 3275
  canUseWorkers: typeof Worker !== 'undefined',                                                                        // 3276
                                                                                                                       // 3277
  canUseEventListeners:                                                                                                // 3278
    canUseDOM && (window.addEventListener || window.attachEvent),                                                      // 3279
                                                                                                                       // 3280
  isInWorker: !canUseDOM // For now, this is true - might change in the future.                                        // 3281
                                                                                                                       // 3282
};                                                                                                                     // 3283
                                                                                                                       // 3284
module.exports = ExecutionEnvironment;                                                                                 // 3285
                                                                                                                       // 3286
},{}],21:[function(_dereq_,module,exports){                                                                            // 3287
/**                                                                                                                    // 3288
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 3289
 *                                                                                                                     // 3290
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3291
 * you may not use this file except in compliance with the License.                                                    // 3292
 * You may obtain a copy of the License at                                                                             // 3293
 *                                                                                                                     // 3294
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3295
 *                                                                                                                     // 3296
 * Unless required by applicable law or agreed to in writing, software                                                 // 3297
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3298
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3299
 * See the License for the specific language governing permissions and                                                 // 3300
 * limitations under the License.                                                                                      // 3301
 *                                                                                                                     // 3302
 * @providesModule LinkedValueUtils                                                                                    // 3303
 * @typechecks static-only                                                                                             // 3304
 */                                                                                                                    // 3305
                                                                                                                       // 3306
"use strict";                                                                                                          // 3307
                                                                                                                       // 3308
var ReactPropTypes = _dereq_("./ReactPropTypes");                                                                      // 3309
                                                                                                                       // 3310
var invariant = _dereq_("./invariant");                                                                                // 3311
var warning = _dereq_("./warning");                                                                                    // 3312
                                                                                                                       // 3313
var hasReadOnlyValue = {                                                                                               // 3314
  'button': true,                                                                                                      // 3315
  'checkbox': true,                                                                                                    // 3316
  'image': true,                                                                                                       // 3317
  'hidden': true,                                                                                                      // 3318
  'radio': true,                                                                                                       // 3319
  'reset': true,                                                                                                       // 3320
  'submit': true                                                                                                       // 3321
};                                                                                                                     // 3322
                                                                                                                       // 3323
function _assertSingleLink(input) {                                                                                    // 3324
  ("production" !== "development" ? invariant(                                                                         // 3325
      input.props.checkedLink == null || input.props.valueLink == null,                                                // 3326
      'Cannot provide a checkedLink and a valueLink. If you want to use ' +                                            // 3327
      'checkedLink, you probably don\'t want to use valueLink and vice versa.'                                         // 3328
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));                                    // 3329
}                                                                                                                      // 3330
function _assertValueLink(input) {                                                                                     // 3331
  _assertSingleLink(input);                                                                                            // 3332
  ("production" !== "development" ? invariant(                                                                         // 3333
    input.props.value == null && input.props.onChange == null,                                                         // 3334
    'Cannot provide a valueLink and a value or onChange event. If you want ' +                                         // 3335
    'to use value or onChange, you probably don\'t want to use valueLink.'                                             // 3336
  ) : invariant(input.props.value == null && input.props.onChange == null));                                           // 3337
}                                                                                                                      // 3338
                                                                                                                       // 3339
function _assertCheckedLink(input) {                                                                                   // 3340
  _assertSingleLink(input);                                                                                            // 3341
  ("production" !== "development" ? invariant(                                                                         // 3342
    input.props.checked == null && input.props.onChange == null,                                                       // 3343
    'Cannot provide a checkedLink and a checked property or onChange event. ' +                                        // 3344
    'If you want to use checked or onChange, you probably don\'t want to ' +                                           // 3345
    'use checkedLink'                                                                                                  // 3346
  ) : invariant(input.props.checked == null && input.props.onChange == null));                                         // 3347
}                                                                                                                      // 3348
                                                                                                                       // 3349
/**                                                                                                                    // 3350
 * @param {SyntheticEvent} e change event to handle                                                                    // 3351
 */                                                                                                                    // 3352
function _handleLinkedValueChange(e) {                                                                                 // 3353
  /*jshint validthis:true */                                                                                           // 3354
  this.props.valueLink.requestChange(e.target.value);                                                                  // 3355
}                                                                                                                      // 3356
                                                                                                                       // 3357
/**                                                                                                                    // 3358
  * @param {SyntheticEvent} e change event to handle                                                                   // 3359
  */                                                                                                                   // 3360
function _handleLinkedCheckChange(e) {                                                                                 // 3361
  /*jshint validthis:true */                                                                                           // 3362
  this.props.checkedLink.requestChange(e.target.checked);                                                              // 3363
}                                                                                                                      // 3364
                                                                                                                       // 3365
/**                                                                                                                    // 3366
 * Provide a linked `value` attribute for controlled forms. You should not use                                         // 3367
 * this outside of the ReactDOM controlled form components.                                                            // 3368
 */                                                                                                                    // 3369
var LinkedValueUtils = {                                                                                               // 3370
  Mixin: {                                                                                                             // 3371
    propTypes: {                                                                                                       // 3372
      value: function(props, propName, componentName) {                                                                // 3373
        if ("production" !== "development") {                                                                          // 3374
          ("production" !== "development" ? warning(                                                                   // 3375
            !props[propName] ||                                                                                        // 3376
            hasReadOnlyValue[props.type] ||                                                                            // 3377
            props.onChange ||                                                                                          // 3378
            props.readOnly ||                                                                                          // 3379
            props.disabled,                                                                                            // 3380
            'You provided a `value` prop to a form field without an ' +                                                // 3381
            '`onChange` handler. This will render a read-only field. If ' +                                            // 3382
            'the field should be mutable use `defaultValue`. Otherwise, ' +                                            // 3383
            'set either `onChange` or `readOnly`.'                                                                     // 3384
          ) : null);                                                                                                   // 3385
        }                                                                                                              // 3386
      },                                                                                                               // 3387
      checked: function(props, propName, componentName) {                                                              // 3388
        if ("production" !== "development") {                                                                          // 3389
          ("production" !== "development" ? warning(                                                                   // 3390
            !props[propName] ||                                                                                        // 3391
            props.onChange ||                                                                                          // 3392
            props.readOnly ||                                                                                          // 3393
            props.disabled,                                                                                            // 3394
            'You provided a `checked` prop to a form field without an ' +                                              // 3395
            '`onChange` handler. This will render a read-only field. If ' +                                            // 3396
            'the field should be mutable use `defaultChecked`. Otherwise, ' +                                          // 3397
            'set either `onChange` or `readOnly`.'                                                                     // 3398
          ) : null);                                                                                                   // 3399
        }                                                                                                              // 3400
      },                                                                                                               // 3401
      onChange: ReactPropTypes.func                                                                                    // 3402
    }                                                                                                                  // 3403
  },                                                                                                                   // 3404
                                                                                                                       // 3405
  /**                                                                                                                  // 3406
   * @param {ReactComponent} input Form component                                                                      // 3407
   * @return {*} current value of the input either from value prop or link.                                            // 3408
   */                                                                                                                  // 3409
  getValue: function(input) {                                                                                          // 3410
    if (input.props.valueLink) {                                                                                       // 3411
      _assertValueLink(input);                                                                                         // 3412
      return input.props.valueLink.value;                                                                              // 3413
    }                                                                                                                  // 3414
    return input.props.value;                                                                                          // 3415
  },                                                                                                                   // 3416
                                                                                                                       // 3417
  /**                                                                                                                  // 3418
   * @param {ReactComponent} input Form component                                                                      // 3419
   * @return {*} current checked status of the input either from checked prop                                          // 3420
   *             or link.                                                                                              // 3421
   */                                                                                                                  // 3422
  getChecked: function(input) {                                                                                        // 3423
    if (input.props.checkedLink) {                                                                                     // 3424
      _assertCheckedLink(input);                                                                                       // 3425
      return input.props.checkedLink.value;                                                                            // 3426
    }                                                                                                                  // 3427
    return input.props.checked;                                                                                        // 3428
  },                                                                                                                   // 3429
                                                                                                                       // 3430
  /**                                                                                                                  // 3431
   * @param {ReactComponent} input Form component                                                                      // 3432
   * @return {function} change callback either from onChange prop or link.                                             // 3433
   */                                                                                                                  // 3434
  getOnChange: function(input) {                                                                                       // 3435
    if (input.props.valueLink) {                                                                                       // 3436
      _assertValueLink(input);                                                                                         // 3437
      return _handleLinkedValueChange;                                                                                 // 3438
    } else if (input.props.checkedLink) {                                                                              // 3439
      _assertCheckedLink(input);                                                                                       // 3440
      return _handleLinkedCheckChange;                                                                                 // 3441
    }                                                                                                                  // 3442
    return input.props.onChange;                                                                                       // 3443
  }                                                                                                                    // 3444
};                                                                                                                     // 3445
                                                                                                                       // 3446
module.exports = LinkedValueUtils;                                                                                     // 3447
                                                                                                                       // 3448
},{"./ReactPropTypes":64,"./invariant":112,"./warning":134}],22:[function(_dereq_,module,exports){                     // 3449
/**                                                                                                                    // 3450
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 3451
 *                                                                                                                     // 3452
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3453
 * you may not use this file except in compliance with the License.                                                    // 3454
 * You may obtain a copy of the License at                                                                             // 3455
 *                                                                                                                     // 3456
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3457
 *                                                                                                                     // 3458
 * Unless required by applicable law or agreed to in writing, software                                                 // 3459
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3460
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3461
 * See the License for the specific language governing permissions and                                                 // 3462
 * limitations under the License.                                                                                      // 3463
 *                                                                                                                     // 3464
 * @providesModule MobileSafariClickEventPlugin                                                                        // 3465
 * @typechecks static-only                                                                                             // 3466
 */                                                                                                                    // 3467
                                                                                                                       // 3468
"use strict";                                                                                                          // 3469
                                                                                                                       // 3470
var EventConstants = _dereq_("./EventConstants");                                                                      // 3471
                                                                                                                       // 3472
var emptyFunction = _dereq_("./emptyFunction");                                                                        // 3473
                                                                                                                       // 3474
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 3475
                                                                                                                       // 3476
/**                                                                                                                    // 3477
 * Mobile Safari does not fire properly bubble click events on non-interactive                                         // 3478
 * elements, which means delegated click listeners do not fire. The workaround                                         // 3479
 * for this bug involves attaching an empty click listener on the target node.                                         // 3480
 *                                                                                                                     // 3481
 * This particular plugin works around the bug by attaching an empty click                                             // 3482
 * listener on `touchstart` (which does fire on every element).                                                        // 3483
 */                                                                                                                    // 3484
var MobileSafariClickEventPlugin = {                                                                                   // 3485
                                                                                                                       // 3486
  eventTypes: null,                                                                                                    // 3487
                                                                                                                       // 3488
  /**                                                                                                                  // 3489
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 3490
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 3491
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 3492
   * @param {object} nativeEvent Native browser event.                                                                 // 3493
   * @return {*} An accumulation of synthetic events.                                                                  // 3494
   * @see {EventPluginHub.extractEvents}                                                                               // 3495
   */                                                                                                                  // 3496
  extractEvents: function(                                                                                             // 3497
      topLevelType,                                                                                                    // 3498
      topLevelTarget,                                                                                                  // 3499
      topLevelTargetID,                                                                                                // 3500
      nativeEvent) {                                                                                                   // 3501
    if (topLevelType === topLevelTypes.topTouchStart) {                                                                // 3502
      var target = nativeEvent.target;                                                                                 // 3503
      if (target && !target.onclick) {                                                                                 // 3504
        target.onclick = emptyFunction;                                                                                // 3505
      }                                                                                                                // 3506
    }                                                                                                                  // 3507
  }                                                                                                                    // 3508
                                                                                                                       // 3509
};                                                                                                                     // 3510
                                                                                                                       // 3511
module.exports = MobileSafariClickEventPlugin;                                                                         // 3512
                                                                                                                       // 3513
},{"./EventConstants":14,"./emptyFunction":96}],23:[function(_dereq_,module,exports){                                  // 3514
/**                                                                                                                    // 3515
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 3516
 *                                                                                                                     // 3517
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3518
 * you may not use this file except in compliance with the License.                                                    // 3519
 * You may obtain a copy of the License at                                                                             // 3520
 *                                                                                                                     // 3521
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3522
 *                                                                                                                     // 3523
 * Unless required by applicable law or agreed to in writing, software                                                 // 3524
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3525
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3526
 * See the License for the specific language governing permissions and                                                 // 3527
 * limitations under the License.                                                                                      // 3528
 *                                                                                                                     // 3529
 * @providesModule PooledClass                                                                                         // 3530
 */                                                                                                                    // 3531
                                                                                                                       // 3532
"use strict";                                                                                                          // 3533
                                                                                                                       // 3534
var invariant = _dereq_("./invariant");                                                                                // 3535
                                                                                                                       // 3536
/**                                                                                                                    // 3537
 * Static poolers. Several custom versions for each potential number of                                                // 3538
 * arguments. A completely generic pooler is easy to implement, but would                                              // 3539
 * require accessing the `arguments` object. In each of these, `this` refers to                                        // 3540
 * the Class itself, not an instance. If any others are needed, simply add them                                        // 3541
 * here, or in their own files.                                                                                        // 3542
 */                                                                                                                    // 3543
var oneArgumentPooler = function(copyFieldsFrom) {                                                                     // 3544
  var Klass = this;                                                                                                    // 3545
  if (Klass.instancePool.length) {                                                                                     // 3546
    var instance = Klass.instancePool.pop();                                                                           // 3547
    Klass.call(instance, copyFieldsFrom);                                                                              // 3548
    return instance;                                                                                                   // 3549
  } else {                                                                                                             // 3550
    return new Klass(copyFieldsFrom);                                                                                  // 3551
  }                                                                                                                    // 3552
};                                                                                                                     // 3553
                                                                                                                       // 3554
var twoArgumentPooler = function(a1, a2) {                                                                             // 3555
  var Klass = this;                                                                                                    // 3556
  if (Klass.instancePool.length) {                                                                                     // 3557
    var instance = Klass.instancePool.pop();                                                                           // 3558
    Klass.call(instance, a1, a2);                                                                                      // 3559
    return instance;                                                                                                   // 3560
  } else {                                                                                                             // 3561
    return new Klass(a1, a2);                                                                                          // 3562
  }                                                                                                                    // 3563
};                                                                                                                     // 3564
                                                                                                                       // 3565
var threeArgumentPooler = function(a1, a2, a3) {                                                                       // 3566
  var Klass = this;                                                                                                    // 3567
  if (Klass.instancePool.length) {                                                                                     // 3568
    var instance = Klass.instancePool.pop();                                                                           // 3569
    Klass.call(instance, a1, a2, a3);                                                                                  // 3570
    return instance;                                                                                                   // 3571
  } else {                                                                                                             // 3572
    return new Klass(a1, a2, a3);                                                                                      // 3573
  }                                                                                                                    // 3574
};                                                                                                                     // 3575
                                                                                                                       // 3576
var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {                                                                // 3577
  var Klass = this;                                                                                                    // 3578
  if (Klass.instancePool.length) {                                                                                     // 3579
    var instance = Klass.instancePool.pop();                                                                           // 3580
    Klass.call(instance, a1, a2, a3, a4, a5);                                                                          // 3581
    return instance;                                                                                                   // 3582
  } else {                                                                                                             // 3583
    return new Klass(a1, a2, a3, a4, a5);                                                                              // 3584
  }                                                                                                                    // 3585
};                                                                                                                     // 3586
                                                                                                                       // 3587
var standardReleaser = function(instance) {                                                                            // 3588
  var Klass = this;                                                                                                    // 3589
  ("production" !== "development" ? invariant(                                                                         // 3590
    instance instanceof Klass,                                                                                         // 3591
    'Trying to release an instance into a pool of a different type.'                                                   // 3592
  ) : invariant(instance instanceof Klass));                                                                           // 3593
  if (instance.destructor) {                                                                                           // 3594
    instance.destructor();                                                                                             // 3595
  }                                                                                                                    // 3596
  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 3597
    Klass.instancePool.push(instance);                                                                                 // 3598
  }                                                                                                                    // 3599
};                                                                                                                     // 3600
                                                                                                                       // 3601
var DEFAULT_POOL_SIZE = 10;                                                                                            // 3602
var DEFAULT_POOLER = oneArgumentPooler;                                                                                // 3603
                                                                                                                       // 3604
/**                                                                                                                    // 3605
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 3606
 * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 3607
 * you give this may have a `poolSize` property, and will look for a                                                   // 3608
 * prototypical `destructor` on instances (optional).                                                                  // 3609
 *                                                                                                                     // 3610
 * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 3611
 * @param {Function} pooler Customizable pooler.                                                                       // 3612
 */                                                                                                                    // 3613
var addPoolingTo = function(CopyConstructor, pooler) {                                                                 // 3614
  var NewKlass = CopyConstructor;                                                                                      // 3615
  NewKlass.instancePool = [];                                                                                          // 3616
  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 3617
  if (!NewKlass.poolSize) {                                                                                            // 3618
    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 3619
  }                                                                                                                    // 3620
  NewKlass.release = standardReleaser;                                                                                 // 3621
  return NewKlass;                                                                                                     // 3622
};                                                                                                                     // 3623
                                                                                                                       // 3624
var PooledClass = {                                                                                                    // 3625
  addPoolingTo: addPoolingTo,                                                                                          // 3626
  oneArgumentPooler: oneArgumentPooler,                                                                                // 3627
  twoArgumentPooler: twoArgumentPooler,                                                                                // 3628
  threeArgumentPooler: threeArgumentPooler,                                                                            // 3629
  fiveArgumentPooler: fiveArgumentPooler                                                                               // 3630
};                                                                                                                     // 3631
                                                                                                                       // 3632
module.exports = PooledClass;                                                                                          // 3633
                                                                                                                       // 3634
},{"./invariant":112}],24:[function(_dereq_,module,exports){                                                           // 3635
/**                                                                                                                    // 3636
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 3637
 *                                                                                                                     // 3638
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3639
 * you may not use this file except in compliance with the License.                                                    // 3640
 * You may obtain a copy of the License at                                                                             // 3641
 *                                                                                                                     // 3642
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3643
 *                                                                                                                     // 3644
 * Unless required by applicable law or agreed to in writing, software                                                 // 3645
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3646
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3647
 * See the License for the specific language governing permissions and                                                 // 3648
 * limitations under the License.                                                                                      // 3649
 *                                                                                                                     // 3650
 * @providesModule React                                                                                               // 3651
 */                                                                                                                    // 3652
                                                                                                                       // 3653
"use strict";                                                                                                          // 3654
                                                                                                                       // 3655
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");                                                        // 3656
var EventPluginUtils = _dereq_("./EventPluginUtils");                                                                  // 3657
var ReactChildren = _dereq_("./ReactChildren");                                                                        // 3658
var ReactComponent = _dereq_("./ReactComponent");                                                                      // 3659
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");                                                    // 3660
var ReactContext = _dereq_("./ReactContext");                                                                          // 3661
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");                                                                // 3662
var ReactDOM = _dereq_("./ReactDOM");                                                                                  // 3663
var ReactDOMComponent = _dereq_("./ReactDOMComponent");                                                                // 3664
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");                                                        // 3665
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");                                                          // 3666
var ReactMount = _dereq_("./ReactMount");                                                                              // 3667
var ReactMultiChild = _dereq_("./ReactMultiChild");                                                                    // 3668
var ReactPerf = _dereq_("./ReactPerf");                                                                                // 3669
var ReactPropTypes = _dereq_("./ReactPropTypes");                                                                      // 3670
var ReactServerRendering = _dereq_("./ReactServerRendering");                                                          // 3671
var ReactTextComponent = _dereq_("./ReactTextComponent");                                                              // 3672
                                                                                                                       // 3673
var onlyChild = _dereq_("./onlyChild");                                                                                // 3674
                                                                                                                       // 3675
ReactDefaultInjection.inject();                                                                                        // 3676
                                                                                                                       // 3677
var React = {                                                                                                          // 3678
  Children: {                                                                                                          // 3679
    map: ReactChildren.map,                                                                                            // 3680
    forEach: ReactChildren.forEach,                                                                                    // 3681
    only: onlyChild                                                                                                    // 3682
  },                                                                                                                   // 3683
  DOM: ReactDOM,                                                                                                       // 3684
  PropTypes: ReactPropTypes,                                                                                           // 3685
  initializeTouchEvents: function(shouldUseTouch) {                                                                    // 3686
    EventPluginUtils.useTouchEvents = shouldUseTouch;                                                                  // 3687
  },                                                                                                                   // 3688
  createClass: ReactCompositeComponent.createClass,                                                                    // 3689
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,                                                 // 3690
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,                                         // 3691
  renderComponent: ReactPerf.measure(                                                                                  // 3692
    'React',                                                                                                           // 3693
    'renderComponent',                                                                                                 // 3694
    ReactMount.renderComponent                                                                                         // 3695
  ),                                                                                                                   // 3696
  renderComponentToString: ReactServerRendering.renderComponentToString,                                               // 3697
  renderComponentToStaticMarkup:                                                                                       // 3698
    ReactServerRendering.renderComponentToStaticMarkup,                                                                // 3699
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,                                                           // 3700
  isValidClass: ReactCompositeComponent.isValidClass,                                                                  // 3701
  isValidComponent: ReactComponent.isValidComponent,                                                                   // 3702
  withContext: ReactContext.withContext,                                                                               // 3703
  __internals: {                                                                                                       // 3704
    Component: ReactComponent,                                                                                         // 3705
    CurrentOwner: ReactCurrentOwner,                                                                                   // 3706
    DOMComponent: ReactDOMComponent,                                                                                   // 3707
    DOMPropertyOperations: DOMPropertyOperations,                                                                      // 3708
    InstanceHandles: ReactInstanceHandles,                                                                             // 3709
    Mount: ReactMount,                                                                                                 // 3710
    MultiChild: ReactMultiChild,                                                                                       // 3711
    TextComponent: ReactTextComponent                                                                                  // 3712
  }                                                                                                                    // 3713
};                                                                                                                     // 3714
                                                                                                                       // 3715
if ("production" !== "development") {                                                                                  // 3716
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                        // 3717
  if (ExecutionEnvironment.canUseDOM &&                                                                                // 3718
      window.top === window.self &&                                                                                    // 3719
      navigator.userAgent.indexOf('Chrome') > -1) {                                                                    // 3720
    console.debug(                                                                                                     // 3721
      'Download the React DevTools for a better development experience: ' +                                            // 3722
      'http://fb.me/react-devtools'                                                                                    // 3723
    );                                                                                                                 // 3724
  }                                                                                                                    // 3725
}                                                                                                                      // 3726
                                                                                                                       // 3727
// Version exists only in the open-source version of React, not in Facebook's                                          // 3728
// internal version.                                                                                                   // 3729
React.version = '0.10.0';                                                                                              // 3730
                                                                                                                       // 3731
module.exports = React;                                                                                                // 3732
                                                                                                                       // 3733
},{"./DOMPropertyOperations":9,"./EventPluginUtils":18,"./ExecutionEnvironment":20,"./ReactChildren":26,"./ReactComponent":27,"./ReactCompositeComponent":29,"./ReactContext":30,"./ReactCurrentOwner":31,"./ReactDOM":32,"./ReactDOMComponent":34,"./ReactDefaultInjection":44,"./ReactInstanceHandles":53,"./ReactMount":55,"./ReactMultiChild":57,"./ReactPerf":60,"./ReactPropTypes":64,"./ReactServerRendering":68,"./ReactTextComponent":70,"./onlyChild":128}],25:[function(_dereq_,module,exports){
/**                                                                                                                    // 3735
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 3736
 *                                                                                                                     // 3737
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3738
 * you may not use this file except in compliance with the License.                                                    // 3739
 * You may obtain a copy of the License at                                                                             // 3740
 *                                                                                                                     // 3741
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3742
 *                                                                                                                     // 3743
 * Unless required by applicable law or agreed to in writing, software                                                 // 3744
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3745
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3746
 * See the License for the specific language governing permissions and                                                 // 3747
 * limitations under the License.                                                                                      // 3748
 *                                                                                                                     // 3749
 * @providesModule ReactBrowserComponentMixin                                                                          // 3750
 */                                                                                                                    // 3751
                                                                                                                       // 3752
"use strict";                                                                                                          // 3753
                                                                                                                       // 3754
var ReactMount = _dereq_("./ReactMount");                                                                              // 3755
                                                                                                                       // 3756
var invariant = _dereq_("./invariant");                                                                                // 3757
                                                                                                                       // 3758
var ReactBrowserComponentMixin = {                                                                                     // 3759
  /**                                                                                                                  // 3760
   * Returns the DOM node rendered by this component.                                                                  // 3761
   *                                                                                                                   // 3762
   * @return {DOMElement} The root node of this component.                                                             // 3763
   * @final                                                                                                            // 3764
   * @protected                                                                                                        // 3765
   */                                                                                                                  // 3766
  getDOMNode: function() {                                                                                             // 3767
    ("production" !== "development" ? invariant(                                                                       // 3768
      this.isMounted(),                                                                                                // 3769
      'getDOMNode(): A component must be mounted to have a DOM node.'                                                  // 3770
    ) : invariant(this.isMounted()));                                                                                  // 3771
    return ReactMount.getNode(this._rootNodeID);                                                                       // 3772
  }                                                                                                                    // 3773
};                                                                                                                     // 3774
                                                                                                                       // 3775
module.exports = ReactBrowserComponentMixin;                                                                           // 3776
                                                                                                                       // 3777
},{"./ReactMount":55,"./invariant":112}],26:[function(_dereq_,module,exports){                                         // 3778
/**                                                                                                                    // 3779
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 3780
 *                                                                                                                     // 3781
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3782
 * you may not use this file except in compliance with the License.                                                    // 3783
 * You may obtain a copy of the License at                                                                             // 3784
 *                                                                                                                     // 3785
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3786
 *                                                                                                                     // 3787
 * Unless required by applicable law or agreed to in writing, software                                                 // 3788
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3789
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3790
 * See the License for the specific language governing permissions and                                                 // 3791
 * limitations under the License.                                                                                      // 3792
 *                                                                                                                     // 3793
 * @providesModule ReactChildren                                                                                       // 3794
 */                                                                                                                    // 3795
                                                                                                                       // 3796
"use strict";                                                                                                          // 3797
                                                                                                                       // 3798
var PooledClass = _dereq_("./PooledClass");                                                                            // 3799
                                                                                                                       // 3800
var invariant = _dereq_("./invariant");                                                                                // 3801
var traverseAllChildren = _dereq_("./traverseAllChildren");                                                            // 3802
                                                                                                                       // 3803
var twoArgumentPooler = PooledClass.twoArgumentPooler;                                                                 // 3804
var threeArgumentPooler = PooledClass.threeArgumentPooler;                                                             // 3805
                                                                                                                       // 3806
/**                                                                                                                    // 3807
 * PooledClass representing the bookkeeping associated with performing a child                                         // 3808
 * traversal. Allows avoiding binding callbacks.                                                                       // 3809
 *                                                                                                                     // 3810
 * @constructor ForEachBookKeeping                                                                                     // 3811
 * @param {!function} forEachFunction Function to perform traversal with.                                              // 3812
 * @param {?*} forEachContext Context to perform context with.                                                         // 3813
 */                                                                                                                    // 3814
function ForEachBookKeeping(forEachFunction, forEachContext) {                                                         // 3815
  this.forEachFunction = forEachFunction;                                                                              // 3816
  this.forEachContext = forEachContext;                                                                                // 3817
}                                                                                                                      // 3818
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);                                                       // 3819
                                                                                                                       // 3820
function forEachSingleChild(traverseContext, child, name, i) {                                                         // 3821
  var forEachBookKeeping = traverseContext;                                                                            // 3822
  forEachBookKeeping.forEachFunction.call(                                                                             // 3823
    forEachBookKeeping.forEachContext, child, i);                                                                      // 3824
}                                                                                                                      // 3825
                                                                                                                       // 3826
/**                                                                                                                    // 3827
 * Iterates through children that are typically specified as `props.children`.                                         // 3828
 *                                                                                                                     // 3829
 * The provided forEachFunc(child, index) will be called for each                                                      // 3830
 * leaf child.                                                                                                         // 3831
 *                                                                                                                     // 3832
 * @param {?*} children Children tree container.                                                                       // 3833
 * @param {function(*, int)} forEachFunc.                                                                              // 3834
 * @param {*} forEachContext Context for forEachContext.                                                               // 3835
 */                                                                                                                    // 3836
function forEachChildren(children, forEachFunc, forEachContext) {                                                      // 3837
  if (children == null) {                                                                                              // 3838
    return children;                                                                                                   // 3839
  }                                                                                                                    // 3840
                                                                                                                       // 3841
  var traverseContext =                                                                                                // 3842
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);                                                         // 3843
  traverseAllChildren(children, forEachSingleChild, traverseContext);                                                  // 3844
  ForEachBookKeeping.release(traverseContext);                                                                         // 3845
}                                                                                                                      // 3846
                                                                                                                       // 3847
/**                                                                                                                    // 3848
 * PooledClass representing the bookkeeping associated with performing a child                                         // 3849
 * mapping. Allows avoiding binding callbacks.                                                                         // 3850
 *                                                                                                                     // 3851
 * @constructor MapBookKeeping                                                                                         // 3852
 * @param {!*} mapResult Object containing the ordered map of results.                                                 // 3853
 * @param {!function} mapFunction Function to perform mapping with.                                                    // 3854
 * @param {?*} mapContext Context to perform mapping with.                                                             // 3855
 */                                                                                                                    // 3856
function MapBookKeeping(mapResult, mapFunction, mapContext) {                                                          // 3857
  this.mapResult = mapResult;                                                                                          // 3858
  this.mapFunction = mapFunction;                                                                                      // 3859
  this.mapContext = mapContext;                                                                                        // 3860
}                                                                                                                      // 3861
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);                                                         // 3862
                                                                                                                       // 3863
function mapSingleChildIntoContext(traverseContext, child, name, i) {                                                  // 3864
  var mapBookKeeping = traverseContext;                                                                                // 3865
  var mapResult = mapBookKeeping.mapResult;                                                                            // 3866
  var mappedChild =                                                                                                    // 3867
    mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);                                              // 3868
  // We found a component instance                                                                                     // 3869
  ("production" !== "development" ? invariant(                                                                         // 3870
    !mapResult.hasOwnProperty(name),                                                                                   // 3871
    'ReactChildren.map(...): Encountered two children with the same key, ' +                                           // 3872
    '`%s`. Children keys must be unique.',                                                                             // 3873
    name                                                                                                               // 3874
  ) : invariant(!mapResult.hasOwnProperty(name)));                                                                     // 3875
  mapResult[name] = mappedChild;                                                                                       // 3876
}                                                                                                                      // 3877
                                                                                                                       // 3878
/**                                                                                                                    // 3879
 * Maps children that are typically specified as `props.children`.                                                     // 3880
 *                                                                                                                     // 3881
 * The provided mapFunction(child, key, index) will be called for each                                                 // 3882
 * leaf child.                                                                                                         // 3883
 *                                                                                                                     // 3884
 * TODO: This may likely break any calls to `ReactChildren.map` that were                                              // 3885
 * previously relying on the fact that we guarded against null children.                                               // 3886
 *                                                                                                                     // 3887
 * @param {?*} children Children tree container.                                                                       // 3888
 * @param {function(*, int)} mapFunction.                                                                              // 3889
 * @param {*} mapContext Context for mapFunction.                                                                      // 3890
 * @return {object} Object containing the ordered map of results.                                                      // 3891
 */                                                                                                                    // 3892
function mapChildren(children, func, context) {                                                                        // 3893
  if (children == null) {                                                                                              // 3894
    return children;                                                                                                   // 3895
  }                                                                                                                    // 3896
                                                                                                                       // 3897
  var mapResult = {};                                                                                                  // 3898
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);                                            // 3899
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);                                           // 3900
  MapBookKeeping.release(traverseContext);                                                                             // 3901
  return mapResult;                                                                                                    // 3902
}                                                                                                                      // 3903
                                                                                                                       // 3904
var ReactChildren = {                                                                                                  // 3905
  forEach: forEachChildren,                                                                                            // 3906
  map: mapChildren                                                                                                     // 3907
};                                                                                                                     // 3908
                                                                                                                       // 3909
module.exports = ReactChildren;                                                                                        // 3910
                                                                                                                       // 3911
},{"./PooledClass":23,"./invariant":112,"./traverseAllChildren":133}],27:[function(_dereq_,module,exports){            // 3912
/**                                                                                                                    // 3913
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 3914
 *                                                                                                                     // 3915
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3916
 * you may not use this file except in compliance with the License.                                                    // 3917
 * You may obtain a copy of the License at                                                                             // 3918
 *                                                                                                                     // 3919
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3920
 *                                                                                                                     // 3921
 * Unless required by applicable law or agreed to in writing, software                                                 // 3922
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3923
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3924
 * See the License for the specific language governing permissions and                                                 // 3925
 * limitations under the License.                                                                                      // 3926
 *                                                                                                                     // 3927
 * @providesModule ReactComponent                                                                                      // 3928
 */                                                                                                                    // 3929
                                                                                                                       // 3930
"use strict";                                                                                                          // 3931
                                                                                                                       // 3932
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");                                                                // 3933
var ReactOwner = _dereq_("./ReactOwner");                                                                              // 3934
var ReactUpdates = _dereq_("./ReactUpdates");                                                                          // 3935
                                                                                                                       // 3936
var invariant = _dereq_("./invariant");                                                                                // 3937
var keyMirror = _dereq_("./keyMirror");                                                                                // 3938
var merge = _dereq_("./merge");                                                                                        // 3939
var monitorCodeUse = _dereq_("./monitorCodeUse");                                                                      // 3940
                                                                                                                       // 3941
/**                                                                                                                    // 3942
 * Every React component is in one of these life cycles.                                                               // 3943
 */                                                                                                                    // 3944
var ComponentLifeCycle = keyMirror({                                                                                   // 3945
  /**                                                                                                                  // 3946
   * Mounted components have a DOM node representation and are capable of                                              // 3947
   * receiving new props.                                                                                              // 3948
   */                                                                                                                  // 3949
  MOUNTED: null,                                                                                                       // 3950
  /**                                                                                                                  // 3951
   * Unmounted components are inactive and cannot receive new props.                                                   // 3952
   */                                                                                                                  // 3953
  UNMOUNTED: null                                                                                                      // 3954
});                                                                                                                    // 3955
                                                                                                                       // 3956
/**                                                                                                                    // 3957
 * Warn if there's no key explicitly set on dynamic arrays of children or                                              // 3958
 * object keys are not valid. This allows us to keep track of children between                                         // 3959
 * updates.                                                                                                            // 3960
 */                                                                                                                    // 3961
                                                                                                                       // 3962
var ownerHasExplicitKeyWarning = {};                                                                                   // 3963
var ownerHasPropertyWarning = {};                                                                                      // 3964
var ownerHasMonitoredObjectMap = {};                                                                                   // 3965
                                                                                                                       // 3966
var NUMERIC_PROPERTY_REGEX = /^\d+$/;                                                                                  // 3967
                                                                                                                       // 3968
var injected = false;                                                                                                  // 3969
                                                                                                                       // 3970
/**                                                                                                                    // 3971
 * Optionally injectable environment dependent cleanup hook. (server vs.                                               // 3972
 * browser etc). Example: A browser system caches DOM nodes based on component                                         // 3973
 * ID and must remove that cache entry when this instance is unmounted.                                                // 3974
 *                                                                                                                     // 3975
 * @private                                                                                                            // 3976
 */                                                                                                                    // 3977
var unmountIDFromEnvironment = null;                                                                                   // 3978
                                                                                                                       // 3979
/**                                                                                                                    // 3980
 * The "image" of a component tree, is the platform specific (typically                                                // 3981
 * serialized) data that represents a tree of lower level UI building blocks.                                          // 3982
 * On the web, this "image" is HTML markup which describes a construction of                                           // 3983
 * low level `div` and `span` nodes. Other platforms may have different                                                // 3984
 * encoding of this "image". This must be injected.                                                                    // 3985
 *                                                                                                                     // 3986
 * @private                                                                                                            // 3987
 */                                                                                                                    // 3988
var mountImageIntoNode = null;                                                                                         // 3989
                                                                                                                       // 3990
/**                                                                                                                    // 3991
 * Warn if the component doesn't have an explicit key assigned to it.                                                  // 3992
 * This component is in an array. The array could grow and shrink or be                                                // 3993
 * reordered. All children that haven't already been validated are required to                                         // 3994
 * have a "key" property assigned to it.                                                                               // 3995
 *                                                                                                                     // 3996
 * @internal                                                                                                           // 3997
 * @param {ReactComponent} component Component that requires a key.                                                    // 3998
 */                                                                                                                    // 3999
function validateExplicitKey(component) {                                                                              // 4000
  if (component.__keyValidated__ || component.props.key != null) {                                                     // 4001
    return;                                                                                                            // 4002
  }                                                                                                                    // 4003
  component.__keyValidated__ = true;                                                                                   // 4004
                                                                                                                       // 4005
  // We can't provide friendly warnings for top level components.                                                      // 4006
  if (!ReactCurrentOwner.current) {                                                                                    // 4007
    return;                                                                                                            // 4008
  }                                                                                                                    // 4009
                                                                                                                       // 4010
  // Name of the component whose render method tried to pass children.                                                 // 4011
  var currentName = ReactCurrentOwner.current.constructor.displayName;                                                 // 4012
  if (ownerHasExplicitKeyWarning.hasOwnProperty(currentName)) {                                                        // 4013
    return;                                                                                                            // 4014
  }                                                                                                                    // 4015
  ownerHasExplicitKeyWarning[currentName] = true;                                                                      // 4016
                                                                                                                       // 4017
  var message = 'Each child in an array should have a unique "key" prop. ' +                                           // 4018
                'Check the render method of ' + currentName + '.';                                                     // 4019
                                                                                                                       // 4020
  var childOwnerName = null;                                                                                           // 4021
  if (!component.isOwnedBy(ReactCurrentOwner.current)) {                                                               // 4022
    // Name of the component that originally created this child.                                                       // 4023
    childOwnerName =                                                                                                   // 4024
      component._owner &&                                                                                              // 4025
      component._owner.constructor.displayName;                                                                        // 4026
                                                                                                                       // 4027
    // Usually the current owner is the offender, but if it accepts                                                    // 4028
    // children as a property, it may be the creator of the child that's                                               // 4029
    // responsible for assigning it a key.                                                                             // 4030
    message += ' It was passed a child from ' + childOwnerName + '.';                                                  // 4031
  }                                                                                                                    // 4032
                                                                                                                       // 4033
  message += ' See http://fb.me/react-warning-keys for more information.';                                             // 4034
  monitorCodeUse('react_key_warning', {                                                                                // 4035
    component: currentName,                                                                                            // 4036
    componentOwner: childOwnerName                                                                                     // 4037
  });                                                                                                                  // 4038
  console.warn(message);                                                                                               // 4039
}                                                                                                                      // 4040
                                                                                                                       // 4041
/**                                                                                                                    // 4042
 * Warn if the key is being defined as an object property but has an incorrect                                         // 4043
 * value.                                                                                                              // 4044
 *                                                                                                                     // 4045
 * @internal                                                                                                           // 4046
 * @param {string} name Property name of the key.                                                                      // 4047
 * @param {ReactComponent} component Component that requires a key.                                                    // 4048
 */                                                                                                                    // 4049
function validatePropertyKey(name) {                                                                                   // 4050
  if (NUMERIC_PROPERTY_REGEX.test(name)) {                                                                             // 4051
    // Name of the component whose render method tried to pass children.                                               // 4052
    var currentName = ReactCurrentOwner.current.constructor.displayName;                                               // 4053
    if (ownerHasPropertyWarning.hasOwnProperty(currentName)) {                                                         // 4054
      return;                                                                                                          // 4055
    }                                                                                                                  // 4056
    ownerHasPropertyWarning[currentName] = true;                                                                       // 4057
                                                                                                                       // 4058
    monitorCodeUse('react_numeric_key_warning');                                                                       // 4059
    console.warn(                                                                                                      // 4060
      'Child objects should have non-numeric keys so ordering is preserved. ' +                                        // 4061
      'Check the render method of ' + currentName + '. ' +                                                             // 4062
      'See http://fb.me/react-warning-keys for more information.'                                                      // 4063
    );                                                                                                                 // 4064
  }                                                                                                                    // 4065
}                                                                                                                      // 4066
                                                                                                                       // 4067
/**                                                                                                                    // 4068
 * Log that we're using an object map. We're considering deprecating this                                              // 4069
 * feature and replace it with proper Map and ImmutableMap data structures.                                            // 4070
 *                                                                                                                     // 4071
 * @internal                                                                                                           // 4072
 */                                                                                                                    // 4073
function monitorUseOfObjectMap() {                                                                                     // 4074
  // Name of the component whose render method tried to pass children.                                                 // 4075
  // We only use this to avoid spewing the logs. We lose additional                                                    // 4076
  // owner stacks but hopefully one level is enough to trace the source.                                               // 4077
  var currentName = (ReactCurrentOwner.current &&                                                                      // 4078
                    ReactCurrentOwner.current.constructor.displayName) || '';                                          // 4079
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {                                                        // 4080
    return;                                                                                                            // 4081
  }                                                                                                                    // 4082
  ownerHasMonitoredObjectMap[currentName] = true;                                                                      // 4083
  monitorCodeUse('react_object_map_children');                                                                         // 4084
}                                                                                                                      // 4085
                                                                                                                       // 4086
/**                                                                                                                    // 4087
 * Ensure that every component either is passed in a static location, in an                                            // 4088
 * array with an explicit keys property defined, or in an object literal                                               // 4089
 * with valid key property.                                                                                            // 4090
 *                                                                                                                     // 4091
 * @internal                                                                                                           // 4092
 * @param {*} component Statically passed child of any type.                                                           // 4093
 * @return {boolean}                                                                                                   // 4094
 */                                                                                                                    // 4095
function validateChildKeys(component) {                                                                                // 4096
  if (Array.isArray(component)) {                                                                                      // 4097
    for (var i = 0; i < component.length; i++) {                                                                       // 4098
      var child = component[i];                                                                                        // 4099
      if (ReactComponent.isValidComponent(child)) {                                                                    // 4100
        validateExplicitKey(child);                                                                                    // 4101
      }                                                                                                                // 4102
    }                                                                                                                  // 4103
  } else if (ReactComponent.isValidComponent(component)) {                                                             // 4104
    // This component was passed in a valid location.                                                                  // 4105
    component.__keyValidated__ = true;                                                                                 // 4106
  } else if (component && typeof component === 'object') {                                                             // 4107
    monitorUseOfObjectMap();                                                                                           // 4108
    for (var name in component) {                                                                                      // 4109
      validatePropertyKey(name, component);                                                                            // 4110
    }                                                                                                                  // 4111
  }                                                                                                                    // 4112
}                                                                                                                      // 4113
                                                                                                                       // 4114
/**                                                                                                                    // 4115
 * Components are the basic units of composition in React.                                                             // 4116
 *                                                                                                                     // 4117
 * Every component accepts a set of keyed input parameters known as "props" that                                       // 4118
 * are initialized by the constructor. Once a component is mounted, the props                                          // 4119
 * can be mutated using `setProps` or `replaceProps`.                                                                  // 4120
 *                                                                                                                     // 4121
 * Every component is capable of the following operations:                                                             // 4122
 *                                                                                                                     // 4123
 *   `mountComponent`                                                                                                  // 4124
 *     Initializes the component, renders markup, and registers event listeners.                                       // 4125
 *                                                                                                                     // 4126
 *   `receiveComponent`                                                                                                // 4127
 *     Updates the rendered DOM nodes to match the given component.                                                    // 4128
 *                                                                                                                     // 4129
 *   `unmountComponent`                                                                                                // 4130
 *     Releases any resources allocated by this component.                                                             // 4131
 *                                                                                                                     // 4132
 * Components can also be "owned" by other components. Being owned by another                                          // 4133
 * component means being constructed by that component. This is different from                                         // 4134
 * being the child of a component, which means having a DOM representation that                                        // 4135
 * is a child of the DOM representation of that component.                                                             // 4136
 *                                                                                                                     // 4137
 * @class ReactComponent                                                                                               // 4138
 */                                                                                                                    // 4139
var ReactComponent = {                                                                                                 // 4140
                                                                                                                       // 4141
  injection: {                                                                                                         // 4142
    injectEnvironment: function(ReactComponentEnvironment) {                                                           // 4143
      ("production" !== "development" ? invariant(                                                                     // 4144
        !injected,                                                                                                     // 4145
        'ReactComponent: injectEnvironment() can only be called once.'                                                 // 4146
      ) : invariant(!injected));                                                                                       // 4147
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;                                               // 4148
      unmountIDFromEnvironment =                                                                                       // 4149
        ReactComponentEnvironment.unmountIDFromEnvironment;                                                            // 4150
      ReactComponent.BackendIDOperations =                                                                             // 4151
        ReactComponentEnvironment.BackendIDOperations;                                                                 // 4152
      ReactComponent.ReactReconcileTransaction =                                                                       // 4153
        ReactComponentEnvironment.ReactReconcileTransaction;                                                           // 4154
      injected = true;                                                                                                 // 4155
    }                                                                                                                  // 4156
  },                                                                                                                   // 4157
                                                                                                                       // 4158
  /**                                                                                                                  // 4159
   * @param {?object} object                                                                                           // 4160
   * @return {boolean} True if `object` is a valid component.                                                          // 4161
   * @final                                                                                                            // 4162
   */                                                                                                                  // 4163
  isValidComponent: function(object) {                                                                                 // 4164
    if (!object || !object.type || !object.type.prototype) {                                                           // 4165
      return false;                                                                                                    // 4166
    }                                                                                                                  // 4167
    // This is the safer way of duck checking the type of instance this is.                                            // 4168
    // The object can be a generic descriptor but the type property refers to                                          // 4169
    // the constructor and it's prototype can be used to inspect the type that                                         // 4170
    // will actually get mounted.                                                                                      // 4171
    var prototype = object.type.prototype;                                                                             // 4172
    return (                                                                                                           // 4173
      typeof prototype.mountComponentIntoNode === 'function' &&                                                        // 4174
      typeof prototype.receiveComponent === 'function'                                                                 // 4175
    );                                                                                                                 // 4176
  },                                                                                                                   // 4177
                                                                                                                       // 4178
  /**                                                                                                                  // 4179
   * @internal                                                                                                         // 4180
   */                                                                                                                  // 4181
  LifeCycle: ComponentLifeCycle,                                                                                       // 4182
                                                                                                                       // 4183
  /**                                                                                                                  // 4184
   * Injected module that provides ability to mutate individual properties.                                            // 4185
   * Injected into the base class because many different subclasses need access                                        // 4186
   * to this.                                                                                                          // 4187
   *                                                                                                                   // 4188
   * @internal                                                                                                         // 4189
   */                                                                                                                  // 4190
  BackendIDOperations: null,                                                                                           // 4191
                                                                                                                       // 4192
  /**                                                                                                                  // 4193
   * React references `ReactReconcileTransaction` using this property in order                                         // 4194
   * to allow dependency injection.                                                                                    // 4195
   *                                                                                                                   // 4196
   * @internal                                                                                                         // 4197
   */                                                                                                                  // 4198
  ReactReconcileTransaction: null,                                                                                     // 4199
                                                                                                                       // 4200
  /**                                                                                                                  // 4201
   * Base functionality for every ReactComponent constructor. Mixed into the                                           // 4202
   * `ReactComponent` prototype, but exposed statically for easy access.                                               // 4203
   *                                                                                                                   // 4204
   * @lends {ReactComponent.prototype}                                                                                 // 4205
   */                                                                                                                  // 4206
  Mixin: {                                                                                                             // 4207
                                                                                                                       // 4208
    /**                                                                                                                // 4209
     * Checks whether or not this component is mounted.                                                                // 4210
     *                                                                                                                 // 4211
     * @return {boolean} True if mounted, false otherwise.                                                             // 4212
     * @final                                                                                                          // 4213
     * @protected                                                                                                      // 4214
     */                                                                                                                // 4215
    isMounted: function() {                                                                                            // 4216
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;                                                      // 4217
    },                                                                                                                 // 4218
                                                                                                                       // 4219
    /**                                                                                                                // 4220
     * Sets a subset of the props.                                                                                     // 4221
     *                                                                                                                 // 4222
     * @param {object} partialProps Subset of the next props.                                                          // 4223
     * @param {?function} callback Called after props are updated.                                                     // 4224
     * @final                                                                                                          // 4225
     * @public                                                                                                         // 4226
     */                                                                                                                // 4227
    setProps: function(partialProps, callback) {                                                                       // 4228
      // Merge with `_pendingProps` if it exists, otherwise with existing props.                                       // 4229
      this.replaceProps(                                                                                               // 4230
        merge(this._pendingProps || this.props, partialProps),                                                         // 4231
        callback                                                                                                       // 4232
      );                                                                                                               // 4233
    },                                                                                                                 // 4234
                                                                                                                       // 4235
    /**                                                                                                                // 4236
     * Replaces all of the props.                                                                                      // 4237
     *                                                                                                                 // 4238
     * @param {object} props New props.                                                                                // 4239
     * @param {?function} callback Called after props are updated.                                                     // 4240
     * @final                                                                                                          // 4241
     * @public                                                                                                         // 4242
     */                                                                                                                // 4243
    replaceProps: function(props, callback) {                                                                          // 4244
      ("production" !== "development" ? invariant(                                                                     // 4245
        this.isMounted(),                                                                                              // 4246
        'replaceProps(...): Can only update a mounted component.'                                                      // 4247
      ) : invariant(this.isMounted()));                                                                                // 4248
      ("production" !== "development" ? invariant(                                                                     // 4249
        this._mountDepth === 0,                                                                                        // 4250
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +                                           // 4251
        'component with a parent. This is an anti-pattern since props will ' +                                         // 4252
        'get reactively updated when rendered. Instead, change the owner\'s ' +                                        // 4253
        '`render` method to pass the correct value as props to the component ' +                                       // 4254
        'where it is created.'                                                                                         // 4255
      ) : invariant(this._mountDepth === 0));                                                                          // 4256
      this._pendingProps = props;                                                                                      // 4257
      ReactUpdates.enqueueUpdate(this, callback);                                                                      // 4258
    },                                                                                                                 // 4259
                                                                                                                       // 4260
    /**                                                                                                                // 4261
     * Base constructor for all React components.                                                                      // 4262
     *                                                                                                                 // 4263
     * Subclasses that override this method should make sure to invoke                                                 // 4264
     * `ReactComponent.Mixin.construct.call(this, ...)`.                                                               // 4265
     *                                                                                                                 // 4266
     * @param {?object} initialProps                                                                                   // 4267
     * @param {*} children                                                                                             // 4268
     * @internal                                                                                                       // 4269
     */                                                                                                                // 4270
    construct: function(initialProps, children) {                                                                      // 4271
      this.props = initialProps || {};                                                                                 // 4272
      // Record the component responsible for creating this component.                                                 // 4273
      this._owner = ReactCurrentOwner.current;                                                                         // 4274
      // All components start unmounted.                                                                               // 4275
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;                                                             // 4276
                                                                                                                       // 4277
      this._pendingProps = null;                                                                                       // 4278
      this._pendingCallbacks = null;                                                                                   // 4279
                                                                                                                       // 4280
      // Unlike _pendingProps and _pendingCallbacks, we won't use null to                                              // 4281
      // indicate that nothing is pending because it's possible for a component                                        // 4282
      // to have a null owner. Instead, an owner change is pending when                                                // 4283
      // this._owner !== this._pendingOwner.                                                                           // 4284
      this._pendingOwner = this._owner;                                                                                // 4285
                                                                                                                       // 4286
      // Children can be more than one argument                                                                        // 4287
      var childrenLength = arguments.length - 1;                                                                       // 4288
      if (childrenLength === 1) {                                                                                      // 4289
        if ("production" !== "development") {                                                                          // 4290
          validateChildKeys(children);                                                                                 // 4291
        }                                                                                                              // 4292
        this.props.children = children;                                                                                // 4293
      } else if (childrenLength > 1) {                                                                                 // 4294
        var childArray = Array(childrenLength);                                                                        // 4295
        for (var i = 0; i < childrenLength; i++) {                                                                     // 4296
          if ("production" !== "development") {                                                                        // 4297
            validateChildKeys(arguments[i + 1]);                                                                       // 4298
          }                                                                                                            // 4299
          childArray[i] = arguments[i + 1];                                                                            // 4300
        }                                                                                                              // 4301
        this.props.children = childArray;                                                                              // 4302
      }                                                                                                                // 4303
    },                                                                                                                 // 4304
                                                                                                                       // 4305
    /**                                                                                                                // 4306
     * Initializes the component, renders markup, and registers event listeners.                                       // 4307
     *                                                                                                                 // 4308
     * NOTE: This does not insert any nodes into the DOM.                                                              // 4309
     *                                                                                                                 // 4310
     * Subclasses that override this method should make sure to invoke                                                 // 4311
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.                                                          // 4312
     *                                                                                                                 // 4313
     * @param {string} rootID DOM ID of the root node.                                                                 // 4314
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                  // 4315
     * @param {number} mountDepth number of components in the owner hierarchy.                                         // 4316
     * @return {?string} Rendered markup to be inserted into the DOM.                                                  // 4317
     * @internal                                                                                                       // 4318
     */                                                                                                                // 4319
    mountComponent: function(rootID, transaction, mountDepth) {                                                        // 4320
      ("production" !== "development" ? invariant(                                                                     // 4321
        !this.isMounted(),                                                                                             // 4322
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +                                           // 4323
        'Make sure to avoid storing components between renders or reusing a ' +                                        // 4324
        'single component instance in multiple places.',                                                               // 4325
        rootID                                                                                                         // 4326
      ) : invariant(!this.isMounted()));                                                                               // 4327
      var props = this.props;                                                                                          // 4328
      if (props.ref != null) {                                                                                         // 4329
        ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);                                                  // 4330
      }                                                                                                                // 4331
      this._rootNodeID = rootID;                                                                                       // 4332
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;                                                               // 4333
      this._mountDepth = mountDepth;                                                                                   // 4334
      // Effectively: return '';                                                                                       // 4335
    },                                                                                                                 // 4336
                                                                                                                       // 4337
    /**                                                                                                                // 4338
     * Releases any resources allocated by `mountComponent`.                                                           // 4339
     *                                                                                                                 // 4340
     * NOTE: This does not remove any nodes from the DOM.                                                              // 4341
     *                                                                                                                 // 4342
     * Subclasses that override this method should make sure to invoke                                                 // 4343
     * `ReactComponent.Mixin.unmountComponent.call(this)`.                                                             // 4344
     *                                                                                                                 // 4345
     * @internal                                                                                                       // 4346
     */                                                                                                                // 4347
    unmountComponent: function() {                                                                                     // 4348
      ("production" !== "development" ? invariant(                                                                     // 4349
        this.isMounted(),                                                                                              // 4350
        'unmountComponent(): Can only unmount a mounted component.'                                                    // 4351
      ) : invariant(this.isMounted()));                                                                                // 4352
      var props = this.props;                                                                                          // 4353
      if (props.ref != null) {                                                                                         // 4354
        ReactOwner.removeComponentAsRefFrom(this, props.ref, this._owner);                                             // 4355
      }                                                                                                                // 4356
      unmountIDFromEnvironment(this._rootNodeID);                                                                      // 4357
      this._rootNodeID = null;                                                                                         // 4358
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;                                                             // 4359
    },                                                                                                                 // 4360
                                                                                                                       // 4361
    /**                                                                                                                // 4362
     * Given a new instance of this component, updates the rendered DOM nodes                                          // 4363
     * as if that instance was rendered instead.                                                                       // 4364
     *                                                                                                                 // 4365
     * Subclasses that override this method should make sure to invoke                                                 // 4366
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.                                                        // 4367
     *                                                                                                                 // 4368
     * @param {object} nextComponent Next set of properties.                                                           // 4369
     * @param {ReactReconcileTransaction} transaction                                                                  // 4370
     * @internal                                                                                                       // 4371
     */                                                                                                                // 4372
    receiveComponent: function(nextComponent, transaction) {                                                           // 4373
      ("production" !== "development" ? invariant(                                                                     // 4374
        this.isMounted(),                                                                                              // 4375
        'receiveComponent(...): Can only update a mounted component.'                                                  // 4376
      ) : invariant(this.isMounted()));                                                                                // 4377
      this._pendingOwner = nextComponent._owner;                                                                       // 4378
      this._pendingProps = nextComponent.props;                                                                        // 4379
      this._performUpdateIfNecessary(transaction);                                                                     // 4380
    },                                                                                                                 // 4381
                                                                                                                       // 4382
    /**                                                                                                                // 4383
     * Call `_performUpdateIfNecessary` within a new transaction.                                                      // 4384
     *                                                                                                                 // 4385
     * @internal                                                                                                       // 4386
     */                                                                                                                // 4387
    performUpdateIfNecessary: function() {                                                                             // 4388
      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();                                          // 4389
      transaction.perform(this._performUpdateIfNecessary, this, transaction);                                          // 4390
      ReactComponent.ReactReconcileTransaction.release(transaction);                                                   // 4391
    },                                                                                                                 // 4392
                                                                                                                       // 4393
    /**                                                                                                                // 4394
     * If `_pendingProps` is set, update the component.                                                                // 4395
     *                                                                                                                 // 4396
     * @param {ReactReconcileTransaction} transaction                                                                  // 4397
     * @internal                                                                                                       // 4398
     */                                                                                                                // 4399
    _performUpdateIfNecessary: function(transaction) {                                                                 // 4400
      if (this._pendingProps == null) {                                                                                // 4401
        return;                                                                                                        // 4402
      }                                                                                                                // 4403
      var prevProps = this.props;                                                                                      // 4404
      var prevOwner = this._owner;                                                                                     // 4405
      this.props = this._pendingProps;                                                                                 // 4406
      this._owner = this._pendingOwner;                                                                                // 4407
      this._pendingProps = null;                                                                                       // 4408
      this.updateComponent(transaction, prevProps, prevOwner);                                                         // 4409
    },                                                                                                                 // 4410
                                                                                                                       // 4411
    /**                                                                                                                // 4412
     * Updates the component's currently mounted representation.                                                       // 4413
     *                                                                                                                 // 4414
     * @param {ReactReconcileTransaction} transaction                                                                  // 4415
     * @param {object} prevProps                                                                                       // 4416
     * @internal                                                                                                       // 4417
     */                                                                                                                // 4418
    updateComponent: function(transaction, prevProps, prevOwner) {                                                     // 4419
      var props = this.props;                                                                                          // 4420
      // If either the owner or a `ref` has changed, make sure the newest owner                                        // 4421
      // has stored a reference to `this`, and the previous owner (if different)                                       // 4422
      // has forgotten the reference to `this`.                                                                        // 4423
      if (this._owner !== prevOwner || props.ref !== prevProps.ref) {                                                  // 4424
        if (prevProps.ref != null) {                                                                                   // 4425
          ReactOwner.removeComponentAsRefFrom(                                                                         // 4426
            this, prevProps.ref, prevOwner                                                                             // 4427
          );                                                                                                           // 4428
        }                                                                                                              // 4429
        // Correct, even if the owner is the same, and only the ref has changed.                                       // 4430
        if (props.ref != null) {                                                                                       // 4431
          ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);                                                // 4432
        }                                                                                                              // 4433
      }                                                                                                                // 4434
    },                                                                                                                 // 4435
                                                                                                                       // 4436
    /**                                                                                                                // 4437
     * Mounts this component and inserts it into the DOM.                                                              // 4438
     *                                                                                                                 // 4439
     * @param {string} rootID DOM ID of the root node.                                                                 // 4440
     * @param {DOMElement} container DOM element to mount into.                                                        // 4441
     * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                // 4442
     * @final                                                                                                          // 4443
     * @internal                                                                                                       // 4444
     * @see {ReactMount.renderComponent}                                                                               // 4445
     */                                                                                                                // 4446
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {                                           // 4447
      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();                                          // 4448
      transaction.perform(                                                                                             // 4449
        this._mountComponentIntoNode,                                                                                  // 4450
        this,                                                                                                          // 4451
        rootID,                                                                                                        // 4452
        container,                                                                                                     // 4453
        transaction,                                                                                                   // 4454
        shouldReuseMarkup                                                                                              // 4455
      );                                                                                                               // 4456
      ReactComponent.ReactReconcileTransaction.release(transaction);                                                   // 4457
    },                                                                                                                 // 4458
                                                                                                                       // 4459
    /**                                                                                                                // 4460
     * @param {string} rootID DOM ID of the root node.                                                                 // 4461
     * @param {DOMElement} container DOM element to mount into.                                                        // 4462
     * @param {ReactReconcileTransaction} transaction                                                                  // 4463
     * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                // 4464
     * @final                                                                                                          // 4465
     * @private                                                                                                        // 4466
     */                                                                                                                // 4467
    _mountComponentIntoNode: function(                                                                                 // 4468
        rootID,                                                                                                        // 4469
        container,                                                                                                     // 4470
        transaction,                                                                                                   // 4471
        shouldReuseMarkup) {                                                                                           // 4472
      var markup = this.mountComponent(rootID, transaction, 0);                                                        // 4473
      mountImageIntoNode(markup, container, shouldReuseMarkup);                                                        // 4474
    },                                                                                                                 // 4475
                                                                                                                       // 4476
    /**                                                                                                                // 4477
     * Checks if this component is owned by the supplied `owner` component.                                            // 4478
     *                                                                                                                 // 4479
     * @param {ReactComponent} owner Component to check.                                                               // 4480
     * @return {boolean} True if `owners` owns this component.                                                         // 4481
     * @final                                                                                                          // 4482
     * @internal                                                                                                       // 4483
     */                                                                                                                // 4484
    isOwnedBy: function(owner) {                                                                                       // 4485
      return this._owner === owner;                                                                                    // 4486
    },                                                                                                                 // 4487
                                                                                                                       // 4488
    /**                                                                                                                // 4489
     * Gets another component, that shares the same owner as this one, by ref.                                         // 4490
     *                                                                                                                 // 4491
     * @param {string} ref of a sibling Component.                                                                     // 4492
     * @return {?ReactComponent} the actual sibling Component.                                                         // 4493
     * @final                                                                                                          // 4494
     * @internal                                                                                                       // 4495
     */                                                                                                                // 4496
    getSiblingByRef: function(ref) {                                                                                   // 4497
      var owner = this._owner;                                                                                         // 4498
      if (!owner || !owner.refs) {                                                                                     // 4499
        return null;                                                                                                   // 4500
      }                                                                                                                // 4501
      return owner.refs[ref];                                                                                          // 4502
    }                                                                                                                  // 4503
  }                                                                                                                    // 4504
};                                                                                                                     // 4505
                                                                                                                       // 4506
module.exports = ReactComponent;                                                                                       // 4507
                                                                                                                       // 4508
},{"./ReactCurrentOwner":31,"./ReactOwner":59,"./ReactUpdates":71,"./invariant":112,"./keyMirror":118,"./merge":121,"./monitorCodeUse":125}],28:[function(_dereq_,module,exports){
/**                                                                                                                    // 4510
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 4511
 *                                                                                                                     // 4512
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 4513
 * you may not use this file except in compliance with the License.                                                    // 4514
 * You may obtain a copy of the License at                                                                             // 4515
 *                                                                                                                     // 4516
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4517
 *                                                                                                                     // 4518
 * Unless required by applicable law or agreed to in writing, software                                                 // 4519
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 4520
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4521
 * See the License for the specific language governing permissions and                                                 // 4522
 * limitations under the License.                                                                                      // 4523
 *                                                                                                                     // 4524
 * @providesModule ReactComponentBrowserEnvironment                                                                    // 4525
 */                                                                                                                    // 4526
                                                                                                                       // 4527
/*jslint evil: true */                                                                                                 // 4528
                                                                                                                       // 4529
"use strict";                                                                                                          // 4530
                                                                                                                       // 4531
var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");                                                          // 4532
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");                                                            // 4533
var ReactMount = _dereq_("./ReactMount");                                                                              // 4534
var ReactPerf = _dereq_("./ReactPerf");                                                                                // 4535
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");                                                // 4536
                                                                                                                       // 4537
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");                                      // 4538
var invariant = _dereq_("./invariant");                                                                                // 4539
                                                                                                                       // 4540
                                                                                                                       // 4541
var ELEMENT_NODE_TYPE = 1;                                                                                             // 4542
var DOC_NODE_TYPE = 9;                                                                                                 // 4543
                                                                                                                       // 4544
                                                                                                                       // 4545
/**                                                                                                                    // 4546
 * Abstracts away all functionality of `ReactComponent` requires knowledge of                                          // 4547
 * the browser context.                                                                                                // 4548
 */                                                                                                                    // 4549
var ReactComponentBrowserEnvironment = {                                                                               // 4550
  ReactReconcileTransaction: ReactReconcileTransaction,                                                                // 4551
                                                                                                                       // 4552
  BackendIDOperations: ReactDOMIDOperations,                                                                           // 4553
                                                                                                                       // 4554
  /**                                                                                                                  // 4555
   * If a particular environment requires that some resources be cleaned up,                                           // 4556
   * specify this in the injected Mixin. In the DOM, we would likely want to                                           // 4557
   * purge any cached node ID lookups.                                                                                 // 4558
   *                                                                                                                   // 4559
   * @private                                                                                                          // 4560
   */                                                                                                                  // 4561
  unmountIDFromEnvironment: function(rootNodeID) {                                                                     // 4562
    ReactMount.purgeID(rootNodeID);                                                                                    // 4563
  },                                                                                                                   // 4564
                                                                                                                       // 4565
  /**                                                                                                                  // 4566
   * @param {string} markup Markup string to place into the DOM Element.                                               // 4567
   * @param {DOMElement} container DOM Element to insert markup into.                                                  // 4568
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the                                        // 4569
   * container if possible.                                                                                            // 4570
   */                                                                                                                  // 4571
  mountImageIntoNode: ReactPerf.measure(                                                                               // 4572
    'ReactComponentBrowserEnvironment',                                                                                // 4573
    'mountImageIntoNode',                                                                                              // 4574
    function(markup, container, shouldReuseMarkup) {                                                                   // 4575
      ("production" !== "development" ? invariant(                                                                     // 4576
        container && (                                                                                                 // 4577
          container.nodeType === ELEMENT_NODE_TYPE ||                                                                  // 4578
            container.nodeType === DOC_NODE_TYPE                                                                       // 4579
        ),                                                                                                             // 4580
        'mountComponentIntoNode(...): Target container is not valid.'                                                  // 4581
      ) : invariant(container && (                                                                                     // 4582
        container.nodeType === ELEMENT_NODE_TYPE ||                                                                    // 4583
          container.nodeType === DOC_NODE_TYPE                                                                         // 4584
      )));                                                                                                             // 4585
                                                                                                                       // 4586
      if (shouldReuseMarkup) {                                                                                         // 4587
        if (ReactMarkupChecksum.canReuseMarkup(                                                                        // 4588
          markup,                                                                                                      // 4589
          getReactRootElementInContainer(container))) {                                                                // 4590
          return;                                                                                                      // 4591
        } else {                                                                                                       // 4592
          ("production" !== "development" ? invariant(                                                                 // 4593
            container.nodeType !== DOC_NODE_TYPE,                                                                      // 4594
            'You\'re trying to render a component to the document using ' +                                            // 4595
            'server rendering but the checksum was invalid. This usually ' +                                           // 4596
            'means you rendered a different component type or props on ' +                                             // 4597
            'the client from the one on the server, or your render() ' +                                               // 4598
            'methods are impure. React cannot handle this case due to ' +                                              // 4599
            'cross-browser quirks by rendering at the document root. You ' +                                           // 4600
            'should look for environment dependent code in your components ' +                                         // 4601
            'and ensure the props are the same client and server side.'                                                // 4602
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));                                                        // 4603
                                                                                                                       // 4604
          if ("production" !== "development") {                                                                        // 4605
            console.warn(                                                                                              // 4606
              'React attempted to use reuse markup in a container but the ' +                                          // 4607
              'checksum was invalid. This generally means that you are ' +                                             // 4608
              'using server rendering and the markup generated on the ' +                                              // 4609
              'server was not what the client was expecting. React injected' +                                         // 4610
              'new markup to compensate which works but you have lost many ' +                                         // 4611
              'of the benefits of server rendering. Instead, figure out ' +                                            // 4612
              'why the markup being generated is different on the client ' +                                           // 4613
              'or server.'                                                                                             // 4614
            );                                                                                                         // 4615
          }                                                                                                            // 4616
        }                                                                                                              // 4617
      }                                                                                                                // 4618
                                                                                                                       // 4619
      ("production" !== "development" ? invariant(                                                                     // 4620
        container.nodeType !== DOC_NODE_TYPE,                                                                          // 4621
        'You\'re trying to render a component to the document but ' +                                                  // 4622
          'you didn\'t use server rendering. We can\'t do this ' +                                                     // 4623
          'without using server rendering due to cross-browser quirks. ' +                                             // 4624
          'See renderComponentToString() for server rendering.'                                                        // 4625
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));                                                            // 4626
                                                                                                                       // 4627
      container.innerHTML = markup;                                                                                    // 4628
    }                                                                                                                  // 4629
  )                                                                                                                    // 4630
};                                                                                                                     // 4631
                                                                                                                       // 4632
module.exports = ReactComponentBrowserEnvironment;                                                                     // 4633
                                                                                                                       // 4634
},{"./ReactDOMIDOperations":36,"./ReactMarkupChecksum":54,"./ReactMount":55,"./ReactPerf":60,"./ReactReconcileTransaction":66,"./getReactRootElementInContainer":107,"./invariant":112}],29:[function(_dereq_,module,exports){
/**                                                                                                                    // 4636
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 4637
 *                                                                                                                     // 4638
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 4639
 * you may not use this file except in compliance with the License.                                                    // 4640
 * You may obtain a copy of the License at                                                                             // 4641
 *                                                                                                                     // 4642
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4643
 *                                                                                                                     // 4644
 * Unless required by applicable law or agreed to in writing, software                                                 // 4645
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 4646
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4647
 * See the License for the specific language governing permissions and                                                 // 4648
 * limitations under the License.                                                                                      // 4649
 *                                                                                                                     // 4650
 * @providesModule ReactCompositeComponent                                                                             // 4651
 */                                                                                                                    // 4652
                                                                                                                       // 4653
"use strict";                                                                                                          // 4654
                                                                                                                       // 4655
var ReactComponent = _dereq_("./ReactComponent");                                                                      // 4656
var ReactContext = _dereq_("./ReactContext");                                                                          // 4657
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");                                                                // 4658
var ReactErrorUtils = _dereq_("./ReactErrorUtils");                                                                    // 4659
var ReactOwner = _dereq_("./ReactOwner");                                                                              // 4660
var ReactPerf = _dereq_("./ReactPerf");                                                                                // 4661
var ReactPropTransferer = _dereq_("./ReactPropTransferer");                                                            // 4662
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");                                                      // 4663
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");                                              // 4664
var ReactUpdates = _dereq_("./ReactUpdates");                                                                          // 4665
                                                                                                                       // 4666
var instantiateReactComponent = _dereq_("./instantiateReactComponent");                                                // 4667
var invariant = _dereq_("./invariant");                                                                                // 4668
var keyMirror = _dereq_("./keyMirror");                                                                                // 4669
var merge = _dereq_("./merge");                                                                                        // 4670
var mixInto = _dereq_("./mixInto");                                                                                    // 4671
var monitorCodeUse = _dereq_("./monitorCodeUse");                                                                      // 4672
var objMap = _dereq_("./objMap");                                                                                      // 4673
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");                                              // 4674
var warning = _dereq_("./warning");                                                                                    // 4675
                                                                                                                       // 4676
/**                                                                                                                    // 4677
 * Policies that describe methods in `ReactCompositeComponentInterface`.                                               // 4678
 */                                                                                                                    // 4679
var SpecPolicy = keyMirror({                                                                                           // 4680
  /**                                                                                                                  // 4681
   * These methods may be defined only once by the class specification or mixin.                                       // 4682
   */                                                                                                                  // 4683
  DEFINE_ONCE: null,                                                                                                   // 4684
  /**                                                                                                                  // 4685
   * These methods may be defined by both the class specification and mixins.                                          // 4686
   * Subsequent definitions will be chained. These methods must return void.                                           // 4687
   */                                                                                                                  // 4688
  DEFINE_MANY: null,                                                                                                   // 4689
  /**                                                                                                                  // 4690
   * These methods are overriding the base ReactCompositeComponent class.                                              // 4691
   */                                                                                                                  // 4692
  OVERRIDE_BASE: null,                                                                                                 // 4693
  /**                                                                                                                  // 4694
   * These methods are similar to DEFINE_MANY, except we assume they return                                            // 4695
   * objects. We try to merge the keys of the return values of all the mixed in                                        // 4696
   * functions. If there is a key conflict we throw.                                                                   // 4697
   */                                                                                                                  // 4698
  DEFINE_MANY_MERGED: null                                                                                             // 4699
});                                                                                                                    // 4700
                                                                                                                       // 4701
                                                                                                                       // 4702
var injectedMixins = [];                                                                                               // 4703
                                                                                                                       // 4704
/**                                                                                                                    // 4705
 * Composite components are higher-level components that compose other composite                                       // 4706
 * or native components.                                                                                               // 4707
 *                                                                                                                     // 4708
 * To create a new type of `ReactCompositeComponent`, pass a specification of                                          // 4709
 * your new class to `React.createClass`. The only requirement of your class                                           // 4710
 * specification is that you implement a `render` method.                                                              // 4711
 *                                                                                                                     // 4712
 *   var MyComponent = React.createClass({                                                                             // 4713
 *     render: function() {                                                                                            // 4714
 *       return <div>Hello World</div>;                                                                                // 4715
 *     }                                                                                                               // 4716
 *   });                                                                                                               // 4717
 *                                                                                                                     // 4718
 * The class specification supports a specific protocol of methods that have                                           // 4719
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for                                         // 4720
 * more the comprehensive protocol. Any other properties and methods in the                                            // 4721
 * class specification will available on the prototype.                                                                // 4722
 *                                                                                                                     // 4723
 * @interface ReactCompositeComponentInterface                                                                         // 4724
 * @internal                                                                                                           // 4725
 */                                                                                                                    // 4726
var ReactCompositeComponentInterface = {                                                                               // 4727
                                                                                                                       // 4728
  /**                                                                                                                  // 4729
   * An array of Mixin objects to include when defining your component.                                                // 4730
   *                                                                                                                   // 4731
   * @type {array}                                                                                                     // 4732
   * @optional                                                                                                         // 4733
   */                                                                                                                  // 4734
  mixins: SpecPolicy.DEFINE_MANY,                                                                                      // 4735
                                                                                                                       // 4736
  /**                                                                                                                  // 4737
   * An object containing properties and methods that should be defined on                                             // 4738
   * the component's constructor instead of its prototype (static methods).                                            // 4739
   *                                                                                                                   // 4740
   * @type {object}                                                                                                    // 4741
   * @optional                                                                                                         // 4742
   */                                                                                                                  // 4743
  statics: SpecPolicy.DEFINE_MANY,                                                                                     // 4744
                                                                                                                       // 4745
  /**                                                                                                                  // 4746
   * Definition of prop types for this component.                                                                      // 4747
   *                                                                                                                   // 4748
   * @type {object}                                                                                                    // 4749
   * @optional                                                                                                         // 4750
   */                                                                                                                  // 4751
  propTypes: SpecPolicy.DEFINE_MANY,                                                                                   // 4752
                                                                                                                       // 4753
  /**                                                                                                                  // 4754
   * Definition of context types for this component.                                                                   // 4755
   *                                                                                                                   // 4756
   * @type {object}                                                                                                    // 4757
   * @optional                                                                                                         // 4758
   */                                                                                                                  // 4759
  contextTypes: SpecPolicy.DEFINE_MANY,                                                                                // 4760
                                                                                                                       // 4761
  /**                                                                                                                  // 4762
   * Definition of context types this component sets for its children.                                                 // 4763
   *                                                                                                                   // 4764
   * @type {object}                                                                                                    // 4765
   * @optional                                                                                                         // 4766
   */                                                                                                                  // 4767
  childContextTypes: SpecPolicy.DEFINE_MANY,                                                                           // 4768
                                                                                                                       // 4769
  // ==== Definition methods ====                                                                                      // 4770
                                                                                                                       // 4771
  /**                                                                                                                  // 4772
   * Invoked when the component is mounted. Values in the mapping will be set on                                       // 4773
   * `this.props` if that prop is not specified (i.e. using an `in` check).                                            // 4774
   *                                                                                                                   // 4775
   * This method is invoked before `getInitialState` and therefore cannot rely                                         // 4776
   * on `this.state` or use `this.setState`.                                                                           // 4777
   *                                                                                                                   // 4778
   * @return {object}                                                                                                  // 4779
   * @optional                                                                                                         // 4780
   */                                                                                                                  // 4781
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 4782
                                                                                                                       // 4783
  /**                                                                                                                  // 4784
   * Invoked once before the component is mounted. The return value will be used                                       // 4785
   * as the initial value of `this.state`.                                                                             // 4786
   *                                                                                                                   // 4787
   *   getInitialState: function() {                                                                                   // 4788
   *     return {                                                                                                      // 4789
   *       isOn: false,                                                                                                // 4790
   *       fooBaz: new BazFoo()                                                                                        // 4791
   *     }                                                                                                             // 4792
   *   }                                                                                                               // 4793
   *                                                                                                                   // 4794
   * @return {object}                                                                                                  // 4795
   * @optional                                                                                                         // 4796
   */                                                                                                                  // 4797
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 4798
                                                                                                                       // 4799
  /**                                                                                                                  // 4800
   * @return {object}                                                                                                  // 4801
   * @optional                                                                                                         // 4802
   */                                                                                                                  // 4803
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 4804
                                                                                                                       // 4805
  /**                                                                                                                  // 4806
   * Uses props from `this.props` and state from `this.state` to render the                                            // 4807
   * structure of the component.                                                                                       // 4808
   *                                                                                                                   // 4809
   * No guarantees are made about when or how often this method is invoked, so                                         // 4810
   * it must not have side effects.                                                                                    // 4811
   *                                                                                                                   // 4812
   *   render: function() {                                                                                            // 4813
   *     var name = this.props.name;                                                                                   // 4814
   *     return <div>Hello, {name}!</div>;                                                                             // 4815
   *   }                                                                                                               // 4816
   *                                                                                                                   // 4817
   * @return {ReactComponent}                                                                                          // 4818
   * @nosideeffects                                                                                                    // 4819
   * @required                                                                                                         // 4820
   */                                                                                                                  // 4821
  render: SpecPolicy.DEFINE_ONCE,                                                                                      // 4822
                                                                                                                       // 4823
                                                                                                                       // 4824
                                                                                                                       // 4825
  // ==== Delegate methods ====                                                                                        // 4826
                                                                                                                       // 4827
  /**                                                                                                                  // 4828
   * Invoked when the component is initially created and about to be mounted.                                          // 4829
   * This may have side effects, but any external subscriptions or data created                                        // 4830
   * by this method must be cleaned up in `componentWillUnmount`.                                                      // 4831
   *                                                                                                                   // 4832
   * @optional                                                                                                         // 4833
   */                                                                                                                  // 4834
  componentWillMount: SpecPolicy.DEFINE_MANY,                                                                          // 4835
                                                                                                                       // 4836
  /**                                                                                                                  // 4837
   * Invoked when the component has been mounted and has a DOM representation.                                         // 4838
   * However, there is no guarantee that the DOM node is in the document.                                              // 4839
   *                                                                                                                   // 4840
   * Use this as an opportunity to operate on the DOM when the component has                                           // 4841
   * been mounted (initialized and rendered) for the first time.                                                       // 4842
   *                                                                                                                   // 4843
   * @param {DOMElement} rootNode DOM element representing the component.                                              // 4844
   * @optional                                                                                                         // 4845
   */                                                                                                                  // 4846
  componentDidMount: SpecPolicy.DEFINE_MANY,                                                                           // 4847
                                                                                                                       // 4848
  /**                                                                                                                  // 4849
   * Invoked before the component receives new props.                                                                  // 4850
   *                                                                                                                   // 4851
   * Use this as an opportunity to react to a prop transition by updating the                                          // 4852
   * state using `this.setState`. Current props are accessed via `this.props`.                                         // 4853
   *                                                                                                                   // 4854
   *   componentWillReceiveProps: function(nextProps, nextContext) {                                                   // 4855
   *     this.setState({                                                                                               // 4856
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount                                                 // 4857
   *     });                                                                                                           // 4858
   *   }                                                                                                               // 4859
   *                                                                                                                   // 4860
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop                                        // 4861
   * transition may cause a state change, but the opposite is not true. If you                                         // 4862
   * need it, you are probably looking for `componentWillUpdate`.                                                      // 4863
   *                                                                                                                   // 4864
   * @param {object} nextProps                                                                                         // 4865
   * @optional                                                                                                         // 4866
   */                                                                                                                  // 4867
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,                                                                   // 4868
                                                                                                                       // 4869
  /**                                                                                                                  // 4870
   * Invoked while deciding if the component should be updated as a result of                                          // 4871
   * receiving new props, state and/or context.                                                                        // 4872
   *                                                                                                                   // 4873
   * Use this as an opportunity to `return false` when you're certain that the                                         // 4874
   * transition to the new props/state/context will not require a component                                            // 4875
   * update.                                                                                                           // 4876
   *                                                                                                                   // 4877
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {                                            // 4878
   *     return !equal(nextProps, this.props) ||                                                                       // 4879
   *       !equal(nextState, this.state) ||                                                                            // 4880
   *       !equal(nextContext, this.context);                                                                          // 4881
   *   }                                                                                                               // 4882
   *                                                                                                                   // 4883
   * @param {object} nextProps                                                                                         // 4884
   * @param {?object} nextState                                                                                        // 4885
   * @param {?object} nextContext                                                                                      // 4886
   * @return {boolean} True if the component should update.                                                            // 4887
   * @optional                                                                                                         // 4888
   */                                                                                                                  // 4889
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,                                                                       // 4890
                                                                                                                       // 4891
  /**                                                                                                                  // 4892
   * Invoked when the component is about to update due to a transition from                                            // 4893
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`                                         // 4894
   * and `nextContext`.                                                                                                // 4895
   *                                                                                                                   // 4896
   * Use this as an opportunity to perform preparation before an update occurs.                                        // 4897
   *                                                                                                                   // 4898
   * NOTE: You **cannot** use `this.setState()` in this method.                                                        // 4899
   *                                                                                                                   // 4900
   * @param {object} nextProps                                                                                         // 4901
   * @param {?object} nextState                                                                                        // 4902
   * @param {?object} nextContext                                                                                      // 4903
   * @param {ReactReconcileTransaction} transaction                                                                    // 4904
   * @optional                                                                                                         // 4905
   */                                                                                                                  // 4906
  componentWillUpdate: SpecPolicy.DEFINE_MANY,                                                                         // 4907
                                                                                                                       // 4908
  /**                                                                                                                  // 4909
   * Invoked when the component's DOM representation has been updated.                                                 // 4910
   *                                                                                                                   // 4911
   * Use this as an opportunity to operate on the DOM when the component has                                           // 4912
   * been updated.                                                                                                     // 4913
   *                                                                                                                   // 4914
   * @param {object} prevProps                                                                                         // 4915
   * @param {?object} prevState                                                                                        // 4916
   * @param {?object} prevContext                                                                                      // 4917
   * @param {DOMElement} rootNode DOM element representing the component.                                              // 4918
   * @optional                                                                                                         // 4919
   */                                                                                                                  // 4920
  componentDidUpdate: SpecPolicy.DEFINE_MANY,                                                                          // 4921
                                                                                                                       // 4922
  /**                                                                                                                  // 4923
   * Invoked when the component is about to be removed from its parent and have                                        // 4924
   * its DOM representation destroyed.                                                                                 // 4925
   *                                                                                                                   // 4926
   * Use this as an opportunity to deallocate any external resources.                                                  // 4927
   *                                                                                                                   // 4928
   * NOTE: There is no `componentDidUnmount` since your component will have been                                       // 4929
   * destroyed by that point.                                                                                          // 4930
   *                                                                                                                   // 4931
   * @optional                                                                                                         // 4932
   */                                                                                                                  // 4933
  componentWillUnmount: SpecPolicy.DEFINE_MANY,                                                                        // 4934
                                                                                                                       // 4935
                                                                                                                       // 4936
                                                                                                                       // 4937
  // ==== Advanced methods ====                                                                                        // 4938
                                                                                                                       // 4939
  /**                                                                                                                  // 4940
   * Updates the component's currently mounted DOM representation.                                                     // 4941
   *                                                                                                                   // 4942
   * By default, this implements React's rendering and reconciliation algorithm.                                       // 4943
   * Sophisticated clients may wish to override this.                                                                  // 4944
   *                                                                                                                   // 4945
   * @param {ReactReconcileTransaction} transaction                                                                    // 4946
   * @internal                                                                                                         // 4947
   * @overridable                                                                                                      // 4948
   */                                                                                                                  // 4949
  updateComponent: SpecPolicy.OVERRIDE_BASE                                                                            // 4950
                                                                                                                       // 4951
};                                                                                                                     // 4952
                                                                                                                       // 4953
/**                                                                                                                    // 4954
 * Mapping from class specification keys to special processing functions.                                              // 4955
 *                                                                                                                     // 4956
 * Although these are declared like instance properties in the specification                                           // 4957
 * when defining classes using `React.createClass`, they are actually static                                           // 4958
 * and are accessible on the constructor instead of the prototype. Despite                                             // 4959
 * being static, they must be defined outside of the "statics" key under                                               // 4960
 * which all other static methods are defined.                                                                         // 4961
 */                                                                                                                    // 4962
var RESERVED_SPEC_KEYS = {                                                                                             // 4963
  displayName: function(ConvenienceConstructor, displayName) {                                                         // 4964
    ConvenienceConstructor.componentConstructor.displayName = displayName;                                             // 4965
  },                                                                                                                   // 4966
  mixins: function(ConvenienceConstructor, mixins) {                                                                   // 4967
    if (mixins) {                                                                                                      // 4968
      for (var i = 0; i < mixins.length; i++) {                                                                        // 4969
        mixSpecIntoComponent(ConvenienceConstructor, mixins[i]);                                                       // 4970
      }                                                                                                                // 4971
    }                                                                                                                  // 4972
  },                                                                                                                   // 4973
  childContextTypes: function(ConvenienceConstructor, childContextTypes) {                                             // 4974
    var Constructor = ConvenienceConstructor.componentConstructor;                                                     // 4975
    validateTypeDef(                                                                                                   // 4976
      Constructor,                                                                                                     // 4977
      childContextTypes,                                                                                               // 4978
      ReactPropTypeLocations.childContext                                                                              // 4979
    );                                                                                                                 // 4980
    Constructor.childContextTypes = merge(                                                                             // 4981
      Constructor.childContextTypes,                                                                                   // 4982
      childContextTypes                                                                                                // 4983
    );                                                                                                                 // 4984
  },                                                                                                                   // 4985
  contextTypes: function(ConvenienceConstructor, contextTypes) {                                                       // 4986
    var Constructor = ConvenienceConstructor.componentConstructor;                                                     // 4987
    validateTypeDef(                                                                                                   // 4988
      Constructor,                                                                                                     // 4989
      contextTypes,                                                                                                    // 4990
      ReactPropTypeLocations.context                                                                                   // 4991
    );                                                                                                                 // 4992
    Constructor.contextTypes = merge(Constructor.contextTypes, contextTypes);                                          // 4993
  },                                                                                                                   // 4994
  propTypes: function(ConvenienceConstructor, propTypes) {                                                             // 4995
    var Constructor = ConvenienceConstructor.componentConstructor;                                                     // 4996
    validateTypeDef(                                                                                                   // 4997
      Constructor,                                                                                                     // 4998
      propTypes,                                                                                                       // 4999
      ReactPropTypeLocations.prop                                                                                      // 5000
    );                                                                                                                 // 5001
    Constructor.propTypes = merge(Constructor.propTypes, propTypes);                                                   // 5002
  },                                                                                                                   // 5003
  statics: function(ConvenienceConstructor, statics) {                                                                 // 5004
    mixStaticSpecIntoComponent(ConvenienceConstructor, statics);                                                       // 5005
  }                                                                                                                    // 5006
};                                                                                                                     // 5007
                                                                                                                       // 5008
function validateTypeDef(Constructor, typeDef, location) {                                                             // 5009
  for (var propName in typeDef) {                                                                                      // 5010
    if (typeDef.hasOwnProperty(propName)) {                                                                            // 5011
      ("production" !== "development" ? invariant(                                                                     // 5012
        typeof typeDef[propName] == 'function',                                                                        // 5013
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +                                          // 5014
        'React.PropTypes.',                                                                                            // 5015
        Constructor.displayName || 'ReactCompositeComponent',                                                          // 5016
        ReactPropTypeLocationNames[location],                                                                          // 5017
        propName                                                                                                       // 5018
      ) : invariant(typeof typeDef[propName] == 'function'));                                                          // 5019
    }                                                                                                                  // 5020
  }                                                                                                                    // 5021
}                                                                                                                      // 5022
                                                                                                                       // 5023
function validateMethodOverride(proto, name) {                                                                         // 5024
  var specPolicy = ReactCompositeComponentInterface[name];                                                             // 5025
                                                                                                                       // 5026
  // Disallow overriding of base class methods unless explicitly allowed.                                              // 5027
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {                                                             // 5028
    ("production" !== "development" ? invariant(                                                                       // 5029
      specPolicy === SpecPolicy.OVERRIDE_BASE,                                                                         // 5030
      'ReactCompositeComponentInterface: You are attempting to override ' +                                            // 5031
      '`%s` from your class specification. Ensure that your method names ' +                                           // 5032
      'do not overlap with React methods.',                                                                            // 5033
      name                                                                                                             // 5034
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));                                                           // 5035
  }                                                                                                                    // 5036
                                                                                                                       // 5037
  // Disallow defining methods more than once unless explicitly allowed.                                               // 5038
  if (proto.hasOwnProperty(name)) {                                                                                    // 5039
    ("production" !== "development" ? invariant(                                                                       // 5040
      specPolicy === SpecPolicy.DEFINE_MANY ||                                                                         // 5041
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,                                                                    // 5042
      'ReactCompositeComponentInterface: You are attempting to define ' +                                              // 5043
      '`%s` on your component more than once. This conflict may be due ' +                                             // 5044
      'to a mixin.',                                                                                                   // 5045
      name                                                                                                             // 5046
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||                                                             // 5047
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));                                                                    // 5048
  }                                                                                                                    // 5049
}                                                                                                                      // 5050
                                                                                                                       // 5051
function validateLifeCycleOnReplaceState(instance) {                                                                   // 5052
  var compositeLifeCycleState = instance._compositeLifeCycleState;                                                     // 5053
  ("production" !== "development" ? invariant(                                                                         // 5054
    instance.isMounted() ||                                                                                            // 5055
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,                                                         // 5056
    'replaceState(...): Can only update a mounted or mounting component.'                                              // 5057
  ) : invariant(instance.isMounted() ||                                                                                // 5058
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));                                                         // 5059
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE,          // 5060
    'replaceState(...): Cannot update during an existing state transition ' +                                          // 5061
    '(such as within `render`). This could potentially cause an infinite ' +                                           // 5062
    'loop so it is forbidden.'                                                                                         // 5063
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE));                                      // 5064
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,               // 5065
    'replaceState(...): Cannot update while unmounting component. This ' +                                             // 5066
    'usually means you called setState() on an unmounted component.'                                                   // 5067
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));                                           // 5068
}                                                                                                                      // 5069
                                                                                                                       // 5070
/**                                                                                                                    // 5071
 * Custom version of `mixInto` which handles policy validation and reserved                                            // 5072
 * specification keys when building `ReactCompositeComponent` classses.                                                // 5073
 */                                                                                                                    // 5074
function mixSpecIntoComponent(ConvenienceConstructor, spec) {                                                          // 5075
  ("production" !== "development" ? invariant(                                                                         // 5076
    !isValidClass(spec),                                                                                               // 5077
    'ReactCompositeComponent: You\'re attempting to ' +                                                                // 5078
    'use a component class as a mixin. Instead, just use a regular object.'                                            // 5079
  ) : invariant(!isValidClass(spec)));                                                                                 // 5080
  ("production" !== "development" ? invariant(                                                                         // 5081
    !ReactComponent.isValidComponent(spec),                                                                            // 5082
    'ReactCompositeComponent: You\'re attempting to ' +                                                                // 5083
    'use a component as a mixin. Instead, just use a regular object.'                                                  // 5084
  ) : invariant(!ReactComponent.isValidComponent(spec)));                                                              // 5085
                                                                                                                       // 5086
  var Constructor = ConvenienceConstructor.componentConstructor;                                                       // 5087
  var proto = Constructor.prototype;                                                                                   // 5088
  for (var name in spec) {                                                                                             // 5089
    var property = spec[name];                                                                                         // 5090
    if (!spec.hasOwnProperty(name)) {                                                                                  // 5091
      continue;                                                                                                        // 5092
    }                                                                                                                  // 5093
                                                                                                                       // 5094
    validateMethodOverride(proto, name);                                                                               // 5095
                                                                                                                       // 5096
    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {                                                                     // 5097
      RESERVED_SPEC_KEYS[name](ConvenienceConstructor, property);                                                      // 5098
    } else {                                                                                                           // 5099
      // Setup methods on prototype:                                                                                   // 5100
      // The following member methods should not be automatically bound:                                               // 5101
      // 1. Expected ReactCompositeComponent methods (in the "interface").                                             // 5102
      // 2. Overridden methods (that were mixed in).                                                                   // 5103
      var isCompositeComponentMethod = name in ReactCompositeComponentInterface;                                       // 5104
      var isInherited = name in proto;                                                                                 // 5105
      var markedDontBind = property && property.__reactDontBind;                                                       // 5106
      var isFunction = typeof property === 'function';                                                                 // 5107
      var shouldAutoBind =                                                                                             // 5108
        isFunction &&                                                                                                  // 5109
        !isCompositeComponentMethod &&                                                                                 // 5110
        !isInherited &&                                                                                                // 5111
        !markedDontBind;                                                                                               // 5112
                                                                                                                       // 5113
      if (shouldAutoBind) {                                                                                            // 5114
        if (!proto.__reactAutoBindMap) {                                                                               // 5115
          proto.__reactAutoBindMap = {};                                                                               // 5116
        }                                                                                                              // 5117
        proto.__reactAutoBindMap[name] = property;                                                                     // 5118
        proto[name] = property;                                                                                        // 5119
      } else {                                                                                                         // 5120
        if (isInherited) {                                                                                             // 5121
          // For methods which are defined more than once, call the existing                                           // 5122
          // methods before calling the new property.                                                                  // 5123
          if (ReactCompositeComponentInterface[name] ===                                                               // 5124
              SpecPolicy.DEFINE_MANY_MERGED) {                                                                         // 5125
            proto[name] = createMergedResultFunction(proto[name], property);                                           // 5126
          } else {                                                                                                     // 5127
            proto[name] = createChainedFunction(proto[name], property);                                                // 5128
          }                                                                                                            // 5129
        } else {                                                                                                       // 5130
          proto[name] = property;                                                                                      // 5131
        }                                                                                                              // 5132
      }                                                                                                                // 5133
    }                                                                                                                  // 5134
  }                                                                                                                    // 5135
}                                                                                                                      // 5136
                                                                                                                       // 5137
function mixStaticSpecIntoComponent(ConvenienceConstructor, statics) {                                                 // 5138
  if (!statics) {                                                                                                      // 5139
    return;                                                                                                            // 5140
  }                                                                                                                    // 5141
  for (var name in statics) {                                                                                          // 5142
    var property = statics[name];                                                                                      // 5143
    if (!statics.hasOwnProperty(name)) {                                                                               // 5144
      return;                                                                                                          // 5145
    }                                                                                                                  // 5146
                                                                                                                       // 5147
    var isInherited = name in ConvenienceConstructor;                                                                  // 5148
    var result = property;                                                                                             // 5149
    if (isInherited) {                                                                                                 // 5150
      var existingProperty = ConvenienceConstructor[name];                                                             // 5151
      var existingType = typeof existingProperty;                                                                      // 5152
      var propertyType = typeof property;                                                                              // 5153
      ("production" !== "development" ? invariant(                                                                     // 5154
        existingType === 'function' && propertyType === 'function',                                                    // 5155
        'ReactCompositeComponent: You are attempting to define ' +                                                     // 5156
        '`%s` on your component more than once, but that is only supported ' +                                         // 5157
        'for functions, which are chained together. This conflict may be ' +                                           // 5158
        'due to a mixin.',                                                                                             // 5159
        name                                                                                                           // 5160
      ) : invariant(existingType === 'function' && propertyType === 'function'));                                      // 5161
      result = createChainedFunction(existingProperty, property);                                                      // 5162
    }                                                                                                                  // 5163
    ConvenienceConstructor[name] = result;                                                                             // 5164
    ConvenienceConstructor.componentConstructor[name] = result;                                                        // 5165
  }                                                                                                                    // 5166
}                                                                                                                      // 5167
                                                                                                                       // 5168
/**                                                                                                                    // 5169
 * Merge two objects, but throw if both contain the same key.                                                          // 5170
 *                                                                                                                     // 5171
 * @param {object} one The first object, which is mutated.                                                             // 5172
 * @param {object} two The second object                                                                               // 5173
 * @return {object} one after it has been mutated to contain everything in two.                                        // 5174
 */                                                                                                                    // 5175
function mergeObjectsWithNoDuplicateKeys(one, two) {                                                                   // 5176
  ("production" !== "development" ? invariant(                                                                         // 5177
    one && two && typeof one === 'object' && typeof two === 'object',                                                  // 5178
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'                                                      // 5179
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));                                    // 5180
                                                                                                                       // 5181
  objMap(two, function(value, key) {                                                                                   // 5182
    ("production" !== "development" ? invariant(                                                                       // 5183
      one[key] === undefined,                                                                                          // 5184
      'mergeObjectsWithNoDuplicateKeys(): ' +                                                                          // 5185
      'Tried to merge two objects with the same key: %s',                                                              // 5186
      key                                                                                                              // 5187
    ) : invariant(one[key] === undefined));                                                                            // 5188
    one[key] = value;                                                                                                  // 5189
  });                                                                                                                  // 5190
  return one;                                                                                                          // 5191
}                                                                                                                      // 5192
                                                                                                                       // 5193
/**                                                                                                                    // 5194
 * Creates a function that invokes two functions and merges their return values.                                       // 5195
 *                                                                                                                     // 5196
 * @param {function} one Function to invoke first.                                                                     // 5197
 * @param {function} two Function to invoke second.                                                                    // 5198
 * @return {function} Function that invokes the two argument functions.                                                // 5199
 * @private                                                                                                            // 5200
 */                                                                                                                    // 5201
function createMergedResultFunction(one, two) {                                                                        // 5202
  return function mergedResult() {                                                                                     // 5203
    var a = one.apply(this, arguments);                                                                                // 5204
    var b = two.apply(this, arguments);                                                                                // 5205
    if (a == null) {                                                                                                   // 5206
      return b;                                                                                                        // 5207
    } else if (b == null) {                                                                                            // 5208
      return a;                                                                                                        // 5209
    }                                                                                                                  // 5210
    return mergeObjectsWithNoDuplicateKeys(a, b);                                                                      // 5211
  };                                                                                                                   // 5212
}                                                                                                                      // 5213
                                                                                                                       // 5214
/**                                                                                                                    // 5215
 * Creates a function that invokes two functions and ignores their return vales.                                       // 5216
 *                                                                                                                     // 5217
 * @param {function} one Function to invoke first.                                                                     // 5218
 * @param {function} two Function to invoke second.                                                                    // 5219
 * @return {function} Function that invokes the two argument functions.                                                // 5220
 * @private                                                                                                            // 5221
 */                                                                                                                    // 5222
function createChainedFunction(one, two) {                                                                             // 5223
  return function chainedFunction() {                                                                                  // 5224
    one.apply(this, arguments);                                                                                        // 5225
    two.apply(this, arguments);                                                                                        // 5226
  };                                                                                                                   // 5227
}                                                                                                                      // 5228
                                                                                                                       // 5229
if ("production" !== "development") {                                                                                  // 5230
                                                                                                                       // 5231
  var unmountedPropertyWhitelist = {                                                                                   // 5232
    constructor: true,                                                                                                 // 5233
    construct: true,                                                                                                   // 5234
    isOwnedBy: true, // should be deprecated but can have code mod (internal)                                          // 5235
    type: true,                                                                                                        // 5236
    props: true,                                                                                                       // 5237
    // currently private but belong on the descriptor and are valid for use                                            // 5238
    // inside the framework:                                                                                           // 5239
    __keyValidated__: true,                                                                                            // 5240
    _owner: true,                                                                                                      // 5241
    _currentContext: true                                                                                              // 5242
  };                                                                                                                   // 5243
                                                                                                                       // 5244
  var componentInstanceProperties = {                                                                                  // 5245
    __keyValidated__: true,                                                                                            // 5246
    __keySetters: true,                                                                                                // 5247
    _compositeLifeCycleState: true,                                                                                    // 5248
    _currentContext: true,                                                                                             // 5249
    _defaultProps: true,                                                                                               // 5250
    _instance: true,                                                                                                   // 5251
    _lifeCycleState: true,                                                                                             // 5252
    _mountDepth: true,                                                                                                 // 5253
    _owner: true,                                                                                                      // 5254
    _pendingCallbacks: true,                                                                                           // 5255
    _pendingContext: true,                                                                                             // 5256
    _pendingForceUpdate: true,                                                                                         // 5257
    _pendingOwner: true,                                                                                               // 5258
    _pendingProps: true,                                                                                               // 5259
    _pendingState: true,                                                                                               // 5260
    _renderedComponent: true,                                                                                          // 5261
    _rootNodeID: true,                                                                                                 // 5262
    context: true,                                                                                                     // 5263
    props: true,                                                                                                       // 5264
    refs: true,                                                                                                        // 5265
    state: true,                                                                                                       // 5266
                                                                                                                       // 5267
    // These are known instance properties coming from other sources                                                   // 5268
    _pendingQueries: true,                                                                                             // 5269
    _queryPropListeners: true,                                                                                         // 5270
    queryParams: true                                                                                                  // 5271
                                                                                                                       // 5272
  };                                                                                                                   // 5273
                                                                                                                       // 5274
  var hasWarnedOnComponentType = {};                                                                                   // 5275
                                                                                                                       // 5276
  var warningStackCounter = 0;                                                                                         // 5277
                                                                                                                       // 5278
  var issueMembraneWarning = function(instance, key) {                                                                 // 5279
    var isWhitelisted = unmountedPropertyWhitelist.hasOwnProperty(key);                                                // 5280
    if (warningStackCounter > 0 || isWhitelisted) {                                                                    // 5281
      return;                                                                                                          // 5282
    }                                                                                                                  // 5283
    var name = instance.constructor.displayName || 'Unknown';                                                          // 5284
    var owner = ReactCurrentOwner.current;                                                                             // 5285
    var ownerName = (owner && owner.constructor.displayName) || 'Unknown';                                             // 5286
    var warningKey = key + '|' + name + '|' + ownerName;                                                               // 5287
    if (hasWarnedOnComponentType.hasOwnProperty(warningKey)) {                                                         // 5288
      // We have already warned for this combination. Skip it this time.                                               // 5289
      return;                                                                                                          // 5290
    }                                                                                                                  // 5291
    hasWarnedOnComponentType[warningKey] = true;                                                                       // 5292
                                                                                                                       // 5293
    var context = owner ? ' in ' + ownerName + '.' : ' at the top level.';                                             // 5294
    var staticMethodExample = '<' + name + ' />.type.' + key + '(...)';                                                // 5295
                                                                                                                       // 5296
    monitorCodeUse('react_descriptor_property_access', { component: name });                                           // 5297
    console.warn(                                                                                                      // 5298
      'Invalid access to component property "' + key + '" on ' + name +                                                // 5299
      context + ' See http://fb.me/react-warning-descriptors .' +                                                      // 5300
      ' Use a static method instead: ' + staticMethodExample                                                           // 5301
    );                                                                                                                 // 5302
  };                                                                                                                   // 5303
                                                                                                                       // 5304
  var wrapInMembraneFunction = function(fn, thisBinding) {                                                             // 5305
    if (fn.__reactMembraneFunction && fn.__reactMembraneSelf === thisBinding) {                                        // 5306
      return fn.__reactMembraneFunction;                                                                               // 5307
    }                                                                                                                  // 5308
    return fn.__reactMembraneFunction = function() {                                                                   // 5309
      /**                                                                                                              // 5310
       * By getting this function, you've already received a warning. The                                              // 5311
       * internals of this function will likely cause more warnings. To avoid                                          // 5312
       * Spamming too much we disable any warning triggered inside of this                                             // 5313
       * stack.                                                                                                        // 5314
       */                                                                                                              // 5315
      warningStackCounter++;                                                                                           // 5316
      try {                                                                                                            // 5317
        // If the this binding is unchanged, we defer to the real component.                                           // 5318
        // This is important to keep some referential integrity in the                                                 // 5319
        // internals. E.g. owner equality check.                                                                       // 5320
        var self = this === thisBinding ? this.__realComponentInstance : this;                                         // 5321
        return fn.apply(self, arguments);                                                                              // 5322
      } finally {                                                                                                      // 5323
        warningStackCounter--;                                                                                         // 5324
      }                                                                                                                // 5325
    };                                                                                                                 // 5326
  };                                                                                                                   // 5327
                                                                                                                       // 5328
  var defineMembraneProperty = function(membrane, prototype, key) {                                                    // 5329
    Object.defineProperty(membrane, key, {                                                                             // 5330
                                                                                                                       // 5331
      configurable: false,                                                                                             // 5332
      enumerable: true,                                                                                                // 5333
                                                                                                                       // 5334
      get: function() {                                                                                                // 5335
        if (this === membrane) {                                                                                       // 5336
          // We're allowed to access the prototype directly.                                                           // 5337
          return prototype[key];                                                                                       // 5338
        }                                                                                                              // 5339
        issueMembraneWarning(this, key);                                                                               // 5340
                                                                                                                       // 5341
        var realValue = this.__realComponentInstance[key];                                                             // 5342
        // If the real value is a function, we need to provide a wrapper that                                          // 5343
        // disables nested warnings. The properties type and constructors are                                          // 5344
        // expected to the be constructors and therefore is often use with an                                          // 5345
        // equality check and we shouldn't try to rebind those.                                                        // 5346
        if (typeof realValue === 'function' &&                                                                         // 5347
            key !== 'type' &&                                                                                          // 5348
            key !== 'constructor') {                                                                                   // 5349
          return wrapInMembraneFunction(realValue, this);                                                              // 5350
        }                                                                                                              // 5351
        return realValue;                                                                                              // 5352
      },                                                                                                               // 5353
                                                                                                                       // 5354
      set: function(value) {                                                                                           // 5355
        if (this === membrane) {                                                                                       // 5356
          // We're allowed to set a value on the prototype directly.                                                   // 5357
          prototype[key] = value;                                                                                      // 5358
          return;                                                                                                      // 5359
        }                                                                                                              // 5360
        issueMembraneWarning(this, key);                                                                               // 5361
        this.__realComponentInstance[key] = value;                                                                     // 5362
      }                                                                                                                // 5363
                                                                                                                       // 5364
    });                                                                                                                // 5365
  };                                                                                                                   // 5366
                                                                                                                       // 5367
  /**                                                                                                                  // 5368
   * Creates a membrane prototype which wraps the original prototype. If any                                           // 5369
   * property is accessed in an unmounted state, a warning is issued.                                                  // 5370
   *                                                                                                                   // 5371
   * @param {object} prototype Original prototype.                                                                     // 5372
   * @return {object} The membrane prototype.                                                                          // 5373
   * @private                                                                                                          // 5374
   */                                                                                                                  // 5375
  var createMountWarningMembrane = function(prototype) {                                                               // 5376
    var membrane = {};                                                                                                 // 5377
    var key;                                                                                                           // 5378
    for (key in prototype) {                                                                                           // 5379
      defineMembraneProperty(membrane, prototype, key);                                                                // 5380
    }                                                                                                                  // 5381
    // These are properties that goes into the instance but not the prototype.                                         // 5382
    // We can create the membrane on the prototype even though this will                                               // 5383
    // result in a faulty hasOwnProperty check it's better perf.                                                       // 5384
    for (key in componentInstanceProperties) {                                                                         // 5385
      if (componentInstanceProperties.hasOwnProperty(key) &&                                                           // 5386
          !(key in prototype)) {                                                                                       // 5387
        defineMembraneProperty(membrane, prototype, key);                                                              // 5388
      }                                                                                                                // 5389
    }                                                                                                                  // 5390
    return membrane;                                                                                                   // 5391
  };                                                                                                                   // 5392
                                                                                                                       // 5393
  /**                                                                                                                  // 5394
   * Creates a membrane constructor which wraps the component that gets mounted.                                       // 5395
   *                                                                                                                   // 5396
   * @param {function} constructor Original constructor.                                                               // 5397
   * @return {function} The membrane constructor.                                                                      // 5398
   * @private                                                                                                          // 5399
   */                                                                                                                  // 5400
  var createDescriptorProxy = function(constructor) {                                                                  // 5401
    try {                                                                                                              // 5402
      var ProxyConstructor = function() {                                                                              // 5403
        this.__realComponentInstance = new constructor();                                                              // 5404
                                                                                                                       // 5405
        // We can only safely pass through known instance variables. Unknown                                           // 5406
        // expandos are not safe. Use the real mounted instance to avoid this                                          // 5407
        // problem if it blows something up.                                                                           // 5408
        Object.freeze(this);                                                                                           // 5409
      };                                                                                                               // 5410
                                                                                                                       // 5411
      ProxyConstructor.prototype = createMountWarningMembrane(                                                         // 5412
        constructor.prototype                                                                                          // 5413
      );                                                                                                               // 5414
                                                                                                                       // 5415
      return ProxyConstructor;                                                                                         // 5416
    } catch(x) {                                                                                                       // 5417
      // In IE8 define property will fail on non-DOM objects. If anything in                                           // 5418
      // the membrane creation fails, we'll bail out and just use the plain                                            // 5419
      // constructor without warnings.                                                                                 // 5420
      return constructor;                                                                                              // 5421
    }                                                                                                                  // 5422
  };                                                                                                                   // 5423
                                                                                                                       // 5424
}                                                                                                                      // 5425
                                                                                                                       // 5426
/**                                                                                                                    // 5427
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in                                                // 5428
 * `this._compositeLifeCycleState` (which can be null).                                                                // 5429
 *                                                                                                                     // 5430
 * This is different from the life cycle state maintained by `ReactComponent` in                                       // 5431
 * `this._lifeCycleState`. The following diagram shows how the states overlap in                                       // 5432
 * time. There are times when the CompositeLifeCycle is null - at those times it                                       // 5433
 * is only meaningful to look at ComponentLifeCycle alone.                                                             // 5434
 *                                                                                                                     // 5435
 * Top Row: ReactComponent.ComponentLifeCycle                                                                          // 5436
 * Low Row: ReactComponent.CompositeLifeCycle                                                                          // 5437
 *                                                                                                                     // 5438
 * +-------+------------------------------------------------------+--------+                                           // 5439
 * |  UN   |                    MOUNTED                           |   UN   |                                           // 5440
 * |MOUNTED|                                                      | MOUNTED|                                           // 5441
 * +-------+------------------------------------------------------+--------+                                           // 5442
 * |       ^--------+   +------+   +------+   +------+   +--------^        |                                           // 5443
 * |       |        |   |      |   |      |   |      |   |        |        |                                           // 5444
 * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |                                           // 5445
 * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |                                           // 5446
 * |       |        |   |      |   |      |   |      |   |        |        |                                           // 5447
 * |       |        |   |      |   |      |   |      |   |        |        |                                           // 5448
 * |       +--------+   +------+   +------+   +------+   +--------+        |                                           // 5449
 * |       |                                                      |        |                                           // 5450
 * +-------+------------------------------------------------------+--------+                                           // 5451
 */                                                                                                                    // 5452
var CompositeLifeCycle = keyMirror({                                                                                   // 5453
  /**                                                                                                                  // 5454
   * Components in the process of being mounted respond to state changes                                               // 5455
   * differently.                                                                                                      // 5456
   */                                                                                                                  // 5457
  MOUNTING: null,                                                                                                      // 5458
  /**                                                                                                                  // 5459
   * Components in the process of being unmounted are guarded against state                                            // 5460
   * changes.                                                                                                          // 5461
   */                                                                                                                  // 5462
  UNMOUNTING: null,                                                                                                    // 5463
  /**                                                                                                                  // 5464
   * Components that are mounted and receiving new props respond to state                                              // 5465
   * changes differently.                                                                                              // 5466
   */                                                                                                                  // 5467
  RECEIVING_PROPS: null,                                                                                               // 5468
  /**                                                                                                                  // 5469
   * Components that are mounted and receiving new state are guarded against                                           // 5470
   * additional state changes.                                                                                         // 5471
   */                                                                                                                  // 5472
  RECEIVING_STATE: null                                                                                                // 5473
});                                                                                                                    // 5474
                                                                                                                       // 5475
/**                                                                                                                    // 5476
 * @lends {ReactCompositeComponent.prototype}                                                                          // 5477
 */                                                                                                                    // 5478
var ReactCompositeComponentMixin = {                                                                                   // 5479
                                                                                                                       // 5480
  /**                                                                                                                  // 5481
   * Base constructor for all composite component.                                                                     // 5482
   *                                                                                                                   // 5483
   * @param {?object} initialProps                                                                                     // 5484
   * @param {*} children                                                                                               // 5485
   * @final                                                                                                            // 5486
   * @internal                                                                                                         // 5487
   */                                                                                                                  // 5488
  construct: function(initialProps, children) {                                                                        // 5489
    // Children can be either an array or more than one argument                                                       // 5490
    ReactComponent.Mixin.construct.apply(this, arguments);                                                             // 5491
    ReactOwner.Mixin.construct.apply(this, arguments);                                                                 // 5492
                                                                                                                       // 5493
    this.state = null;                                                                                                 // 5494
    this._pendingState = null;                                                                                         // 5495
                                                                                                                       // 5496
    this.context = null;                                                                                               // 5497
    this._currentContext = ReactContext.current;                                                                       // 5498
    this._pendingContext = null;                                                                                       // 5499
                                                                                                                       // 5500
    // The descriptor that was used to instantiate this component. Will be                                             // 5501
    // set by the instantiator instead of the constructor since this                                                   // 5502
    // constructor is currently used by both instances and descriptors.                                                // 5503
    this._descriptor = null;                                                                                           // 5504
                                                                                                                       // 5505
    this._compositeLifeCycleState = null;                                                                              // 5506
  },                                                                                                                   // 5507
                                                                                                                       // 5508
  /**                                                                                                                  // 5509
   * Components in the intermediate state now has cyclic references. To avoid                                          // 5510
   * breaking JSON serialization we expose a custom JSON format.                                                       // 5511
   * @return {object} JSON compatible representation.                                                                  // 5512
   * @internal                                                                                                         // 5513
   * @final                                                                                                            // 5514
   */                                                                                                                  // 5515
  toJSON: function() {                                                                                                 // 5516
    return { type: this.type, props: this.props };                                                                     // 5517
  },                                                                                                                   // 5518
                                                                                                                       // 5519
  /**                                                                                                                  // 5520
   * Checks whether or not this composite component is mounted.                                                        // 5521
   * @return {boolean} True if mounted, false otherwise.                                                               // 5522
   * @protected                                                                                                        // 5523
   * @final                                                                                                            // 5524
   */                                                                                                                  // 5525
  isMounted: function() {                                                                                              // 5526
    return ReactComponent.Mixin.isMounted.call(this) &&                                                                // 5527
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;                                                   // 5528
  },                                                                                                                   // 5529
                                                                                                                       // 5530
  /**                                                                                                                  // 5531
   * Initializes the component, renders markup, and registers event listeners.                                         // 5532
   *                                                                                                                   // 5533
   * @param {string} rootID DOM ID of the root node.                                                                   // 5534
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 5535
   * @param {number} mountDepth number of components in the owner hierarchy                                            // 5536
   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 5537
   * @final                                                                                                            // 5538
   * @internal                                                                                                         // 5539
   */                                                                                                                  // 5540
  mountComponent: ReactPerf.measure(                                                                                   // 5541
    'ReactCompositeComponent',                                                                                         // 5542
    'mountComponent',                                                                                                  // 5543
    function(rootID, transaction, mountDepth) {                                                                        // 5544
      ReactComponent.Mixin.mountComponent.call(                                                                        // 5545
        this,                                                                                                          // 5546
        rootID,                                                                                                        // 5547
        transaction,                                                                                                   // 5548
        mountDepth                                                                                                     // 5549
      );                                                                                                               // 5550
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;                                                     // 5551
                                                                                                                       // 5552
      this.context = this._processContext(this._currentContext);                                                       // 5553
      this._defaultProps = this.getDefaultProps ? this.getDefaultProps() : null;                                       // 5554
      this.props = this._processProps(this.props);                                                                     // 5555
                                                                                                                       // 5556
      if (this.__reactAutoBindMap) {                                                                                   // 5557
        this._bindAutoBindMethods();                                                                                   // 5558
      }                                                                                                                // 5559
                                                                                                                       // 5560
      this.state = this.getInitialState ? this.getInitialState() : null;                                               // 5561
      ("production" !== "development" ? invariant(                                                                     // 5562
        typeof this.state === 'object' && !Array.isArray(this.state),                                                  // 5563
        '%s.getInitialState(): must return an object or null',                                                         // 5564
        this.constructor.displayName || 'ReactCompositeComponent'                                                      // 5565
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));                                    // 5566
                                                                                                                       // 5567
      this._pendingState = null;                                                                                       // 5568
      this._pendingForceUpdate = false;                                                                                // 5569
                                                                                                                       // 5570
      if (this.componentWillMount) {                                                                                   // 5571
        this.componentWillMount();                                                                                     // 5572
        // When mounting, calls to `setState` by `componentWillMount` will set                                         // 5573
        // `this._pendingState` without triggering a re-render.                                                        // 5574
        if (this._pendingState) {                                                                                      // 5575
          this.state = this._pendingState;                                                                             // 5576
          this._pendingState = null;                                                                                   // 5577
        }                                                                                                              // 5578
      }                                                                                                                // 5579
                                                                                                                       // 5580
      this._renderedComponent = instantiateReactComponent(                                                             // 5581
        this._renderValidatedComponent()                                                                               // 5582
      );                                                                                                               // 5583
                                                                                                                       // 5584
      // Done with mounting, `setState` will now trigger UI changes.                                                   // 5585
      this._compositeLifeCycleState = null;                                                                            // 5586
      var markup = this._renderedComponent.mountComponent(                                                             // 5587
        rootID,                                                                                                        // 5588
        transaction,                                                                                                   // 5589
        mountDepth + 1                                                                                                 // 5590
      );                                                                                                               // 5591
      if (this.componentDidMount) {                                                                                    // 5592
        transaction.getReactMountReady().enqueue(this, this.componentDidMount);                                        // 5593
      }                                                                                                                // 5594
      return markup;                                                                                                   // 5595
    }                                                                                                                  // 5596
  ),                                                                                                                   // 5597
                                                                                                                       // 5598
  /**                                                                                                                  // 5599
   * Releases any resources allocated by `mountComponent`.                                                             // 5600
   *                                                                                                                   // 5601
   * @final                                                                                                            // 5602
   * @internal                                                                                                         // 5603
   */                                                                                                                  // 5604
  unmountComponent: function() {                                                                                       // 5605
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;                                                     // 5606
    if (this.componentWillUnmount) {                                                                                   // 5607
      this.componentWillUnmount();                                                                                     // 5608
    }                                                                                                                  // 5609
    this._compositeLifeCycleState = null;                                                                              // 5610
                                                                                                                       // 5611
    this._defaultProps = null;                                                                                         // 5612
                                                                                                                       // 5613
    this._renderedComponent.unmountComponent();                                                                        // 5614
    this._renderedComponent = null;                                                                                    // 5615
                                                                                                                       // 5616
    ReactComponent.Mixin.unmountComponent.call(this);                                                                  // 5617
                                                                                                                       // 5618
    // Some existing components rely on this.props even after they've been                                             // 5619
    // destroyed (in event handlers).                                                                                  // 5620
    // TODO: this.props = null;                                                                                        // 5621
    // TODO: this.state = null;                                                                                        // 5622
  },                                                                                                                   // 5623
                                                                                                                       // 5624
  /**                                                                                                                  // 5625
   * Sets a subset of the state. Always use this or `replaceState` to mutate                                           // 5626
   * state. You should treat `this.state` as immutable.                                                                // 5627
   *                                                                                                                   // 5628
   * There is no guarantee that `this.state` will be immediately updated, so                                           // 5629
   * accessing `this.state` after calling this method may return the old value.                                        // 5630
   *                                                                                                                   // 5631
   * There is no guarantee that calls to `setState` will run synchronously,                                            // 5632
   * as they may eventually be batched together.  You can provide an optional                                          // 5633
   * callback that will be executed when the call to setState is actually                                              // 5634
   * completed.                                                                                                        // 5635
   *                                                                                                                   // 5636
   * @param {object} partialState Next partial state to be merged with state.                                          // 5637
   * @param {?function} callback Called after state is updated.                                                        // 5638
   * @final                                                                                                            // 5639
   * @protected                                                                                                        // 5640
   */                                                                                                                  // 5641
  setState: function(partialState, callback) {                                                                         // 5642
    ("production" !== "development" ? invariant(                                                                       // 5643
      typeof partialState === 'object' || partialState == null,                                                        // 5644
      'setState(...): takes an object of state variables to update.'                                                   // 5645
    ) : invariant(typeof partialState === 'object' || partialState == null));                                          // 5646
    if ("production" !== "development") {                                                                              // 5647
      ("production" !== "development" ? warning(                                                                       // 5648
        partialState != null,                                                                                          // 5649
        'setState(...): You passed an undefined or null state object; ' +                                              // 5650
        'instead, use forceUpdate().'                                                                                  // 5651
      ) : null);                                                                                                       // 5652
    }                                                                                                                  // 5653
    // Merge with `_pendingState` if it exists, otherwise with existing state.                                         // 5654
    this.replaceState(                                                                                                 // 5655
      merge(this._pendingState || this.state, partialState),                                                           // 5656
      callback                                                                                                         // 5657
    );                                                                                                                 // 5658
  },                                                                                                                   // 5659
                                                                                                                       // 5660
  /**                                                                                                                  // 5661
   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 5662
   * You should treat `this.state` as immutable.                                                                       // 5663
   *                                                                                                                   // 5664
   * There is no guarantee that `this.state` will be immediately updated, so                                           // 5665
   * accessing `this.state` after calling this method may return the old value.                                        // 5666
   *                                                                                                                   // 5667
   * @param {object} completeState Next state.                                                                         // 5668
   * @param {?function} callback Called after state is updated.                                                        // 5669
   * @final                                                                                                            // 5670
   * @protected                                                                                                        // 5671
   */                                                                                                                  // 5672
  replaceState: function(completeState, callback) {                                                                    // 5673
    validateLifeCycleOnReplaceState(this);                                                                             // 5674
    this._pendingState = completeState;                                                                                // 5675
    ReactUpdates.enqueueUpdate(this, callback);                                                                        // 5676
  },                                                                                                                   // 5677
                                                                                                                       // 5678
  /**                                                                                                                  // 5679
   * Filters the context object to only contain keys specified in                                                      // 5680
   * `contextTypes`, and asserts that they are valid.                                                                  // 5681
   *                                                                                                                   // 5682
   * @param {object} context                                                                                           // 5683
   * @return {?object}                                                                                                 // 5684
   * @private                                                                                                          // 5685
   */                                                                                                                  // 5686
  _processContext: function(context) {                                                                                 // 5687
    var maskedContext = null;                                                                                          // 5688
    var contextTypes = this.constructor.contextTypes;                                                                  // 5689
    if (contextTypes) {                                                                                                // 5690
      maskedContext = {};                                                                                              // 5691
      for (var contextName in contextTypes) {                                                                          // 5692
        maskedContext[contextName] = context[contextName];                                                             // 5693
      }                                                                                                                // 5694
      if ("production" !== "development") {                                                                            // 5695
        this._checkPropTypes(                                                                                          // 5696
          contextTypes,                                                                                                // 5697
          maskedContext,                                                                                               // 5698
          ReactPropTypeLocations.context                                                                               // 5699
        );                                                                                                             // 5700
      }                                                                                                                // 5701
    }                                                                                                                  // 5702
    return maskedContext;                                                                                              // 5703
  },                                                                                                                   // 5704
                                                                                                                       // 5705
  /**                                                                                                                  // 5706
   * @param {object} currentContext                                                                                    // 5707
   * @return {object}                                                                                                  // 5708
   * @private                                                                                                          // 5709
   */                                                                                                                  // 5710
  _processChildContext: function(currentContext) {                                                                     // 5711
    var childContext = this.getChildContext && this.getChildContext();                                                 // 5712
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';                                       // 5713
    if (childContext) {                                                                                                // 5714
      ("production" !== "development" ? invariant(                                                                     // 5715
        typeof this.constructor.childContextTypes === 'object',                                                        // 5716
        '%s.getChildContext(): childContextTypes must be defined in order to ' +                                       // 5717
        'use getChildContext().',                                                                                      // 5718
        displayName                                                                                                    // 5719
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));                                          // 5720
      if ("production" !== "development") {                                                                            // 5721
        this._checkPropTypes(                                                                                          // 5722
          this.constructor.childContextTypes,                                                                          // 5723
          childContext,                                                                                                // 5724
          ReactPropTypeLocations.childContext                                                                          // 5725
        );                                                                                                             // 5726
      }                                                                                                                // 5727
      for (var name in childContext) {                                                                                 // 5728
        ("production" !== "development" ? invariant(                                                                   // 5729
          name in this.constructor.childContextTypes,                                                                  // 5730
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',                                       // 5731
          displayName,                                                                                                 // 5732
          name                                                                                                         // 5733
        ) : invariant(name in this.constructor.childContextTypes));                                                    // 5734
      }                                                                                                                // 5735
      return merge(currentContext, childContext);                                                                      // 5736
    }                                                                                                                  // 5737
    return currentContext;                                                                                             // 5738
  },                                                                                                                   // 5739
                                                                                                                       // 5740
  /**                                                                                                                  // 5741
   * Processes props by setting default values for unspecified props and                                               // 5742
   * asserting that the props are valid. Does not mutate its argument; returns                                         // 5743
   * a new props object with defaults merged in.                                                                       // 5744
   *                                                                                                                   // 5745
   * @param {object} newProps                                                                                          // 5746
   * @return {object}                                                                                                  // 5747
   * @private                                                                                                          // 5748
   */                                                                                                                  // 5749
  _processProps: function(newProps) {                                                                                  // 5750
    var props = merge(newProps);                                                                                       // 5751
    var defaultProps = this._defaultProps;                                                                             // 5752
    for (var propName in defaultProps) {                                                                               // 5753
      if (typeof props[propName] === 'undefined') {                                                                    // 5754
        props[propName] = defaultProps[propName];                                                                      // 5755
      }                                                                                                                // 5756
    }                                                                                                                  // 5757
    if ("production" !== "development") {                                                                              // 5758
      var propTypes = this.constructor.propTypes;                                                                      // 5759
      if (propTypes) {                                                                                                 // 5760
        this._checkPropTypes(propTypes, props, ReactPropTypeLocations.prop);                                           // 5761
      }                                                                                                                // 5762
    }                                                                                                                  // 5763
    return props;                                                                                                      // 5764
  },                                                                                                                   // 5765
                                                                                                                       // 5766
  /**                                                                                                                  // 5767
   * Assert that the props are valid                                                                                   // 5768
   *                                                                                                                   // 5769
   * @param {object} propTypes Map of prop name to a ReactPropType                                                     // 5770
   * @param {object} props                                                                                             // 5771
   * @param {string} location e.g. "prop", "context", "child context"                                                  // 5772
   * @private                                                                                                          // 5773
   */                                                                                                                  // 5774
  _checkPropTypes: function(propTypes, props, location) {                                                              // 5775
    var componentName = this.constructor.displayName;                                                                  // 5776
    for (var propName in propTypes) {                                                                                  // 5777
      if (propTypes.hasOwnProperty(propName)) {                                                                        // 5778
        propTypes[propName](props, propName, componentName, location);                                                 // 5779
      }                                                                                                                // 5780
    }                                                                                                                  // 5781
  },                                                                                                                   // 5782
                                                                                                                       // 5783
  performUpdateIfNecessary: function() {                                                                               // 5784
    var compositeLifeCycleState = this._compositeLifeCycleState;                                                       // 5785
    // Do not trigger a state transition if we are in the middle of mounting or                                        // 5786
    // receiving props because both of those will already be doing this.                                               // 5787
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||                                                     // 5788
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {                                              // 5789
      return;                                                                                                          // 5790
    }                                                                                                                  // 5791
    ReactComponent.Mixin.performUpdateIfNecessary.call(this);                                                          // 5792
  },                                                                                                                   // 5793
                                                                                                                       // 5794
  /**                                                                                                                  // 5795
   * If any of `_pendingProps`, `_pendingState`, or `_pendingForceUpdate` is                                           // 5796
   * set, update the component.                                                                                        // 5797
   *                                                                                                                   // 5798
   * @param {ReactReconcileTransaction} transaction                                                                    // 5799
   * @internal                                                                                                         // 5800
   */                                                                                                                  // 5801
  _performUpdateIfNecessary: function(transaction) {                                                                   // 5802
    if (this._pendingProps == null &&                                                                                  // 5803
        this._pendingState == null &&                                                                                  // 5804
        this._pendingContext == null &&                                                                                // 5805
        !this._pendingForceUpdate) {                                                                                   // 5806
      return;                                                                                                          // 5807
    }                                                                                                                  // 5808
                                                                                                                       // 5809
    var nextFullContext = this._pendingContext || this._currentContext;                                                // 5810
    var nextContext = this._processContext(nextFullContext);                                                           // 5811
    this._pendingContext = null;                                                                                       // 5812
                                                                                                                       // 5813
    var nextProps = this.props;                                                                                        // 5814
    if (this._pendingProps != null) {                                                                                  // 5815
      nextProps = this._processProps(this._pendingProps);                                                              // 5816
      this._pendingProps = null;                                                                                       // 5817
                                                                                                                       // 5818
      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;                                              // 5819
      if (this.componentWillReceiveProps) {                                                                            // 5820
        this.componentWillReceiveProps(nextProps, nextContext);                                                        // 5821
      }                                                                                                                // 5822
    }                                                                                                                  // 5823
                                                                                                                       // 5824
    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;                                                // 5825
                                                                                                                       // 5826
    // Unlike props, state, and context, we specifically don't want to set                                             // 5827
    // _pendingOwner to null here because it's possible for a component to have                                        // 5828
    // a null owner, so we instead make `this._owner === this._pendingOwner`                                           // 5829
    // mean that there's no owner change pending.                                                                      // 5830
    var nextOwner = this._pendingOwner;                                                                                // 5831
                                                                                                                       // 5832
    var nextState = this._pendingState || this.state;                                                                  // 5833
    this._pendingState = null;                                                                                         // 5834
                                                                                                                       // 5835
    try {                                                                                                              // 5836
      if (this._pendingForceUpdate ||                                                                                  // 5837
          !this.shouldComponentUpdate ||                                                                               // 5838
          this.shouldComponentUpdate(nextProps, nextState, nextContext)) {                                             // 5839
        this._pendingForceUpdate = false;                                                                              // 5840
        // Will set `this.props`, `this.state` and `this.context`.                                                     // 5841
        this._performComponentUpdate(                                                                                  // 5842
          nextProps,                                                                                                   // 5843
          nextOwner,                                                                                                   // 5844
          nextState,                                                                                                   // 5845
          nextFullContext,                                                                                             // 5846
          nextContext,                                                                                                 // 5847
          transaction                                                                                                  // 5848
        );                                                                                                             // 5849
      } else {                                                                                                         // 5850
        // If it's determined that a component should not update, we still want                                        // 5851
        // to set props and state.                                                                                     // 5852
        this.props = nextProps;                                                                                        // 5853
        this._owner = nextOwner;                                                                                       // 5854
        this.state = nextState;                                                                                        // 5855
        this._currentContext = nextFullContext;                                                                        // 5856
        this.context = nextContext;                                                                                    // 5857
      }                                                                                                                // 5858
    } finally {                                                                                                        // 5859
      this._compositeLifeCycleState = null;                                                                            // 5860
    }                                                                                                                  // 5861
  },                                                                                                                   // 5862
                                                                                                                       // 5863
  /**                                                                                                                  // 5864
   * Merges new props and state, notifies delegate methods of update and                                               // 5865
   * performs update.                                                                                                  // 5866
   *                                                                                                                   // 5867
   * @param {object} nextProps Next object to set as properties.                                                       // 5868
   * @param {?ReactComponent} nextOwner Next component to set as owner                                                 // 5869
   * @param {?object} nextState Next object to set as state.                                                           // 5870
   * @param {?object} nextFullContext Next object to set as _currentContext.                                           // 5871
   * @param {?object} nextContext Next object to set as context.                                                       // 5872
   * @param {ReactReconcileTransaction} transaction                                                                    // 5873
   * @private                                                                                                          // 5874
   */                                                                                                                  // 5875
  _performComponentUpdate: function(                                                                                   // 5876
    nextProps,                                                                                                         // 5877
    nextOwner,                                                                                                         // 5878
    nextState,                                                                                                         // 5879
    nextFullContext,                                                                                                   // 5880
    nextContext,                                                                                                       // 5881
    transaction                                                                                                        // 5882
  ) {                                                                                                                  // 5883
    var prevProps = this.props;                                                                                        // 5884
    var prevOwner = this._owner;                                                                                       // 5885
    var prevState = this.state;                                                                                        // 5886
    var prevContext = this.context;                                                                                    // 5887
                                                                                                                       // 5888
    if (this.componentWillUpdate) {                                                                                    // 5889
      this.componentWillUpdate(nextProps, nextState, nextContext);                                                     // 5890
    }                                                                                                                  // 5891
                                                                                                                       // 5892
    this.props = nextProps;                                                                                            // 5893
    this._owner = nextOwner;                                                                                           // 5894
    this.state = nextState;                                                                                            // 5895
    this._currentContext = nextFullContext;                                                                            // 5896
    this.context = nextContext;                                                                                        // 5897
                                                                                                                       // 5898
    this.updateComponent(                                                                                              // 5899
      transaction,                                                                                                     // 5900
      prevProps,                                                                                                       // 5901
      prevOwner,                                                                                                       // 5902
      prevState,                                                                                                       // 5903
      prevContext                                                                                                      // 5904
    );                                                                                                                 // 5905
                                                                                                                       // 5906
    if (this.componentDidUpdate) {                                                                                     // 5907
      transaction.getReactMountReady().enqueue(                                                                        // 5908
        this,                                                                                                          // 5909
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext)                                          // 5910
      );                                                                                                               // 5911
    }                                                                                                                  // 5912
  },                                                                                                                   // 5913
                                                                                                                       // 5914
  receiveComponent: function(nextComponent, transaction) {                                                             // 5915
    if (nextComponent === this._descriptor) {                                                                          // 5916
      // Since props and context are immutable after the component is                                                  // 5917
      // mounted, we can do a cheap identity compare here to determine                                                 // 5918
      // if this is a superfluous reconcile.                                                                           // 5919
      return;                                                                                                          // 5920
    }                                                                                                                  // 5921
                                                                                                                       // 5922
    // Update the descriptor that was last used by this component instance                                             // 5923
    this._descriptor = nextComponent;                                                                                  // 5924
                                                                                                                       // 5925
    this._pendingContext = nextComponent._currentContext;                                                              // 5926
    ReactComponent.Mixin.receiveComponent.call(                                                                        // 5927
      this,                                                                                                            // 5928
      nextComponent,                                                                                                   // 5929
      transaction                                                                                                      // 5930
    );                                                                                                                 // 5931
  },                                                                                                                   // 5932
                                                                                                                       // 5933
  /**                                                                                                                  // 5934
   * Updates the component's currently mounted DOM representation.                                                     // 5935
   *                                                                                                                   // 5936
   * By default, this implements React's rendering and reconciliation algorithm.                                       // 5937
   * Sophisticated clients may wish to override this.                                                                  // 5938
   *                                                                                                                   // 5939
   * @param {ReactReconcileTransaction} transaction                                                                    // 5940
   * @param {object} prevProps                                                                                         // 5941
   * @param {?ReactComponent} prevOwner                                                                                // 5942
   * @param {?object} prevState                                                                                        // 5943
   * @param {?object} prevContext                                                                                      // 5944
   * @internal                                                                                                         // 5945
   * @overridable                                                                                                      // 5946
   */                                                                                                                  // 5947
  updateComponent: ReactPerf.measure(                                                                                  // 5948
    'ReactCompositeComponent',                                                                                         // 5949
    'updateComponent',                                                                                                 // 5950
    function(transaction, prevProps, prevOwner, prevState, prevContext) {                                              // 5951
      ReactComponent.Mixin.updateComponent.call(                                                                       // 5952
        this,                                                                                                          // 5953
        transaction,                                                                                                   // 5954
        prevProps,                                                                                                     // 5955
        prevOwner                                                                                                      // 5956
      );                                                                                                               // 5957
                                                                                                                       // 5958
                                                                                                                       // 5959
      var prevComponentInstance = this._renderedComponent;                                                             // 5960
      var nextComponent = this._renderValidatedComponent();                                                            // 5961
      if (shouldUpdateReactComponent(prevComponentInstance, nextComponent)) {                                          // 5962
        prevComponentInstance.receiveComponent(nextComponent, transaction);                                            // 5963
      } else {                                                                                                         // 5964
        // These two IDs are actually the same! But nothing should rely on that.                                       // 5965
        var thisID = this._rootNodeID;                                                                                 // 5966
        var prevComponentID = prevComponentInstance._rootNodeID;                                                       // 5967
        prevComponentInstance.unmountComponent();                                                                      // 5968
        this._renderedComponent = instantiateReactComponent(nextComponent);                                            // 5969
        var nextMarkup = this._renderedComponent.mountComponent(                                                       // 5970
          thisID,                                                                                                      // 5971
          transaction,                                                                                                 // 5972
          this._mountDepth + 1                                                                                         // 5973
        );                                                                                                             // 5974
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(                                       // 5975
          prevComponentID,                                                                                             // 5976
          nextMarkup                                                                                                   // 5977
        );                                                                                                             // 5978
      }                                                                                                                // 5979
    }                                                                                                                  // 5980
  ),                                                                                                                   // 5981
                                                                                                                       // 5982
  /**                                                                                                                  // 5983
   * Forces an update. This should only be invoked when it is known with                                               // 5984
   * certainty that we are **not** in a DOM transaction.                                                               // 5985
   *                                                                                                                   // 5986
   * You may want to call this when you know that some deeper aspect of the                                            // 5987
   * component's state has changed but `setState` was not called.                                                      // 5988
   *                                                                                                                   // 5989
   * This will not invoke `shouldUpdateComponent`, but it will invoke                                                  // 5990
   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 5991
   *                                                                                                                   // 5992
   * @param {?function} callback Called after update is complete.                                                      // 5993
   * @final                                                                                                            // 5994
   * @protected                                                                                                        // 5995
   */                                                                                                                  // 5996
  forceUpdate: function(callback) {                                                                                    // 5997
    var compositeLifeCycleState = this._compositeLifeCycleState;                                                       // 5998
    ("production" !== "development" ? invariant(                                                                       // 5999
      this.isMounted() ||                                                                                              // 6000
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,                                                       // 6001
      'forceUpdate(...): Can only force an update on mounted or mounting ' +                                           // 6002
        'components.'                                                                                                  // 6003
    ) : invariant(this.isMounted() ||                                                                                  // 6004
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));                                                       // 6005
    ("production" !== "development" ? invariant(                                                                       // 6006
      compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&                                                // 6007
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,                                                       // 6008
      'forceUpdate(...): Cannot force an update while unmounting component ' +                                         // 6009
      'or during an existing state transition (such as within `render`).'                                              // 6010
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&                                    // 6011
    compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));                                                       // 6012
    this._pendingForceUpdate = true;                                                                                   // 6013
    ReactUpdates.enqueueUpdate(this, callback);                                                                        // 6014
  },                                                                                                                   // 6015
                                                                                                                       // 6016
  /**                                                                                                                  // 6017
   * @private                                                                                                          // 6018
   */                                                                                                                  // 6019
  _renderValidatedComponent: ReactPerf.measure(                                                                        // 6020
    'ReactCompositeComponent',                                                                                         // 6021
    '_renderValidatedComponent',                                                                                       // 6022
    function() {                                                                                                       // 6023
      var renderedComponent;                                                                                           // 6024
      var previousContext = ReactContext.current;                                                                      // 6025
      ReactContext.current = this._processChildContext(this._currentContext);                                          // 6026
      ReactCurrentOwner.current = this;                                                                                // 6027
      try {                                                                                                            // 6028
        renderedComponent = this.render();                                                                             // 6029
      } finally {                                                                                                      // 6030
        ReactContext.current = previousContext;                                                                        // 6031
        ReactCurrentOwner.current = null;                                                                              // 6032
      }                                                                                                                // 6033
      ("production" !== "development" ? invariant(                                                                     // 6034
        ReactComponent.isValidComponent(renderedComponent),                                                            // 6035
        '%s.render(): A valid ReactComponent must be returned. You may have ' +                                        // 6036
          'returned null, undefined, an array, or some other invalid object.',                                         // 6037
        this.constructor.displayName || 'ReactCompositeComponent'                                                      // 6038
      ) : invariant(ReactComponent.isValidComponent(renderedComponent)));                                              // 6039
      return renderedComponent;                                                                                        // 6040
    }                                                                                                                  // 6041
  ),                                                                                                                   // 6042
                                                                                                                       // 6043
  /**                                                                                                                  // 6044
   * @private                                                                                                          // 6045
   */                                                                                                                  // 6046
  _bindAutoBindMethods: function() {                                                                                   // 6047
    for (var autoBindKey in this.__reactAutoBindMap) {                                                                 // 6048
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {                                                      // 6049
        continue;                                                                                                      // 6050
      }                                                                                                                // 6051
      var method = this.__reactAutoBindMap[autoBindKey];                                                               // 6052
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(                                              // 6053
        method,                                                                                                        // 6054
        this.constructor.displayName + '.' + autoBindKey                                                               // 6055
      ));                                                                                                              // 6056
    }                                                                                                                  // 6057
  },                                                                                                                   // 6058
                                                                                                                       // 6059
  /**                                                                                                                  // 6060
   * Binds a method to the component.                                                                                  // 6061
   *                                                                                                                   // 6062
   * @param {function} method Method to be bound.                                                                      // 6063
   * @private                                                                                                          // 6064
   */                                                                                                                  // 6065
  _bindAutoBindMethod: function(method) {                                                                              // 6066
    var component = this;                                                                                              // 6067
    var boundMethod = function() {                                                                                     // 6068
      return method.apply(component, arguments);                                                                       // 6069
    };                                                                                                                 // 6070
    if ("production" !== "development") {                                                                              // 6071
      boundMethod.__reactBoundContext = component;                                                                     // 6072
      boundMethod.__reactBoundMethod = method;                                                                         // 6073
      boundMethod.__reactBoundArguments = null;                                                                        // 6074
      var componentName = component.constructor.displayName;                                                           // 6075
      var _bind = boundMethod.bind;                                                                                    // 6076
      boundMethod.bind = function(newThis ) {var args=Array.prototype.slice.call(arguments,1);                         // 6077
        // User is trying to bind() an autobound method; we effectively will                                           // 6078
        // ignore the value of "this" that the user is trying to use, so                                               // 6079
        // let's warn.                                                                                                 // 6080
        if (newThis !== component && newThis !== null) {                                                               // 6081
          monitorCodeUse('react_bind_warning', { component: componentName });                                          // 6082
          console.warn(                                                                                                // 6083
            'bind(): React component methods may only be bound to the ' +                                              // 6084
            'component instance. See ' + componentName                                                                 // 6085
          );                                                                                                           // 6086
        } else if (!args.length) {                                                                                     // 6087
          monitorCodeUse('react_bind_warning', { component: componentName });                                          // 6088
          console.warn(                                                                                                // 6089
            'bind(): You are binding a component method to the component. ' +                                          // 6090
            'React does this for you automatically in a high-performance ' +                                           // 6091
            'way, so you can safely remove this call. See ' + componentName                                            // 6092
          );                                                                                                           // 6093
          return boundMethod;                                                                                          // 6094
        }                                                                                                              // 6095
        var reboundMethod = _bind.apply(boundMethod, arguments);                                                       // 6096
        reboundMethod.__reactBoundContext = component;                                                                 // 6097
        reboundMethod.__reactBoundMethod = method;                                                                     // 6098
        reboundMethod.__reactBoundArguments = args;                                                                    // 6099
        return reboundMethod;                                                                                          // 6100
      };                                                                                                               // 6101
    }                                                                                                                  // 6102
    return boundMethod;                                                                                                // 6103
  }                                                                                                                    // 6104
};                                                                                                                     // 6105
                                                                                                                       // 6106
var ReactCompositeComponentBase = function() {};                                                                       // 6107
mixInto(ReactCompositeComponentBase, ReactComponent.Mixin);                                                            // 6108
mixInto(ReactCompositeComponentBase, ReactOwner.Mixin);                                                                // 6109
mixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);                                                       // 6110
mixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);                                                    // 6111
                                                                                                                       // 6112
/**                                                                                                                    // 6113
 * Checks if a value is a valid component constructor.                                                                 // 6114
 *                                                                                                                     // 6115
 * @param {*}                                                                                                          // 6116
 * @return {boolean}                                                                                                   // 6117
 * @public                                                                                                             // 6118
 */                                                                                                                    // 6119
function isValidClass(componentClass) {                                                                                // 6120
  return componentClass instanceof Function &&                                                                         // 6121
         'componentConstructor' in componentClass &&                                                                   // 6122
         componentClass.componentConstructor instanceof Function;                                                      // 6123
}                                                                                                                      // 6124
/**                                                                                                                    // 6125
 * Module for creating composite components.                                                                           // 6126
 *                                                                                                                     // 6127
 * @class ReactCompositeComponent                                                                                      // 6128
 * @extends ReactComponent                                                                                             // 6129
 * @extends ReactOwner                                                                                                 // 6130
 * @extends ReactPropTransferer                                                                                        // 6131
 */                                                                                                                    // 6132
var ReactCompositeComponent = {                                                                                        // 6133
                                                                                                                       // 6134
  LifeCycle: CompositeLifeCycle,                                                                                       // 6135
                                                                                                                       // 6136
  Base: ReactCompositeComponentBase,                                                                                   // 6137
                                                                                                                       // 6138
  /**                                                                                                                  // 6139
   * Creates a composite component class given a class specification.                                                  // 6140
   *                                                                                                                   // 6141
   * @param {object} spec Class specification (which must define `render`).                                            // 6142
   * @return {function} Component constructor function.                                                                // 6143
   * @public                                                                                                           // 6144
   */                                                                                                                  // 6145
  createClass: function(spec) {                                                                                        // 6146
    var Constructor = function() {};                                                                                   // 6147
    Constructor.prototype = new ReactCompositeComponentBase();                                                         // 6148
    Constructor.prototype.constructor = Constructor;                                                                   // 6149
                                                                                                                       // 6150
    var DescriptorConstructor = Constructor;                                                                           // 6151
                                                                                                                       // 6152
    var ConvenienceConstructor = function(props, children) {                                                           // 6153
      var descriptor = new DescriptorConstructor();                                                                    // 6154
      descriptor.construct.apply(descriptor, arguments);                                                               // 6155
      return descriptor;                                                                                               // 6156
    };                                                                                                                 // 6157
    ConvenienceConstructor.componentConstructor = Constructor;                                                         // 6158
    Constructor.ConvenienceConstructor = ConvenienceConstructor;                                                       // 6159
    ConvenienceConstructor.originalSpec = spec;                                                                        // 6160
                                                                                                                       // 6161
    injectedMixins.forEach(                                                                                            // 6162
      mixSpecIntoComponent.bind(null, ConvenienceConstructor)                                                          // 6163
    );                                                                                                                 // 6164
                                                                                                                       // 6165
    mixSpecIntoComponent(ConvenienceConstructor, spec);                                                                // 6166
                                                                                                                       // 6167
    ("production" !== "development" ? invariant(                                                                       // 6168
      Constructor.prototype.render,                                                                                    // 6169
      'createClass(...): Class specification must implement a `render` method.'                                        // 6170
    ) : invariant(Constructor.prototype.render));                                                                      // 6171
                                                                                                                       // 6172
    if ("production" !== "development") {                                                                              // 6173
      if (Constructor.prototype.componentShouldUpdate) {                                                               // 6174
        monitorCodeUse(                                                                                                // 6175
          'react_component_should_update_warning',                                                                     // 6176
          { component: spec.displayName }                                                                              // 6177
        );                                                                                                             // 6178
        console.warn(                                                                                                  // 6179
          (spec.displayName || 'A component') + ' has a method called ' +                                              // 6180
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +                                          // 6181
          'The name is phrased as a question because the function is ' +                                               // 6182
          'expected to return a value.'                                                                                // 6183
         );                                                                                                            // 6184
      }                                                                                                                // 6185
    }                                                                                                                  // 6186
                                                                                                                       // 6187
    // Expose the convience constructor on the prototype so that it can be                                             // 6188
    // easily accessed on descriptors. E.g. <Foo />.type === Foo.type and for                                          // 6189
    // static methods like <Foo />.type.staticMethod();                                                                // 6190
    // This should not be named constructor since this may not be the function                                         // 6191
    // that created the descriptor, and it may not even be a constructor.                                              // 6192
    ConvenienceConstructor.type = Constructor;                                                                         // 6193
    Constructor.prototype.type = Constructor;                                                                          // 6194
                                                                                                                       // 6195
    // Reduce time spent doing lookups by setting these on the prototype.                                              // 6196
    for (var methodName in ReactCompositeComponentInterface) {                                                         // 6197
      if (!Constructor.prototype[methodName]) {                                                                        // 6198
        Constructor.prototype[methodName] = null;                                                                      // 6199
      }                                                                                                                // 6200
    }                                                                                                                  // 6201
                                                                                                                       // 6202
    if ("production" !== "development") {                                                                              // 6203
      // In DEV the convenience constructor generates a proxy to another                                               // 6204
      // instance around it to warn about access to properties on the                                                  // 6205
      // descriptor.                                                                                                   // 6206
      DescriptorConstructor = createDescriptorProxy(Constructor);                                                      // 6207
    }                                                                                                                  // 6208
                                                                                                                       // 6209
    return ConvenienceConstructor;                                                                                     // 6210
  },                                                                                                                   // 6211
                                                                                                                       // 6212
  isValidClass: isValidClass,                                                                                          // 6213
                                                                                                                       // 6214
  injection: {                                                                                                         // 6215
    injectMixin: function(mixin) {                                                                                     // 6216
      injectedMixins.push(mixin);                                                                                      // 6217
    }                                                                                                                  // 6218
  }                                                                                                                    // 6219
};                                                                                                                     // 6220
                                                                                                                       // 6221
module.exports = ReactCompositeComponent;                                                                              // 6222
                                                                                                                       // 6223
},{"./ReactComponent":27,"./ReactContext":30,"./ReactCurrentOwner":31,"./ReactErrorUtils":47,"./ReactOwner":59,"./ReactPerf":60,"./ReactPropTransferer":61,"./ReactPropTypeLocationNames":62,"./ReactPropTypeLocations":63,"./ReactUpdates":71,"./instantiateReactComponent":111,"./invariant":112,"./keyMirror":118,"./merge":121,"./mixInto":124,"./monitorCodeUse":125,"./objMap":126,"./shouldUpdateReactComponent":131,"./warning":134}],30:[function(_dereq_,module,exports){
/**                                                                                                                    // 6225
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 6226
 *                                                                                                                     // 6227
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6228
 * you may not use this file except in compliance with the License.                                                    // 6229
 * You may obtain a copy of the License at                                                                             // 6230
 *                                                                                                                     // 6231
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6232
 *                                                                                                                     // 6233
 * Unless required by applicable law or agreed to in writing, software                                                 // 6234
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6235
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6236
 * See the License for the specific language governing permissions and                                                 // 6237
 * limitations under the License.                                                                                      // 6238
 *                                                                                                                     // 6239
 * @providesModule ReactContext                                                                                        // 6240
 */                                                                                                                    // 6241
                                                                                                                       // 6242
"use strict";                                                                                                          // 6243
                                                                                                                       // 6244
var merge = _dereq_("./merge");                                                                                        // 6245
                                                                                                                       // 6246
/**                                                                                                                    // 6247
 * Keeps track of the current context.                                                                                 // 6248
 *                                                                                                                     // 6249
 * The context is automatically passed down the component ownership hierarchy                                          // 6250
 * and is accessible via `this.context` on ReactCompositeComponents.                                                   // 6251
 */                                                                                                                    // 6252
var ReactContext = {                                                                                                   // 6253
                                                                                                                       // 6254
  /**                                                                                                                  // 6255
   * @internal                                                                                                         // 6256
   * @type {object}                                                                                                    // 6257
   */                                                                                                                  // 6258
  current: {},                                                                                                         // 6259
                                                                                                                       // 6260
  /**                                                                                                                  // 6261
   * Temporarily extends the current context while executing scopedCallback.                                           // 6262
   *                                                                                                                   // 6263
   * A typical use case might look like                                                                                // 6264
   *                                                                                                                   // 6265
   *  render: function() {                                                                                             // 6266
   *    var children = ReactContext.withContext({foo: 'foo'} () => (                                                   // 6267
   *                                                                                                                   // 6268
   *    ));                                                                                                            // 6269
   *    return <div>{children}</div>;                                                                                  // 6270
   *  }                                                                                                                // 6271
   *                                                                                                                   // 6272
   * @param {object} newContext New context to merge into the existing context                                         // 6273
   * @param {function} scopedCallback Callback to run with the new context                                             // 6274
   * @return {ReactComponent|array<ReactComponent>}                                                                    // 6275
   */                                                                                                                  // 6276
  withContext: function(newContext, scopedCallback) {                                                                  // 6277
    var result;                                                                                                        // 6278
    var previousContext = ReactContext.current;                                                                        // 6279
    ReactContext.current = merge(previousContext, newContext);                                                         // 6280
    try {                                                                                                              // 6281
      result = scopedCallback();                                                                                       // 6282
    } finally {                                                                                                        // 6283
      ReactContext.current = previousContext;                                                                          // 6284
    }                                                                                                                  // 6285
    return result;                                                                                                     // 6286
  }                                                                                                                    // 6287
                                                                                                                       // 6288
};                                                                                                                     // 6289
                                                                                                                       // 6290
module.exports = ReactContext;                                                                                         // 6291
                                                                                                                       // 6292
},{"./merge":121}],31:[function(_dereq_,module,exports){                                                               // 6293
/**                                                                                                                    // 6294
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 6295
 *                                                                                                                     // 6296
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6297
 * you may not use this file except in compliance with the License.                                                    // 6298
 * You may obtain a copy of the License at                                                                             // 6299
 *                                                                                                                     // 6300
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6301
 *                                                                                                                     // 6302
 * Unless required by applicable law or agreed to in writing, software                                                 // 6303
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6304
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6305
 * See the License for the specific language governing permissions and                                                 // 6306
 * limitations under the License.                                                                                      // 6307
 *                                                                                                                     // 6308
 * @providesModule ReactCurrentOwner                                                                                   // 6309
 */                                                                                                                    // 6310
                                                                                                                       // 6311
"use strict";                                                                                                          // 6312
                                                                                                                       // 6313
/**                                                                                                                    // 6314
 * Keeps track of the current owner.                                                                                   // 6315
 *                                                                                                                     // 6316
 * The current owner is the component who should own any components that are                                           // 6317
 * currently being constructed.                                                                                        // 6318
 *                                                                                                                     // 6319
 * The depth indicate how many composite components are above this render level.                                       // 6320
 */                                                                                                                    // 6321
var ReactCurrentOwner = {                                                                                              // 6322
                                                                                                                       // 6323
  /**                                                                                                                  // 6324
   * @internal                                                                                                         // 6325
   * @type {ReactComponent}                                                                                            // 6326
   */                                                                                                                  // 6327
  current: null                                                                                                        // 6328
                                                                                                                       // 6329
};                                                                                                                     // 6330
                                                                                                                       // 6331
module.exports = ReactCurrentOwner;                                                                                    // 6332
                                                                                                                       // 6333
},{}],32:[function(_dereq_,module,exports){                                                                            // 6334
/**                                                                                                                    // 6335
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 6336
 *                                                                                                                     // 6337
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6338
 * you may not use this file except in compliance with the License.                                                    // 6339
 * You may obtain a copy of the License at                                                                             // 6340
 *                                                                                                                     // 6341
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6342
 *                                                                                                                     // 6343
 * Unless required by applicable law or agreed to in writing, software                                                 // 6344
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6345
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6346
 * See the License for the specific language governing permissions and                                                 // 6347
 * limitations under the License.                                                                                      // 6348
 *                                                                                                                     // 6349
 * @providesModule ReactDOM                                                                                            // 6350
 * @typechecks static-only                                                                                             // 6351
 */                                                                                                                    // 6352
                                                                                                                       // 6353
"use strict";                                                                                                          // 6354
                                                                                                                       // 6355
var ReactDOMComponent = _dereq_("./ReactDOMComponent");                                                                // 6356
                                                                                                                       // 6357
var mergeInto = _dereq_("./mergeInto");                                                                                // 6358
var objMapKeyVal = _dereq_("./objMapKeyVal");                                                                          // 6359
                                                                                                                       // 6360
/**                                                                                                                    // 6361
 * Creates a new React class that is idempotent and capable of containing other                                        // 6362
 * React components. It accepts event listeners and DOM properties that are                                            // 6363
 * valid according to `DOMProperty`.                                                                                   // 6364
 *                                                                                                                     // 6365
 *  - Event listeners: `onClick`, `onMouseDown`, etc.                                                                  // 6366
 *  - DOM properties: `className`, `name`, `title`, etc.                                                               // 6367
 *                                                                                                                     // 6368
 * The `style` property functions differently from the DOM API. It accepts an                                          // 6369
 * object mapping of style properties to values.                                                                       // 6370
 *                                                                                                                     // 6371
 * @param {string} tag Tag name (e.g. `div`).                                                                          // 6372
 * @param {boolean} omitClose True if the close tag should be omitted.                                                 // 6373
 * @private                                                                                                            // 6374
 */                                                                                                                    // 6375
function createDOMComponentClass(tag, omitClose) {                                                                     // 6376
  var Constructor = function() {};                                                                                     // 6377
  Constructor.prototype = new ReactDOMComponent(tag, omitClose);                                                       // 6378
  Constructor.prototype.constructor = Constructor;                                                                     // 6379
  Constructor.displayName = tag;                                                                                       // 6380
                                                                                                                       // 6381
  var ConvenienceConstructor = function(props, children) {                                                             // 6382
    var instance = new Constructor();                                                                                  // 6383
    instance.construct.apply(instance, arguments);                                                                     // 6384
    return instance;                                                                                                   // 6385
  };                                                                                                                   // 6386
                                                                                                                       // 6387
  // Expose the constructor on the ConvenienceConstructor and prototype so that                                        // 6388
  // it can be easily easily accessed on descriptors.                                                                  // 6389
  // E.g. <div />.type === div.type                                                                                    // 6390
  ConvenienceConstructor.type = Constructor;                                                                           // 6391
  Constructor.prototype.type = Constructor;                                                                            // 6392
                                                                                                                       // 6393
  Constructor.ConvenienceConstructor = ConvenienceConstructor;                                                         // 6394
  ConvenienceConstructor.componentConstructor = Constructor;                                                           // 6395
  return ConvenienceConstructor;                                                                                       // 6396
}                                                                                                                      // 6397
                                                                                                                       // 6398
/**                                                                                                                    // 6399
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.                                          // 6400
 * This is also accessible via `React.DOM`.                                                                            // 6401
 *                                                                                                                     // 6402
 * @public                                                                                                             // 6403
 */                                                                                                                    // 6404
var ReactDOM = objMapKeyVal({                                                                                          // 6405
  a: false,                                                                                                            // 6406
  abbr: false,                                                                                                         // 6407
  address: false,                                                                                                      // 6408
  area: true,                                                                                                          // 6409
  article: false,                                                                                                      // 6410
  aside: false,                                                                                                        // 6411
  audio: false,                                                                                                        // 6412
  b: false,                                                                                                            // 6413
  base: true,                                                                                                          // 6414
  bdi: false,                                                                                                          // 6415
  bdo: false,                                                                                                          // 6416
  big: false,                                                                                                          // 6417
  blockquote: false,                                                                                                   // 6418
  body: false,                                                                                                         // 6419
  br: true,                                                                                                            // 6420
  button: false,                                                                                                       // 6421
  canvas: false,                                                                                                       // 6422
  caption: false,                                                                                                      // 6423
  cite: false,                                                                                                         // 6424
  code: false,                                                                                                         // 6425
  col: true,                                                                                                           // 6426
  colgroup: false,                                                                                                     // 6427
  data: false,                                                                                                         // 6428
  datalist: false,                                                                                                     // 6429
  dd: false,                                                                                                           // 6430
  del: false,                                                                                                          // 6431
  details: false,                                                                                                      // 6432
  dfn: false,                                                                                                          // 6433
  div: false,                                                                                                          // 6434
  dl: false,                                                                                                           // 6435
  dt: false,                                                                                                           // 6436
  em: false,                                                                                                           // 6437
  embed: true,                                                                                                         // 6438
  fieldset: false,                                                                                                     // 6439
  figcaption: false,                                                                                                   // 6440
  figure: false,                                                                                                       // 6441
  footer: false,                                                                                                       // 6442
  form: false, // NOTE: Injected, see `ReactDOMForm`.                                                                  // 6443
  h1: false,                                                                                                           // 6444
  h2: false,                                                                                                           // 6445
  h3: false,                                                                                                           // 6446
  h4: false,                                                                                                           // 6447
  h5: false,                                                                                                           // 6448
  h6: false,                                                                                                           // 6449
  head: false,                                                                                                         // 6450
  header: false,                                                                                                       // 6451
  hr: true,                                                                                                            // 6452
  html: false,                                                                                                         // 6453
  i: false,                                                                                                            // 6454
  iframe: false,                                                                                                       // 6455
  img: true,                                                                                                           // 6456
  input: true,                                                                                                         // 6457
  ins: false,                                                                                                          // 6458
  kbd: false,                                                                                                          // 6459
  keygen: true,                                                                                                        // 6460
  label: false,                                                                                                        // 6461
  legend: false,                                                                                                       // 6462
  li: false,                                                                                                           // 6463
  link: true,                                                                                                          // 6464
  main: false,                                                                                                         // 6465
  map: false,                                                                                                          // 6466
  mark: false,                                                                                                         // 6467
  menu: false,                                                                                                         // 6468
  menuitem: false, // NOTE: Close tag should be omitted, but causes problems.                                          // 6469
  meta: true,                                                                                                          // 6470
  meter: false,                                                                                                        // 6471
  nav: false,                                                                                                          // 6472
  noscript: false,                                                                                                     // 6473
  object: false,                                                                                                       // 6474
  ol: false,                                                                                                           // 6475
  optgroup: false,                                                                                                     // 6476
  option: false,                                                                                                       // 6477
  output: false,                                                                                                       // 6478
  p: false,                                                                                                            // 6479
  param: true,                                                                                                         // 6480
  pre: false,                                                                                                          // 6481
  progress: false,                                                                                                     // 6482
  q: false,                                                                                                            // 6483
  rp: false,                                                                                                           // 6484
  rt: false,                                                                                                           // 6485
  ruby: false,                                                                                                         // 6486
  s: false,                                                                                                            // 6487
  samp: false,                                                                                                         // 6488
  script: false,                                                                                                       // 6489
  section: false,                                                                                                      // 6490
  select: false,                                                                                                       // 6491
  small: false,                                                                                                        // 6492
  source: true,                                                                                                        // 6493
  span: false,                                                                                                         // 6494
  strong: false,                                                                                                       // 6495
  style: false,                                                                                                        // 6496
  sub: false,                                                                                                          // 6497
  summary: false,                                                                                                      // 6498
  sup: false,                                                                                                          // 6499
  table: false,                                                                                                        // 6500
  tbody: false,                                                                                                        // 6501
  td: false,                                                                                                           // 6502
  textarea: false, // NOTE: Injected, see `ReactDOMTextarea`.                                                          // 6503
  tfoot: false,                                                                                                        // 6504
  th: false,                                                                                                           // 6505
  thead: false,                                                                                                        // 6506
  time: false,                                                                                                         // 6507
  title: false,                                                                                                        // 6508
  tr: false,                                                                                                           // 6509
  track: true,                                                                                                         // 6510
  u: false,                                                                                                            // 6511
  ul: false,                                                                                                           // 6512
  'var': false,                                                                                                        // 6513
  video: false,                                                                                                        // 6514
  wbr: true,                                                                                                           // 6515
                                                                                                                       // 6516
  // SVG                                                                                                               // 6517
  circle: false,                                                                                                       // 6518
  defs: false,                                                                                                         // 6519
  g: false,                                                                                                            // 6520
  line: false,                                                                                                         // 6521
  linearGradient: false,                                                                                               // 6522
  path: false,                                                                                                         // 6523
  polygon: false,                                                                                                      // 6524
  polyline: false,                                                                                                     // 6525
  radialGradient: false,                                                                                               // 6526
  rect: false,                                                                                                         // 6527
  stop: false,                                                                                                         // 6528
  svg: false,                                                                                                          // 6529
  text: false                                                                                                          // 6530
}, createDOMComponentClass);                                                                                           // 6531
                                                                                                                       // 6532
var injection = {                                                                                                      // 6533
  injectComponentClasses: function(componentClasses) {                                                                 // 6534
    mergeInto(ReactDOM, componentClasses);                                                                             // 6535
  }                                                                                                                    // 6536
};                                                                                                                     // 6537
                                                                                                                       // 6538
ReactDOM.injection = injection;                                                                                        // 6539
                                                                                                                       // 6540
module.exports = ReactDOM;                                                                                             // 6541
                                                                                                                       // 6542
},{"./ReactDOMComponent":34,"./mergeInto":123,"./objMapKeyVal":127}],33:[function(_dereq_,module,exports){             // 6543
/**                                                                                                                    // 6544
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 6545
 *                                                                                                                     // 6546
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6547
 * you may not use this file except in compliance with the License.                                                    // 6548
 * You may obtain a copy of the License at                                                                             // 6549
 *                                                                                                                     // 6550
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6551
 *                                                                                                                     // 6552
 * Unless required by applicable law or agreed to in writing, software                                                 // 6553
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6554
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6555
 * See the License for the specific language governing permissions and                                                 // 6556
 * limitations under the License.                                                                                      // 6557
 *                                                                                                                     // 6558
 * @providesModule ReactDOMButton                                                                                      // 6559
 */                                                                                                                    // 6560
                                                                                                                       // 6561
"use strict";                                                                                                          // 6562
                                                                                                                       // 6563
var AutoFocusMixin = _dereq_("./AutoFocusMixin");                                                                      // 6564
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");                                              // 6565
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");                                                    // 6566
var ReactDOM = _dereq_("./ReactDOM");                                                                                  // 6567
                                                                                                                       // 6568
var keyMirror = _dereq_("./keyMirror");                                                                                // 6569
                                                                                                                       // 6570
// Store a reference to the <button> `ReactDOMComponent`.                                                              // 6571
var button = ReactDOM.button;                                                                                          // 6572
                                                                                                                       // 6573
var mouseListenerNames = keyMirror({                                                                                   // 6574
  onClick: true,                                                                                                       // 6575
  onDoubleClick: true,                                                                                                 // 6576
  onMouseDown: true,                                                                                                   // 6577
  onMouseMove: true,                                                                                                   // 6578
  onMouseUp: true,                                                                                                     // 6579
  onClickCapture: true,                                                                                                // 6580
  onDoubleClickCapture: true,                                                                                          // 6581
  onMouseDownCapture: true,                                                                                            // 6582
  onMouseMoveCapture: true,                                                                                            // 6583
  onMouseUpCapture: true                                                                                               // 6584
});                                                                                                                    // 6585
                                                                                                                       // 6586
/**                                                                                                                    // 6587
 * Implements a <button> native component that does not receive mouse events                                           // 6588
 * when `disabled` is set.                                                                                             // 6589
 */                                                                                                                    // 6590
var ReactDOMButton = ReactCompositeComponent.createClass({                                                             // 6591
  displayName: 'ReactDOMButton',                                                                                       // 6592
                                                                                                                       // 6593
  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],                                                                // 6594
                                                                                                                       // 6595
  render: function() {                                                                                                 // 6596
    var props = {};                                                                                                    // 6597
                                                                                                                       // 6598
    // Copy the props; except the mouse listeners if we're disabled                                                    // 6599
    for (var key in this.props) {                                                                                      // 6600
      if (this.props.hasOwnProperty(key) &&                                                                            // 6601
          (!this.props.disabled || !mouseListenerNames[key])) {                                                        // 6602
        props[key] = this.props[key];                                                                                  // 6603
      }                                                                                                                // 6604
    }                                                                                                                  // 6605
                                                                                                                       // 6606
    return button(props, this.props.children);                                                                         // 6607
  }                                                                                                                    // 6608
                                                                                                                       // 6609
});                                                                                                                    // 6610
                                                                                                                       // 6611
module.exports = ReactDOMButton;                                                                                       // 6612
                                                                                                                       // 6613
},{"./AutoFocusMixin":1,"./ReactBrowserComponentMixin":25,"./ReactCompositeComponent":29,"./ReactDOM":32,"./keyMirror":118}],34:[function(_dereq_,module,exports){
/**                                                                                                                    // 6615
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 6616
 *                                                                                                                     // 6617
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6618
 * you may not use this file except in compliance with the License.                                                    // 6619
 * You may obtain a copy of the License at                                                                             // 6620
 *                                                                                                                     // 6621
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6622
 *                                                                                                                     // 6623
 * Unless required by applicable law or agreed to in writing, software                                                 // 6624
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6625
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6626
 * See the License for the specific language governing permissions and                                                 // 6627
 * limitations under the License.                                                                                      // 6628
 *                                                                                                                     // 6629
 * @providesModule ReactDOMComponent                                                                                   // 6630
 * @typechecks static-only                                                                                             // 6631
 */                                                                                                                    // 6632
                                                                                                                       // 6633
"use strict";                                                                                                          // 6634
                                                                                                                       // 6635
var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");                                                        // 6636
var DOMProperty = _dereq_("./DOMProperty");                                                                            // 6637
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");                                                        // 6638
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");                                              // 6639
var ReactComponent = _dereq_("./ReactComponent");                                                                      // 6640
var ReactEventEmitter = _dereq_("./ReactEventEmitter");                                                                // 6641
var ReactMount = _dereq_("./ReactMount");                                                                              // 6642
var ReactMultiChild = _dereq_("./ReactMultiChild");                                                                    // 6643
var ReactPerf = _dereq_("./ReactPerf");                                                                                // 6644
                                                                                                                       // 6645
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");                                                          // 6646
var invariant = _dereq_("./invariant");                                                                                // 6647
var keyOf = _dereq_("./keyOf");                                                                                        // 6648
var merge = _dereq_("./merge");                                                                                        // 6649
var mixInto = _dereq_("./mixInto");                                                                                    // 6650
                                                                                                                       // 6651
var deleteListener = ReactEventEmitter.deleteListener;                                                                 // 6652
var listenTo = ReactEventEmitter.listenTo;                                                                             // 6653
var registrationNameModules = ReactEventEmitter.registrationNameModules;                                               // 6654
                                                                                                                       // 6655
// For quickly matching children type, to test if can be treated as content.                                           // 6656
var CONTENT_TYPES = {'string': true, 'number': true};                                                                  // 6657
                                                                                                                       // 6658
var STYLE = keyOf({style: null});                                                                                      // 6659
                                                                                                                       // 6660
var ELEMENT_NODE_TYPE = 1;                                                                                             // 6661
                                                                                                                       // 6662
/**                                                                                                                    // 6663
 * @param {?object} props                                                                                              // 6664
 */                                                                                                                    // 6665
function assertValidProps(props) {                                                                                     // 6666
  if (!props) {                                                                                                        // 6667
    return;                                                                                                            // 6668
  }                                                                                                                    // 6669
  // Note the use of `==` which checks for null or undefined.                                                          // 6670
  ("production" !== "development" ? invariant(                                                                         // 6671
    props.children == null || props.dangerouslySetInnerHTML == null,                                                   // 6672
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'                                               // 6673
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));                                     // 6674
  ("production" !== "development" ? invariant(                                                                         // 6675
    props.style == null || typeof props.style === 'object',                                                            // 6676
    'The `style` prop expects a mapping from style properties to values, ' +                                           // 6677
    'not a string.'                                                                                                    // 6678
  ) : invariant(props.style == null || typeof props.style === 'object'));                                              // 6679
}                                                                                                                      // 6680
                                                                                                                       // 6681
function putListener(id, registrationName, listener, transaction) {                                                    // 6682
  var container = ReactMount.findReactContainerForID(id);                                                              // 6683
  if (container) {                                                                                                     // 6684
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?                                                               // 6685
      container.ownerDocument :                                                                                        // 6686
      container;                                                                                                       // 6687
    listenTo(registrationName, doc);                                                                                   // 6688
  }                                                                                                                    // 6689
  transaction.getPutListenerQueue().enqueuePutListener(                                                                // 6690
    id,                                                                                                                // 6691
    registrationName,                                                                                                  // 6692
    listener                                                                                                           // 6693
  );                                                                                                                   // 6694
}                                                                                                                      // 6695
                                                                                                                       // 6696
                                                                                                                       // 6697
/**                                                                                                                    // 6698
 * @constructor ReactDOMComponent                                                                                      // 6699
 * @extends ReactComponent                                                                                             // 6700
 * @extends ReactMultiChild                                                                                            // 6701
 */                                                                                                                    // 6702
function ReactDOMComponent(tag, omitClose) {                                                                           // 6703
  this._tagOpen = '<' + tag;                                                                                           // 6704
  this._tagClose = omitClose ? '' : '</' + tag + '>';                                                                  // 6705
  this.tagName = tag.toUpperCase();                                                                                    // 6706
}                                                                                                                      // 6707
                                                                                                                       // 6708
ReactDOMComponent.Mixin = {                                                                                            // 6709
                                                                                                                       // 6710
  /**                                                                                                                  // 6711
   * Generates root tag markup then recurses. This method has side effects and                                         // 6712
   * is not idempotent.                                                                                                // 6713
   *                                                                                                                   // 6714
   * @internal                                                                                                         // 6715
   * @param {string} rootID The root DOM ID for this node.                                                             // 6716
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 6717
   * @param {number} mountDepth number of components in the owner hierarchy                                            // 6718
   * @return {string} The computed markup.                                                                             // 6719
   */                                                                                                                  // 6720
  mountComponent: ReactPerf.measure(                                                                                   // 6721
    'ReactDOMComponent',                                                                                               // 6722
    'mountComponent',                                                                                                  // 6723
    function(rootID, transaction, mountDepth) {                                                                        // 6724
      ReactComponent.Mixin.mountComponent.call(                                                                        // 6725
        this,                                                                                                          // 6726
        rootID,                                                                                                        // 6727
        transaction,                                                                                                   // 6728
        mountDepth                                                                                                     // 6729
      );                                                                                                               // 6730
      assertValidProps(this.props);                                                                                    // 6731
      return (                                                                                                         // 6732
        this._createOpenTagMarkupAndPutListeners(transaction) +                                                        // 6733
        this._createContentMarkup(transaction) +                                                                       // 6734
        this._tagClose                                                                                                 // 6735
      );                                                                                                               // 6736
    }                                                                                                                  // 6737
  ),                                                                                                                   // 6738
                                                                                                                       // 6739
  /**                                                                                                                  // 6740
   * Creates markup for the open tag and all attributes.                                                               // 6741
   *                                                                                                                   // 6742
   * This method has side effects because events get registered.                                                       // 6743
   *                                                                                                                   // 6744
   * Iterating over object properties is faster than iterating over arrays.                                            // 6745
   * @see http://jsperf.com/obj-vs-arr-iteration                                                                       // 6746
   *                                                                                                                   // 6747
   * @private                                                                                                          // 6748
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 6749
   * @return {string} Markup of opening tag.                                                                           // 6750
   */                                                                                                                  // 6751
  _createOpenTagMarkupAndPutListeners: function(transaction) {                                                         // 6752
    var props = this.props;                                                                                            // 6753
    var ret = this._tagOpen;                                                                                           // 6754
                                                                                                                       // 6755
    for (var propKey in props) {                                                                                       // 6756
      if (!props.hasOwnProperty(propKey)) {                                                                            // 6757
        continue;                                                                                                      // 6758
      }                                                                                                                // 6759
      var propValue = props[propKey];                                                                                  // 6760
      if (propValue == null) {                                                                                         // 6761
        continue;                                                                                                      // 6762
      }                                                                                                                // 6763
      if (registrationNameModules[propKey]) {                                                                          // 6764
        putListener(this._rootNodeID, propKey, propValue, transaction);                                                // 6765
      } else {                                                                                                         // 6766
        if (propKey === STYLE) {                                                                                       // 6767
          if (propValue) {                                                                                             // 6768
            propValue = props.style = merge(props.style);                                                              // 6769
          }                                                                                                            // 6770
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);                                          // 6771
        }                                                                                                              // 6772
        var markup =                                                                                                   // 6773
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);                                           // 6774
        if (markup) {                                                                                                  // 6775
          ret += ' ' + markup;                                                                                         // 6776
        }                                                                                                              // 6777
      }                                                                                                                // 6778
    }                                                                                                                  // 6779
                                                                                                                       // 6780
    // For static pages, no need to put React ID and checksum. Saves lots of                                           // 6781
    // bytes.                                                                                                          // 6782
    if (transaction.renderToStaticMarkup) {                                                                            // 6783
      return ret + '>';                                                                                                // 6784
    }                                                                                                                  // 6785
                                                                                                                       // 6786
    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);                                       // 6787
    return ret + ' ' + markupForID + '>';                                                                              // 6788
  },                                                                                                                   // 6789
                                                                                                                       // 6790
  /**                                                                                                                  // 6791
   * Creates markup for the content between the tags.                                                                  // 6792
   *                                                                                                                   // 6793
   * @private                                                                                                          // 6794
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 6795
   * @return {string} Content markup.                                                                                  // 6796
   */                                                                                                                  // 6797
  _createContentMarkup: function(transaction) {                                                                        // 6798
    // Intentional use of != to avoid catching zero/false.                                                             // 6799
    var innerHTML = this.props.dangerouslySetInnerHTML;                                                                // 6800
    if (innerHTML != null) {                                                                                           // 6801
      if (innerHTML.__html != null) {                                                                                  // 6802
        return innerHTML.__html;                                                                                       // 6803
      }                                                                                                                // 6804
    } else {                                                                                                           // 6805
      var contentToUse =                                                                                               // 6806
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;                                        // 6807
      var childrenToUse = contentToUse != null ? null : this.props.children;                                           // 6808
      if (contentToUse != null) {                                                                                      // 6809
        return escapeTextForBrowser(contentToUse);                                                                     // 6810
      } else if (childrenToUse != null) {                                                                              // 6811
        var mountImages = this.mountChildren(                                                                          // 6812
          childrenToUse,                                                                                               // 6813
          transaction                                                                                                  // 6814
        );                                                                                                             // 6815
        return mountImages.join('');                                                                                   // 6816
      }                                                                                                                // 6817
    }                                                                                                                  // 6818
    return '';                                                                                                         // 6819
  },                                                                                                                   // 6820
                                                                                                                       // 6821
  receiveComponent: function(nextComponent, transaction) {                                                             // 6822
    if (nextComponent === this) {                                                                                      // 6823
      // Since props and context are immutable after the component is                                                  // 6824
      // mounted, we can do a cheap identity compare here to determine                                                 // 6825
      // if this is a superfluous reconcile.                                                                           // 6826
                                                                                                                       // 6827
      // TODO: compare the descriptor                                                                                  // 6828
      return;                                                                                                          // 6829
    }                                                                                                                  // 6830
                                                                                                                       // 6831
    assertValidProps(nextComponent.props);                                                                             // 6832
    ReactComponent.Mixin.receiveComponent.call(                                                                        // 6833
      this,                                                                                                            // 6834
      nextComponent,                                                                                                   // 6835
      transaction                                                                                                      // 6836
    );                                                                                                                 // 6837
  },                                                                                                                   // 6838
                                                                                                                       // 6839
  /**                                                                                                                  // 6840
   * Updates a native DOM component after it has already been allocated and                                            // 6841
   * attached to the DOM. Reconciles the root DOM node, then recurses.                                                 // 6842
   *                                                                                                                   // 6843
   * @param {ReactReconcileTransaction} transaction                                                                    // 6844
   * @param {object} prevProps                                                                                         // 6845
   * @internal                                                                                                         // 6846
   * @overridable                                                                                                      // 6847
   */                                                                                                                  // 6848
  updateComponent: ReactPerf.measure(                                                                                  // 6849
    'ReactDOMComponent',                                                                                               // 6850
    'updateComponent',                                                                                                 // 6851
    function(transaction, prevProps, prevOwner) {                                                                      // 6852
      ReactComponent.Mixin.updateComponent.call(                                                                       // 6853
        this,                                                                                                          // 6854
        transaction,                                                                                                   // 6855
        prevProps,                                                                                                     // 6856
        prevOwner                                                                                                      // 6857
      );                                                                                                               // 6858
      this._updateDOMProperties(prevProps, transaction);                                                               // 6859
      this._updateDOMChildren(prevProps, transaction);                                                                 // 6860
    }                                                                                                                  // 6861
  ),                                                                                                                   // 6862
                                                                                                                       // 6863
  /**                                                                                                                  // 6864
   * Reconciles the properties by detecting differences in property values and                                         // 6865
   * updating the DOM as necessary. This function is probably the single most                                          // 6866
   * critical path for performance optimization.                                                                       // 6867
   *                                                                                                                   // 6868
   * TODO: Benchmark whether checking for changed values in memory actually                                            // 6869
   *       improves performance (especially statically positioned elements).                                           // 6870
   * TODO: Benchmark the effects of putting this at the top since 99% of props                                         // 6871
   *       do not change for a given reconciliation.                                                                   // 6872
   * TODO: Benchmark areas that can be improved with caching.                                                          // 6873
   *                                                                                                                   // 6874
   * @private                                                                                                          // 6875
   * @param {object} lastProps                                                                                         // 6876
   * @param {ReactReconcileTransaction} transaction                                                                    // 6877
   */                                                                                                                  // 6878
  _updateDOMProperties: function(lastProps, transaction) {                                                             // 6879
    var nextProps = this.props;                                                                                        // 6880
    var propKey;                                                                                                       // 6881
    var styleName;                                                                                                     // 6882
    var styleUpdates;                                                                                                  // 6883
    for (propKey in lastProps) {                                                                                       // 6884
      if (nextProps.hasOwnProperty(propKey) ||                                                                         // 6885
         !lastProps.hasOwnProperty(propKey)) {                                                                         // 6886
        continue;                                                                                                      // 6887
      }                                                                                                                // 6888
      if (propKey === STYLE) {                                                                                         // 6889
        var lastStyle = lastProps[propKey];                                                                            // 6890
        for (styleName in lastStyle) {                                                                                 // 6891
          if (lastStyle.hasOwnProperty(styleName)) {                                                                   // 6892
            styleUpdates = styleUpdates || {};                                                                         // 6893
            styleUpdates[styleName] = '';                                                                              // 6894
          }                                                                                                            // 6895
        }                                                                                                              // 6896
      } else if (registrationNameModules[propKey]) {                                                                   // 6897
        deleteListener(this._rootNodeID, propKey);                                                                     // 6898
      } else if (                                                                                                      // 6899
          DOMProperty.isStandardName[propKey] ||                                                                       // 6900
          DOMProperty.isCustomAttribute(propKey)) {                                                                    // 6901
        ReactComponent.BackendIDOperations.deletePropertyByID(                                                         // 6902
          this._rootNodeID,                                                                                            // 6903
          propKey                                                                                                      // 6904
        );                                                                                                             // 6905
      }                                                                                                                // 6906
    }                                                                                                                  // 6907
    for (propKey in nextProps) {                                                                                       // 6908
      var nextProp = nextProps[propKey];                                                                               // 6909
      var lastProp = lastProps[propKey];                                                                               // 6910
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {                                               // 6911
        continue;                                                                                                      // 6912
      }                                                                                                                // 6913
      if (propKey === STYLE) {                                                                                         // 6914
        if (nextProp) {                                                                                                // 6915
          nextProp = nextProps.style = merge(nextProp);                                                                // 6916
        }                                                                                                              // 6917
        if (lastProp) {                                                                                                // 6918
          // Unset styles on `lastProp` but not on `nextProp`.                                                         // 6919
          for (styleName in lastProp) {                                                                                // 6920
            if (lastProp.hasOwnProperty(styleName) &&                                                                  // 6921
                !nextProp.hasOwnProperty(styleName)) {                                                                 // 6922
              styleUpdates = styleUpdates || {};                                                                       // 6923
              styleUpdates[styleName] = '';                                                                            // 6924
            }                                                                                                          // 6925
          }                                                                                                            // 6926
          // Update styles that changed since `lastProp`.                                                              // 6927
          for (styleName in nextProp) {                                                                                // 6928
            if (nextProp.hasOwnProperty(styleName) &&                                                                  // 6929
                lastProp[styleName] !== nextProp[styleName]) {                                                         // 6930
              styleUpdates = styleUpdates || {};                                                                       // 6931
              styleUpdates[styleName] = nextProp[styleName];                                                           // 6932
            }                                                                                                          // 6933
          }                                                                                                            // 6934
        } else {                                                                                                       // 6935
          // Relies on `updateStylesByID` not mutating `styleUpdates`.                                                 // 6936
          styleUpdates = nextProp;                                                                                     // 6937
        }                                                                                                              // 6938
      } else if (registrationNameModules[propKey]) {                                                                   // 6939
        putListener(this._rootNodeID, propKey, nextProp, transaction);                                                 // 6940
      } else if (                                                                                                      // 6941
          DOMProperty.isStandardName[propKey] ||                                                                       // 6942
          DOMProperty.isCustomAttribute(propKey)) {                                                                    // 6943
        ReactComponent.BackendIDOperations.updatePropertyByID(                                                         // 6944
          this._rootNodeID,                                                                                            // 6945
          propKey,                                                                                                     // 6946
          nextProp                                                                                                     // 6947
        );                                                                                                             // 6948
      }                                                                                                                // 6949
    }                                                                                                                  // 6950
    if (styleUpdates) {                                                                                                // 6951
      ReactComponent.BackendIDOperations.updateStylesByID(                                                             // 6952
        this._rootNodeID,                                                                                              // 6953
        styleUpdates                                                                                                   // 6954
      );                                                                                                               // 6955
    }                                                                                                                  // 6956
  },                                                                                                                   // 6957
                                                                                                                       // 6958
  /**                                                                                                                  // 6959
   * Reconciles the children with the various properties that affect the                                               // 6960
   * children content.                                                                                                 // 6961
   *                                                                                                                   // 6962
   * @param {object} lastProps                                                                                         // 6963
   * @param {ReactReconcileTransaction} transaction                                                                    // 6964
   */                                                                                                                  // 6965
  _updateDOMChildren: function(lastProps, transaction) {                                                               // 6966
    var nextProps = this.props;                                                                                        // 6967
                                                                                                                       // 6968
    var lastContent =                                                                                                  // 6969
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;                                            // 6970
    var nextContent =                                                                                                  // 6971
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;                                            // 6972
                                                                                                                       // 6973
    var lastHtml =                                                                                                     // 6974
      lastProps.dangerouslySetInnerHTML &&                                                                             // 6975
      lastProps.dangerouslySetInnerHTML.__html;                                                                        // 6976
    var nextHtml =                                                                                                     // 6977
      nextProps.dangerouslySetInnerHTML &&                                                                             // 6978
      nextProps.dangerouslySetInnerHTML.__html;                                                                        // 6979
                                                                                                                       // 6980
    // Note the use of `!=` which checks for null or undefined.                                                        // 6981
    var lastChildren = lastContent != null ? null : lastProps.children;                                                // 6982
    var nextChildren = nextContent != null ? null : nextProps.children;                                                // 6983
                                                                                                                       // 6984
    // If we're switching from children to content/html or vice versa, remove                                          // 6985
    // the old content                                                                                                 // 6986
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;                                                // 6987
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;                                                // 6988
    if (lastChildren != null && nextChildren == null) {                                                                // 6989
      this.updateChildren(null, transaction);                                                                          // 6990
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {                                                        // 6991
      this.updateTextContent('');                                                                                      // 6992
    }                                                                                                                  // 6993
                                                                                                                       // 6994
    if (nextContent != null) {                                                                                         // 6995
      if (lastContent !== nextContent) {                                                                               // 6996
        this.updateTextContent('' + nextContent);                                                                      // 6997
      }                                                                                                                // 6998
    } else if (nextHtml != null) {                                                                                     // 6999
      if (lastHtml !== nextHtml) {                                                                                     // 7000
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(                                                        // 7001
          this._rootNodeID,                                                                                            // 7002
          nextHtml                                                                                                     // 7003
        );                                                                                                             // 7004
      }                                                                                                                // 7005
    } else if (nextChildren != null) {                                                                                 // 7006
      this.updateChildren(nextChildren, transaction);                                                                  // 7007
    }                                                                                                                  // 7008
  },                                                                                                                   // 7009
                                                                                                                       // 7010
  /**                                                                                                                  // 7011
   * Destroys all event registrations for this instance. Does not remove from                                          // 7012
   * the DOM. That must be done by the parent.                                                                         // 7013
   *                                                                                                                   // 7014
   * @internal                                                                                                         // 7015
   */                                                                                                                  // 7016
  unmountComponent: function() {                                                                                       // 7017
    this.unmountChildren();                                                                                            // 7018
    ReactEventEmitter.deleteAllListeners(this._rootNodeID);                                                            // 7019
    ReactComponent.Mixin.unmountComponent.call(this);                                                                  // 7020
  }                                                                                                                    // 7021
                                                                                                                       // 7022
};                                                                                                                     // 7023
                                                                                                                       // 7024
mixInto(ReactDOMComponent, ReactComponent.Mixin);                                                                      // 7025
mixInto(ReactDOMComponent, ReactDOMComponent.Mixin);                                                                   // 7026
mixInto(ReactDOMComponent, ReactMultiChild.Mixin);                                                                     // 7027
mixInto(ReactDOMComponent, ReactBrowserComponentMixin);                                                                // 7028
                                                                                                                       // 7029
module.exports = ReactDOMComponent;                                                                                    // 7030
                                                                                                                       // 7031
},{"./CSSPropertyOperations":3,"./DOMProperty":8,"./DOMPropertyOperations":9,"./ReactBrowserComponentMixin":25,"./ReactComponent":27,"./ReactEventEmitter":48,"./ReactMount":55,"./ReactMultiChild":57,"./ReactPerf":60,"./escapeTextForBrowser":98,"./invariant":112,"./keyOf":119,"./merge":121,"./mixInto":124}],35:[function(_dereq_,module,exports){
/**                                                                                                                    // 7033
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 7034
 *                                                                                                                     // 7035
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7036
 * you may not use this file except in compliance with the License.                                                    // 7037
 * You may obtain a copy of the License at                                                                             // 7038
 *                                                                                                                     // 7039
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7040
 *                                                                                                                     // 7041
 * Unless required by applicable law or agreed to in writing, software                                                 // 7042
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7043
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7044
 * See the License for the specific language governing permissions and                                                 // 7045
 * limitations under the License.                                                                                      // 7046
 *                                                                                                                     // 7047
 * @providesModule ReactDOMForm                                                                                        // 7048
 */                                                                                                                    // 7049
                                                                                                                       // 7050
"use strict";                                                                                                          // 7051
                                                                                                                       // 7052
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");                                              // 7053
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");                                                    // 7054
var ReactDOM = _dereq_("./ReactDOM");                                                                                  // 7055
var ReactEventEmitter = _dereq_("./ReactEventEmitter");                                                                // 7056
var EventConstants = _dereq_("./EventConstants");                                                                      // 7057
                                                                                                                       // 7058
// Store a reference to the <form> `ReactDOMComponent`.                                                                // 7059
var form = ReactDOM.form;                                                                                              // 7060
                                                                                                                       // 7061
/**                                                                                                                    // 7062
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need                                           // 7063
 * to capture it on the <form> element itself. There are lots of hacks we could                                        // 7064
 * do to accomplish this, but the most reliable is to make <form> a                                                    // 7065
 * composite component and use `componentDidMount` to attach the event handlers.                                       // 7066
 */                                                                                                                    // 7067
var ReactDOMForm = ReactCompositeComponent.createClass({                                                               // 7068
  displayName: 'ReactDOMForm',                                                                                         // 7069
                                                                                                                       // 7070
  mixins: [ReactBrowserComponentMixin],                                                                                // 7071
                                                                                                                       // 7072
  render: function() {                                                                                                 // 7073
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,                                         // 7074
    // `jshint` fails to parse JSX so in order for linting to work in the open                                         // 7075
    // source repo, we need to just use `ReactDOM.form`.                                                               // 7076
    return this.transferPropsTo(form(null, this.props.children));                                                      // 7077
  },                                                                                                                   // 7078
                                                                                                                       // 7079
  componentDidMount: function() {                                                                                      // 7080
    ReactEventEmitter.trapBubbledEvent(                                                                                // 7081
      EventConstants.topLevelTypes.topReset,                                                                           // 7082
      'reset',                                                                                                         // 7083
      this.getDOMNode()                                                                                                // 7084
    );                                                                                                                 // 7085
    ReactEventEmitter.trapBubbledEvent(                                                                                // 7086
      EventConstants.topLevelTypes.topSubmit,                                                                          // 7087
      'submit',                                                                                                        // 7088
      this.getDOMNode()                                                                                                // 7089
    );                                                                                                                 // 7090
  }                                                                                                                    // 7091
});                                                                                                                    // 7092
                                                                                                                       // 7093
module.exports = ReactDOMForm;                                                                                         // 7094
                                                                                                                       // 7095
},{"./EventConstants":14,"./ReactBrowserComponentMixin":25,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactEventEmitter":48}],36:[function(_dereq_,module,exports){
/**                                                                                                                    // 7097
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 7098
 *                                                                                                                     // 7099
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7100
 * you may not use this file except in compliance with the License.                                                    // 7101
 * You may obtain a copy of the License at                                                                             // 7102
 *                                                                                                                     // 7103
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7104
 *                                                                                                                     // 7105
 * Unless required by applicable law or agreed to in writing, software                                                 // 7106
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7107
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7108
 * See the License for the specific language governing permissions and                                                 // 7109
 * limitations under the License.                                                                                      // 7110
 *                                                                                                                     // 7111
 * @providesModule ReactDOMIDOperations                                                                                // 7112
 * @typechecks static-only                                                                                             // 7113
 */                                                                                                                    // 7114
                                                                                                                       // 7115
/*jslint evil: true */                                                                                                 // 7116
                                                                                                                       // 7117
"use strict";                                                                                                          // 7118
                                                                                                                       // 7119
var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");                                                        // 7120
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");                                                        // 7121
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");                                                        // 7122
var ReactMount = _dereq_("./ReactMount");                                                                              // 7123
var ReactPerf = _dereq_("./ReactPerf");                                                                                // 7124
                                                                                                                       // 7125
var invariant = _dereq_("./invariant");                                                                                // 7126
                                                                                                                       // 7127
/**                                                                                                                    // 7128
 * Errors for properties that should not be updated with `updatePropertyById()`.                                       // 7129
 *                                                                                                                     // 7130
 * @type {object}                                                                                                      // 7131
 * @private                                                                                                            // 7132
 */                                                                                                                    // 7133
var INVALID_PROPERTY_ERRORS = {                                                                                        // 7134
  dangerouslySetInnerHTML:                                                                                             // 7135
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',                                            // 7136
  style: '`style` must be set using `updateStylesByID()`.'                                                             // 7137
};                                                                                                                     // 7138
                                                                                                                       // 7139
var useWhitespaceWorkaround;                                                                                           // 7140
                                                                                                                       // 7141
/**                                                                                                                    // 7142
 * Operations used to process updates to DOM nodes. This is made injectable via                                        // 7143
 * `ReactComponent.BackendIDOperations`.                                                                               // 7144
 */                                                                                                                    // 7145
var ReactDOMIDOperations = {                                                                                           // 7146
                                                                                                                       // 7147
  /**                                                                                                                  // 7148
   * Updates a DOM node with new property values. This should only be used to                                          // 7149
   * update DOM properties in `DOMProperty`.                                                                           // 7150
   *                                                                                                                   // 7151
   * @param {string} id ID of the node to update.                                                                      // 7152
   * @param {string} name A valid property name, see `DOMProperty`.                                                    // 7153
   * @param {*} value New value of the property.                                                                       // 7154
   * @internal                                                                                                         // 7155
   */                                                                                                                  // 7156
  updatePropertyByID: ReactPerf.measure(                                                                               // 7157
    'ReactDOMIDOperations',                                                                                            // 7158
    'updatePropertyByID',                                                                                              // 7159
    function(id, name, value) {                                                                                        // 7160
      var node = ReactMount.getNode(id);                                                                               // 7161
      ("production" !== "development" ? invariant(                                                                     // 7162
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),                                                                 // 7163
        'updatePropertyByID(...): %s',                                                                                 // 7164
        INVALID_PROPERTY_ERRORS[name]                                                                                  // 7165
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));                                                   // 7166
                                                                                                                       // 7167
      // If we're updating to null or undefined, we should remove the property                                         // 7168
      // from the DOM node instead of inadvertantly setting to a string. This                                          // 7169
      // brings us in line with the same behavior we have on initial render.                                           // 7170
      if (value != null) {                                                                                             // 7171
        DOMPropertyOperations.setValueForProperty(node, name, value);                                                  // 7172
      } else {                                                                                                         // 7173
        DOMPropertyOperations.deleteValueForProperty(node, name);                                                      // 7174
      }                                                                                                                // 7175
    }                                                                                                                  // 7176
  ),                                                                                                                   // 7177
                                                                                                                       // 7178
  /**                                                                                                                  // 7179
   * Updates a DOM node to remove a property. This should only be used to remove                                       // 7180
   * DOM properties in `DOMProperty`.                                                                                  // 7181
   *                                                                                                                   // 7182
   * @param {string} id ID of the node to update.                                                                      // 7183
   * @param {string} name A property name to remove, see `DOMProperty`.                                                // 7184
   * @internal                                                                                                         // 7185
   */                                                                                                                  // 7186
  deletePropertyByID: ReactPerf.measure(                                                                               // 7187
    'ReactDOMIDOperations',                                                                                            // 7188
    'deletePropertyByID',                                                                                              // 7189
    function(id, name, value) {                                                                                        // 7190
      var node = ReactMount.getNode(id);                                                                               // 7191
      ("production" !== "development" ? invariant(                                                                     // 7192
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),                                                                 // 7193
        'updatePropertyByID(...): %s',                                                                                 // 7194
        INVALID_PROPERTY_ERRORS[name]                                                                                  // 7195
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));                                                   // 7196
      DOMPropertyOperations.deleteValueForProperty(node, name, value);                                                 // 7197
    }                                                                                                                  // 7198
  ),                                                                                                                   // 7199
                                                                                                                       // 7200
  /**                                                                                                                  // 7201
   * Updates a DOM node with new style values. If a value is specified as '',                                          // 7202
   * the corresponding style property will be unset.                                                                   // 7203
   *                                                                                                                   // 7204
   * @param {string} id ID of the node to update.                                                                      // 7205
   * @param {object} styles Mapping from styles to values.                                                             // 7206
   * @internal                                                                                                         // 7207
   */                                                                                                                  // 7208
  updateStylesByID: ReactPerf.measure(                                                                                 // 7209
    'ReactDOMIDOperations',                                                                                            // 7210
    'updateStylesByID',                                                                                                // 7211
    function(id, styles) {                                                                                             // 7212
      var node = ReactMount.getNode(id);                                                                               // 7213
      CSSPropertyOperations.setValueForStyles(node, styles);                                                           // 7214
    }                                                                                                                  // 7215
  ),                                                                                                                   // 7216
                                                                                                                       // 7217
  /**                                                                                                                  // 7218
   * Updates a DOM node's innerHTML.                                                                                   // 7219
   *                                                                                                                   // 7220
   * @param {string} id ID of the node to update.                                                                      // 7221
   * @param {string} html An HTML string.                                                                              // 7222
   * @internal                                                                                                         // 7223
   */                                                                                                                  // 7224
  updateInnerHTMLByID: ReactPerf.measure(                                                                              // 7225
    'ReactDOMIDOperations',                                                                                            // 7226
    'updateInnerHTMLByID',                                                                                             // 7227
    function(id, html) {                                                                                               // 7228
      var node = ReactMount.getNode(id);                                                                               // 7229
                                                                                                                       // 7230
      // IE8: When updating a just created node with innerHTML only leading                                            // 7231
      // whitespace is removed. When updating an existing node with innerHTML                                          // 7232
      // whitespace in root TextNodes is also collapsed.                                                               // 7233
      // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html                                          // 7234
                                                                                                                       // 7235
      if (useWhitespaceWorkaround === undefined) {                                                                     // 7236
        // Feature detection; only IE8 is known to behave improperly like this.                                        // 7237
        var temp = document.createElement('div');                                                                      // 7238
        temp.innerHTML = ' ';                                                                                          // 7239
        useWhitespaceWorkaround = temp.innerHTML === '';                                                               // 7240
      }                                                                                                                // 7241
                                                                                                                       // 7242
      if (useWhitespaceWorkaround) {                                                                                   // 7243
        // Magic theory: IE8 supposedly differentiates between added and updated                                       // 7244
        // nodes when processing innerHTML, innerHTML on updated nodes suffers                                         // 7245
        // from worse whitespace behavior. Re-adding a node like this triggers                                         // 7246
        // the initial and more favorable whitespace behavior.                                                         // 7247
        node.parentNode.replaceChild(node, node);                                                                      // 7248
      }                                                                                                                // 7249
                                                                                                                       // 7250
      if (useWhitespaceWorkaround && html.match(/^[ \r\n\t\f]/)) {                                                     // 7251
        // Recover leading whitespace by temporarily prepending any character.                                         // 7252
        // \uFEFF has the potential advantage of being zero-width/invisible.                                           // 7253
        node.innerHTML = '\uFEFF' + html;                                                                              // 7254
        node.firstChild.deleteData(0, 1);                                                                              // 7255
      } else {                                                                                                         // 7256
        node.innerHTML = html;                                                                                         // 7257
      }                                                                                                                // 7258
    }                                                                                                                  // 7259
  ),                                                                                                                   // 7260
                                                                                                                       // 7261
  /**                                                                                                                  // 7262
   * Updates a DOM node's text content set by `props.content`.                                                         // 7263
   *                                                                                                                   // 7264
   * @param {string} id ID of the node to update.                                                                      // 7265
   * @param {string} content Text content.                                                                             // 7266
   * @internal                                                                                                         // 7267
   */                                                                                                                  // 7268
  updateTextContentByID: ReactPerf.measure(                                                                            // 7269
    'ReactDOMIDOperations',                                                                                            // 7270
    'updateTextContentByID',                                                                                           // 7271
    function(id, content) {                                                                                            // 7272
      var node = ReactMount.getNode(id);                                                                               // 7273
      DOMChildrenOperations.updateTextContent(node, content);                                                          // 7274
    }                                                                                                                  // 7275
  ),                                                                                                                   // 7276
                                                                                                                       // 7277
  /**                                                                                                                  // 7278
   * Replaces a DOM node that exists in the document with markup.                                                      // 7279
   *                                                                                                                   // 7280
   * @param {string} id ID of child to be replaced.                                                                    // 7281
   * @param {string} markup Dangerous markup to inject in place of child.                                              // 7282
   * @internal                                                                                                         // 7283
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}                                                                    // 7284
   */                                                                                                                  // 7285
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(                                                             // 7286
    'ReactDOMIDOperations',                                                                                            // 7287
    'dangerouslyReplaceNodeWithMarkupByID',                                                                            // 7288
    function(id, markup) {                                                                                             // 7289
      var node = ReactMount.getNode(id);                                                                               // 7290
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);                                            // 7291
    }                                                                                                                  // 7292
  ),                                                                                                                   // 7293
                                                                                                                       // 7294
  /**                                                                                                                  // 7295
   * Updates a component's children by processing a series of updates.                                                 // 7296
   *                                                                                                                   // 7297
   * @param {array<object>} updates List of update configurations.                                                     // 7298
   * @param {array<string>} markup List of markup strings.                                                             // 7299
   * @internal                                                                                                         // 7300
   */                                                                                                                  // 7301
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(                                                                // 7302
    'ReactDOMIDOperations',                                                                                            // 7303
    'dangerouslyProcessChildrenUpdates',                                                                               // 7304
    function(updates, markup) {                                                                                        // 7305
      for (var i = 0; i < updates.length; i++) {                                                                       // 7306
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);                                               // 7307
      }                                                                                                                // 7308
      DOMChildrenOperations.processUpdates(updates, markup);                                                           // 7309
    }                                                                                                                  // 7310
  )                                                                                                                    // 7311
};                                                                                                                     // 7312
                                                                                                                       // 7313
module.exports = ReactDOMIDOperations;                                                                                 // 7314
                                                                                                                       // 7315
},{"./CSSPropertyOperations":3,"./DOMChildrenOperations":7,"./DOMPropertyOperations":9,"./ReactMount":55,"./ReactPerf":60,"./invariant":112}],37:[function(_dereq_,module,exports){
/**                                                                                                                    // 7317
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 7318
 *                                                                                                                     // 7319
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7320
 * you may not use this file except in compliance with the License.                                                    // 7321
 * You may obtain a copy of the License at                                                                             // 7322
 *                                                                                                                     // 7323
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7324
 *                                                                                                                     // 7325
 * Unless required by applicable law or agreed to in writing, software                                                 // 7326
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7327
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7328
 * See the License for the specific language governing permissions and                                                 // 7329
 * limitations under the License.                                                                                      // 7330
 *                                                                                                                     // 7331
 * @providesModule ReactDOMImg                                                                                         // 7332
 */                                                                                                                    // 7333
                                                                                                                       // 7334
"use strict";                                                                                                          // 7335
                                                                                                                       // 7336
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");                                              // 7337
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");                                                    // 7338
var ReactDOM = _dereq_("./ReactDOM");                                                                                  // 7339
var ReactEventEmitter = _dereq_("./ReactEventEmitter");                                                                // 7340
var EventConstants = _dereq_("./EventConstants");                                                                      // 7341
                                                                                                                       // 7342
// Store a reference to the <img> `ReactDOMComponent`.                                                                 // 7343
var img = ReactDOM.img;                                                                                                // 7344
                                                                                                                       // 7345
/**                                                                                                                    // 7346
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to                                          // 7347
 * capture it on the <img> element itself. There are lots of hacks we could do                                         // 7348
 * to accomplish this, but the most reliable is to make <img> a composite                                              // 7349
 * component and use `componentDidMount` to attach the event handlers.                                                 // 7350
 */                                                                                                                    // 7351
var ReactDOMImg = ReactCompositeComponent.createClass({                                                                // 7352
  displayName: 'ReactDOMImg',                                                                                          // 7353
  tagName: 'IMG',                                                                                                      // 7354
                                                                                                                       // 7355
  mixins: [ReactBrowserComponentMixin],                                                                                // 7356
                                                                                                                       // 7357
  render: function() {                                                                                                 // 7358
    return img(this.props);                                                                                            // 7359
  },                                                                                                                   // 7360
                                                                                                                       // 7361
  componentDidMount: function() {                                                                                      // 7362
    var node = this.getDOMNode();                                                                                      // 7363
    ReactEventEmitter.trapBubbledEvent(                                                                                // 7364
      EventConstants.topLevelTypes.topLoad,                                                                            // 7365
      'load',                                                                                                          // 7366
      node                                                                                                             // 7367
    );                                                                                                                 // 7368
    ReactEventEmitter.trapBubbledEvent(                                                                                // 7369
      EventConstants.topLevelTypes.topError,                                                                           // 7370
      'error',                                                                                                         // 7371
      node                                                                                                             // 7372
    );                                                                                                                 // 7373
  }                                                                                                                    // 7374
});                                                                                                                    // 7375
                                                                                                                       // 7376
module.exports = ReactDOMImg;                                                                                          // 7377
                                                                                                                       // 7378
},{"./EventConstants":14,"./ReactBrowserComponentMixin":25,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactEventEmitter":48}],38:[function(_dereq_,module,exports){
/**                                                                                                                    // 7380
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 7381
 *                                                                                                                     // 7382
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7383
 * you may not use this file except in compliance with the License.                                                    // 7384
 * You may obtain a copy of the License at                                                                             // 7385
 *                                                                                                                     // 7386
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7387
 *                                                                                                                     // 7388
 * Unless required by applicable law or agreed to in writing, software                                                 // 7389
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7390
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7391
 * See the License for the specific language governing permissions and                                                 // 7392
 * limitations under the License.                                                                                      // 7393
 *                                                                                                                     // 7394
 * @providesModule ReactDOMInput                                                                                       // 7395
 */                                                                                                                    // 7396
                                                                                                                       // 7397
"use strict";                                                                                                          // 7398
                                                                                                                       // 7399
var AutoFocusMixin = _dereq_("./AutoFocusMixin");                                                                      // 7400
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");                                                        // 7401
var LinkedValueUtils = _dereq_("./LinkedValueUtils");                                                                  // 7402
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");                                              // 7403
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");                                                    // 7404
var ReactDOM = _dereq_("./ReactDOM");                                                                                  // 7405
var ReactMount = _dereq_("./ReactMount");                                                                              // 7406
                                                                                                                       // 7407
var invariant = _dereq_("./invariant");                                                                                // 7408
var merge = _dereq_("./merge");                                                                                        // 7409
                                                                                                                       // 7410
// Store a reference to the <input> `ReactDOMComponent`.                                                               // 7411
var input = ReactDOM.input;                                                                                            // 7412
                                                                                                                       // 7413
var instancesByReactID = {};                                                                                           // 7414
                                                                                                                       // 7415
/**                                                                                                                    // 7416
 * Implements an <input> native component that allows setting these optional                                           // 7417
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.                                                    // 7418
 *                                                                                                                     // 7419
 * If `checked` or `value` are not supplied (or null/undefined), user actions                                          // 7420
 * that affect the checked state or value will trigger updates to the element.                                         // 7421
 *                                                                                                                     // 7422
 * If they are supplied (and not null/undefined), the rendered element will not                                        // 7423
 * trigger updates to the element. Instead, the props must change in order for                                         // 7424
 * the rendered element to be updated.                                                                                 // 7425
 *                                                                                                                     // 7426
 * The rendered element will be initialized as unchecked (or `defaultChecked`)                                         // 7427
 * with an empty value (or `defaultValue`).                                                                            // 7428
 *                                                                                                                     // 7429
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html                                             // 7430
 */                                                                                                                    // 7431
var ReactDOMInput = ReactCompositeComponent.createClass({                                                              // 7432
  displayName: 'ReactDOMInput',                                                                                        // 7433
                                                                                                                       // 7434
  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],                                        // 7435
                                                                                                                       // 7436
  getInitialState: function() {                                                                                        // 7437
    var defaultValue = this.props.defaultValue;                                                                        // 7438
    return {                                                                                                           // 7439
      checked: this.props.defaultChecked || false,                                                                     // 7440
      value: defaultValue != null ? defaultValue : null                                                                // 7441
    };                                                                                                                 // 7442
  },                                                                                                                   // 7443
                                                                                                                       // 7444
  shouldComponentUpdate: function() {                                                                                  // 7445
    // Defer any updates to this component during the `onChange` handler.                                              // 7446
    return !this._isChanging;                                                                                          // 7447
  },                                                                                                                   // 7448
                                                                                                                       // 7449
  render: function() {                                                                                                 // 7450
    // Clone `this.props` so we don't mutate the input.                                                                // 7451
    var props = merge(this.props);                                                                                     // 7452
                                                                                                                       // 7453
    props.defaultChecked = null;                                                                                       // 7454
    props.defaultValue = null;                                                                                         // 7455
                                                                                                                       // 7456
    var value = LinkedValueUtils.getValue(this);                                                                       // 7457
    props.value = value != null ? value : this.state.value;                                                            // 7458
                                                                                                                       // 7459
    var checked = LinkedValueUtils.getChecked(this);                                                                   // 7460
    props.checked = checked != null ? checked : this.state.checked;                                                    // 7461
                                                                                                                       // 7462
    props.onChange = this._handleChange;                                                                               // 7463
                                                                                                                       // 7464
    return input(props, this.props.children);                                                                          // 7465
  },                                                                                                                   // 7466
                                                                                                                       // 7467
  componentDidMount: function() {                                                                                      // 7468
    var id = ReactMount.getID(this.getDOMNode());                                                                      // 7469
    instancesByReactID[id] = this;                                                                                     // 7470
  },                                                                                                                   // 7471
                                                                                                                       // 7472
  componentWillUnmount: function() {                                                                                   // 7473
    var rootNode = this.getDOMNode();                                                                                  // 7474
    var id = ReactMount.getID(rootNode);                                                                               // 7475
    delete instancesByReactID[id];                                                                                     // 7476
  },                                                                                                                   // 7477
                                                                                                                       // 7478
  componentDidUpdate: function(prevProps, prevState, prevContext) {                                                    // 7479
    var rootNode = this.getDOMNode();                                                                                  // 7480
    if (this.props.checked != null) {                                                                                  // 7481
      DOMPropertyOperations.setValueForProperty(                                                                       // 7482
        rootNode,                                                                                                      // 7483
        'checked',                                                                                                     // 7484
        this.props.checked || false                                                                                    // 7485
      );                                                                                                               // 7486
    }                                                                                                                  // 7487
                                                                                                                       // 7488
    var value = LinkedValueUtils.getValue(this);                                                                       // 7489
    if (value != null) {                                                                                               // 7490
      // Cast `value` to a string to ensure the value is set correctly. While                                          // 7491
      // browsers typically do this as necessary, jsdom doesn't.                                                       // 7492
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);                                        // 7493
    }                                                                                                                  // 7494
  },                                                                                                                   // 7495
                                                                                                                       // 7496
  _handleChange: function(event) {                                                                                     // 7497
    var returnValue;                                                                                                   // 7498
    var onChange = LinkedValueUtils.getOnChange(this);                                                                 // 7499
    if (onChange) {                                                                                                    // 7500
      this._isChanging = true;                                                                                         // 7501
      returnValue = onChange.call(this, event);                                                                        // 7502
      this._isChanging = false;                                                                                        // 7503
    }                                                                                                                  // 7504
    this.setState({                                                                                                    // 7505
      checked: event.target.checked,                                                                                   // 7506
      value: event.target.value                                                                                        // 7507
    });                                                                                                                // 7508
                                                                                                                       // 7509
    var name = this.props.name;                                                                                        // 7510
    if (this.props.type === 'radio' && name != null) {                                                                 // 7511
      var rootNode = this.getDOMNode();                                                                                // 7512
      var queryRoot = rootNode;                                                                                        // 7513
                                                                                                                       // 7514
      while (queryRoot.parentNode) {                                                                                   // 7515
        queryRoot = queryRoot.parentNode;                                                                              // 7516
      }                                                                                                                // 7517
                                                                                                                       // 7518
      // If `rootNode.form` was non-null, then we could try `form.elements`,                                           // 7519
      // but that sometimes behaves strangely in IE8. We could also try using                                          // 7520
      // `form.getElementsByName`, but that will only return direct children                                           // 7521
      // and won't include inputs that use the HTML5 `form=` attribute. Since                                          // 7522
      // the input might not even be in a form, let's just use the global                                              // 7523
      // `querySelectorAll` to ensure we don't miss anything.                                                          // 7524
      var group = queryRoot.querySelectorAll(                                                                          // 7525
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');                                                // 7526
                                                                                                                       // 7527
      for (var i = 0, groupLen = group.length; i < groupLen; i++) {                                                    // 7528
        var otherNode = group[i];                                                                                      // 7529
        if (otherNode === rootNode ||                                                                                  // 7530
            otherNode.form !== rootNode.form) {                                                                        // 7531
          continue;                                                                                                    // 7532
        }                                                                                                              // 7533
        var otherID = ReactMount.getID(otherNode);                                                                     // 7534
        ("production" !== "development" ? invariant(                                                                   // 7535
          otherID,                                                                                                     // 7536
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +                                         // 7537
          'same `name` is not supported.'                                                                              // 7538
        ) : invariant(otherID));                                                                                       // 7539
        var otherInstance = instancesByReactID[otherID];                                                               // 7540
        ("production" !== "development" ? invariant(                                                                   // 7541
          otherInstance,                                                                                               // 7542
          'ReactDOMInput: Unknown radio button ID %s.',                                                                // 7543
          otherID                                                                                                      // 7544
        ) : invariant(otherInstance));                                                                                 // 7545
        // In some cases, this will actually change the `checked` state value.                                         // 7546
        // In other cases, there's no change but this forces a reconcile upon                                          // 7547
        // which componentDidUpdate will reset the DOM property to whatever it                                         // 7548
        // should be.                                                                                                  // 7549
        otherInstance.setState({                                                                                       // 7550
          checked: false                                                                                               // 7551
        });                                                                                                            // 7552
      }                                                                                                                // 7553
    }                                                                                                                  // 7554
                                                                                                                       // 7555
    return returnValue;                                                                                                // 7556
  }                                                                                                                    // 7557
                                                                                                                       // 7558
});                                                                                                                    // 7559
                                                                                                                       // 7560
module.exports = ReactDOMInput;                                                                                        // 7561
                                                                                                                       // 7562
},{"./AutoFocusMixin":1,"./DOMPropertyOperations":9,"./LinkedValueUtils":21,"./ReactBrowserComponentMixin":25,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactMount":55,"./invariant":112,"./merge":121}],39:[function(_dereq_,module,exports){
/**                                                                                                                    // 7564
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 7565
 *                                                                                                                     // 7566
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7567
 * you may not use this file except in compliance with the License.                                                    // 7568
 * You may obtain a copy of the License at                                                                             // 7569
 *                                                                                                                     // 7570
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7571
 *                                                                                                                     // 7572
 * Unless required by applicable law or agreed to in writing, software                                                 // 7573
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7574
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7575
 * See the License for the specific language governing permissions and                                                 // 7576
 * limitations under the License.                                                                                      // 7577
 *                                                                                                                     // 7578
 * @providesModule ReactDOMOption                                                                                      // 7579
 */                                                                                                                    // 7580
                                                                                                                       // 7581
"use strict";                                                                                                          // 7582
                                                                                                                       // 7583
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");                                              // 7584
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");                                                    // 7585
var ReactDOM = _dereq_("./ReactDOM");                                                                                  // 7586
                                                                                                                       // 7587
var warning = _dereq_("./warning");                                                                                    // 7588
                                                                                                                       // 7589
// Store a reference to the <option> `ReactDOMComponent`.                                                              // 7590
var option = ReactDOM.option;                                                                                          // 7591
                                                                                                                       // 7592
/**                                                                                                                    // 7593
 * Implements an <option> native component that warns when `selected` is set.                                          // 7594
 */                                                                                                                    // 7595
var ReactDOMOption = ReactCompositeComponent.createClass({                                                             // 7596
  displayName: 'ReactDOMOption',                                                                                       // 7597
                                                                                                                       // 7598
  mixins: [ReactBrowserComponentMixin],                                                                                // 7599
                                                                                                                       // 7600
  componentWillMount: function() {                                                                                     // 7601
    // TODO (yungsters): Remove support for `selected` in <option>.                                                    // 7602
    if ("production" !== "development") {                                                                              // 7603
      ("production" !== "development" ? warning(                                                                       // 7604
        this.props.selected == null,                                                                                   // 7605
        'Use the `defaultValue` or `value` props on <select> instead of ' +                                            // 7606
        'setting `selected` on <option>.'                                                                              // 7607
      ) : null);                                                                                                       // 7608
    }                                                                                                                  // 7609
  },                                                                                                                   // 7610
                                                                                                                       // 7611
  render: function() {                                                                                                 // 7612
    return option(this.props, this.props.children);                                                                    // 7613
  }                                                                                                                    // 7614
                                                                                                                       // 7615
});                                                                                                                    // 7616
                                                                                                                       // 7617
module.exports = ReactDOMOption;                                                                                       // 7618
                                                                                                                       // 7619
},{"./ReactBrowserComponentMixin":25,"./ReactCompositeComponent":29,"./ReactDOM":32,"./warning":134}],40:[function(_dereq_,module,exports){
/**                                                                                                                    // 7621
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 7622
 *                                                                                                                     // 7623
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7624
 * you may not use this file except in compliance with the License.                                                    // 7625
 * You may obtain a copy of the License at                                                                             // 7626
 *                                                                                                                     // 7627
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7628
 *                                                                                                                     // 7629
 * Unless required by applicable law or agreed to in writing, software                                                 // 7630
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7631
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7632
 * See the License for the specific language governing permissions and                                                 // 7633
 * limitations under the License.                                                                                      // 7634
 *                                                                                                                     // 7635
 * @providesModule ReactDOMSelect                                                                                      // 7636
 */                                                                                                                    // 7637
                                                                                                                       // 7638
"use strict";                                                                                                          // 7639
                                                                                                                       // 7640
var AutoFocusMixin = _dereq_("./AutoFocusMixin");                                                                      // 7641
var LinkedValueUtils = _dereq_("./LinkedValueUtils");                                                                  // 7642
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");                                              // 7643
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");                                                    // 7644
var ReactDOM = _dereq_("./ReactDOM");                                                                                  // 7645
                                                                                                                       // 7646
var invariant = _dereq_("./invariant");                                                                                // 7647
var merge = _dereq_("./merge");                                                                                        // 7648
                                                                                                                       // 7649
// Store a reference to the <select> `ReactDOMComponent`.                                                              // 7650
var select = ReactDOM.select;                                                                                          // 7651
                                                                                                                       // 7652
/**                                                                                                                    // 7653
 * Validation function for `value` and `defaultValue`.                                                                 // 7654
 * @private                                                                                                            // 7655
 */                                                                                                                    // 7656
function selectValueType(props, propName, componentName) {                                                             // 7657
  if (props[propName] == null) {                                                                                       // 7658
    return;                                                                                                            // 7659
  }                                                                                                                    // 7660
  if (props.multiple) {                                                                                                // 7661
    ("production" !== "development" ? invariant(                                                                       // 7662
      Array.isArray(props[propName]),                                                                                  // 7663
      'The `%s` prop supplied to <select> must be an array if `multiple` is ' +                                        // 7664
      'true.',                                                                                                         // 7665
      propName                                                                                                         // 7666
    ) : invariant(Array.isArray(props[propName])));                                                                    // 7667
  } else {                                                                                                             // 7668
    ("production" !== "development" ? invariant(                                                                       // 7669
      !Array.isArray(props[propName]),                                                                                 // 7670
      'The `%s` prop supplied to <select> must be a scalar value if ' +                                                // 7671
      '`multiple` is false.',                                                                                          // 7672
      propName                                                                                                         // 7673
    ) : invariant(!Array.isArray(props[propName])));                                                                   // 7674
  }                                                                                                                    // 7675
}                                                                                                                      // 7676
                                                                                                                       // 7677
/**                                                                                                                    // 7678
 * If `value` is supplied, updates <option> elements on mount and update.                                              // 7679
 * @param {ReactComponent} component Instance of ReactDOMSelect                                                        // 7680
 * @param {?*} propValue For uncontrolled components, null/undefined. For                                              // 7681
 * controlled components, a string (or with `multiple`, a list of strings).                                            // 7682
 * @private                                                                                                            // 7683
 */                                                                                                                    // 7684
function updateOptions(component, propValue) {                                                                         // 7685
  var multiple = component.props.multiple;                                                                             // 7686
  var value = propValue != null ? propValue : component.state.value;                                                   // 7687
  var options = component.getDOMNode().options;                                                                        // 7688
  var selectedValue, i, l;                                                                                             // 7689
  if (multiple) {                                                                                                      // 7690
    selectedValue = {};                                                                                                // 7691
    for (i = 0, l = value.length; i < l; ++i) {                                                                        // 7692
      selectedValue['' + value[i]] = true;                                                                             // 7693
    }                                                                                                                  // 7694
  } else {                                                                                                             // 7695
    selectedValue = '' + value;                                                                                        // 7696
  }                                                                                                                    // 7697
  for (i = 0, l = options.length; i < l; i++) {                                                                        // 7698
    var selected = multiple ?                                                                                          // 7699
      selectedValue.hasOwnProperty(options[i].value) :                                                                 // 7700
      options[i].value === selectedValue;                                                                              // 7701
                                                                                                                       // 7702
    if (selected !== options[i].selected) {                                                                            // 7703
      options[i].selected = selected;                                                                                  // 7704
    }                                                                                                                  // 7705
  }                                                                                                                    // 7706
}                                                                                                                      // 7707
                                                                                                                       // 7708
/**                                                                                                                    // 7709
 * Implements a <select> native component that allows optionally setting the                                           // 7710
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a                                        // 7711
 * string. If `multiple` is true, the prop must be an array of strings.                                                // 7712
 *                                                                                                                     // 7713
 * If `value` is not supplied (or null/undefined), user actions that change the                                        // 7714
 * selected option will trigger updates to the rendered options.                                                       // 7715
 *                                                                                                                     // 7716
 * If it is supplied (and not null/undefined), the rendered options will not                                           // 7717
 * update in response to user actions. Instead, the `value` prop must change in                                        // 7718
 * order for the rendered options to update.                                                                           // 7719
 *                                                                                                                     // 7720
 * If `defaultValue` is provided, any options with the supplied values will be                                         // 7721
 * selected.                                                                                                           // 7722
 */                                                                                                                    // 7723
var ReactDOMSelect = ReactCompositeComponent.createClass({                                                             // 7724
  displayName: 'ReactDOMSelect',                                                                                       // 7725
                                                                                                                       // 7726
  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],                                        // 7727
                                                                                                                       // 7728
  propTypes: {                                                                                                         // 7729
    defaultValue: selectValueType,                                                                                     // 7730
    value: selectValueType                                                                                             // 7731
  },                                                                                                                   // 7732
                                                                                                                       // 7733
  getInitialState: function() {                                                                                        // 7734
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};                                        // 7735
  },                                                                                                                   // 7736
                                                                                                                       // 7737
  componentWillReceiveProps: function(nextProps) {                                                                     // 7738
    if (!this.props.multiple && nextProps.multiple) {                                                                  // 7739
      this.setState({value: [this.state.value]});                                                                      // 7740
    } else if (this.props.multiple && !nextProps.multiple) {                                                           // 7741
      this.setState({value: this.state.value[0]});                                                                     // 7742
    }                                                                                                                  // 7743
  },                                                                                                                   // 7744
                                                                                                                       // 7745
  shouldComponentUpdate: function() {                                                                                  // 7746
    // Defer any updates to this component during the `onChange` handler.                                              // 7747
    return !this._isChanging;                                                                                          // 7748
  },                                                                                                                   // 7749
                                                                                                                       // 7750
  render: function() {                                                                                                 // 7751
    // Clone `this.props` so we don't mutate the input.                                                                // 7752
    var props = merge(this.props);                                                                                     // 7753
                                                                                                                       // 7754
    props.onChange = this._handleChange;                                                                               // 7755
    props.value = null;                                                                                                // 7756
                                                                                                                       // 7757
    return select(props, this.props.children);                                                                         // 7758
  },                                                                                                                   // 7759
                                                                                                                       // 7760
  componentDidMount: function() {                                                                                      // 7761
    updateOptions(this, LinkedValueUtils.getValue(this));                                                              // 7762
  },                                                                                                                   // 7763
                                                                                                                       // 7764
  componentDidUpdate: function() {                                                                                     // 7765
    var value = LinkedValueUtils.getValue(this);                                                                       // 7766
    if (value != null) {                                                                                               // 7767
      updateOptions(this, value);                                                                                      // 7768
    }                                                                                                                  // 7769
  },                                                                                                                   // 7770
                                                                                                                       // 7771
  _handleChange: function(event) {                                                                                     // 7772
    var returnValue;                                                                                                   // 7773
    var onChange = LinkedValueUtils.getOnChange(this);                                                                 // 7774
    if (onChange) {                                                                                                    // 7775
      this._isChanging = true;                                                                                         // 7776
      returnValue = onChange.call(this, event);                                                                        // 7777
      this._isChanging = false;                                                                                        // 7778
    }                                                                                                                  // 7779
                                                                                                                       // 7780
    var selectedValue;                                                                                                 // 7781
    if (this.props.multiple) {                                                                                         // 7782
      selectedValue = [];                                                                                              // 7783
      var options = event.target.options;                                                                              // 7784
      for (var i = 0, l = options.length; i < l; i++) {                                                                // 7785
        if (options[i].selected) {                                                                                     // 7786
          selectedValue.push(options[i].value);                                                                        // 7787
        }                                                                                                              // 7788
      }                                                                                                                // 7789
    } else {                                                                                                           // 7790
      selectedValue = event.target.value;                                                                              // 7791
    }                                                                                                                  // 7792
                                                                                                                       // 7793
    this.setState({value: selectedValue});                                                                             // 7794
    return returnValue;                                                                                                // 7795
  }                                                                                                                    // 7796
                                                                                                                       // 7797
});                                                                                                                    // 7798
                                                                                                                       // 7799
module.exports = ReactDOMSelect;                                                                                       // 7800
                                                                                                                       // 7801
},{"./AutoFocusMixin":1,"./LinkedValueUtils":21,"./ReactBrowserComponentMixin":25,"./ReactCompositeComponent":29,"./ReactDOM":32,"./invariant":112,"./merge":121}],41:[function(_dereq_,module,exports){
/**                                                                                                                    // 7803
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 7804
 *                                                                                                                     // 7805
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7806
 * you may not use this file except in compliance with the License.                                                    // 7807
 * You may obtain a copy of the License at                                                                             // 7808
 *                                                                                                                     // 7809
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7810
 *                                                                                                                     // 7811
 * Unless required by applicable law or agreed to in writing, software                                                 // 7812
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7813
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7814
 * See the License for the specific language governing permissions and                                                 // 7815
 * limitations under the License.                                                                                      // 7816
 *                                                                                                                     // 7817
 * @providesModule ReactDOMSelection                                                                                   // 7818
 */                                                                                                                    // 7819
                                                                                                                       // 7820
"use strict";                                                                                                          // 7821
                                                                                                                       // 7822
var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");                                                // 7823
var getTextContentAccessor = _dereq_("./getTextContentAccessor");                                                      // 7824
                                                                                                                       // 7825
/**                                                                                                                    // 7826
 * Get the appropriate anchor and focus node/offset pairs for IE.                                                      // 7827
 *                                                                                                                     // 7828
 * The catch here is that IE's selection API doesn't provide information                                               // 7829
 * about whether the selection is forward or backward, so we have to                                                   // 7830
 * behave as though it's always forward.                                                                               // 7831
 *                                                                                                                     // 7832
 * IE text differs from modern selection in that it behaves as though                                                  // 7833
 * block elements end with a new line. This means character offsets will                                               // 7834
 * differ between the two APIs.                                                                                        // 7835
 *                                                                                                                     // 7836
 * @param {DOMElement} node                                                                                            // 7837
 * @return {object}                                                                                                    // 7838
 */                                                                                                                    // 7839
function getIEOffsets(node) {                                                                                          // 7840
  var selection = document.selection;                                                                                  // 7841
  var selectedRange = selection.createRange();                                                                         // 7842
  var selectedLength = selectedRange.text.length;                                                                      // 7843
                                                                                                                       // 7844
  // Duplicate selection so we can move range without breaking user selection.                                         // 7845
  var fromStart = selectedRange.duplicate();                                                                           // 7846
  fromStart.moveToElementText(node);                                                                                   // 7847
  fromStart.setEndPoint('EndToStart', selectedRange);                                                                  // 7848
                                                                                                                       // 7849
  var startOffset = fromStart.text.length;                                                                             // 7850
  var endOffset = startOffset + selectedLength;                                                                        // 7851
                                                                                                                       // 7852
  return {                                                                                                             // 7853
    start: startOffset,                                                                                                // 7854
    end: endOffset                                                                                                     // 7855
  };                                                                                                                   // 7856
}                                                                                                                      // 7857
                                                                                                                       // 7858
/**                                                                                                                    // 7859
 * @param {DOMElement} node                                                                                            // 7860
 * @return {?object}                                                                                                   // 7861
 */                                                                                                                    // 7862
function getModernOffsets(node) {                                                                                      // 7863
  var selection = window.getSelection();                                                                               // 7864
                                                                                                                       // 7865
  if (selection.rangeCount === 0) {                                                                                    // 7866
    return null;                                                                                                       // 7867
  }                                                                                                                    // 7868
                                                                                                                       // 7869
  var anchorNode = selection.anchorNode;                                                                               // 7870
  var anchorOffset = selection.anchorOffset;                                                                           // 7871
  var focusNode = selection.focusNode;                                                                                 // 7872
  var focusOffset = selection.focusOffset;                                                                             // 7873
                                                                                                                       // 7874
  var currentRange = selection.getRangeAt(0);                                                                          // 7875
  var rangeLength = currentRange.toString().length;                                                                    // 7876
                                                                                                                       // 7877
  var tempRange = currentRange.cloneRange();                                                                           // 7878
  tempRange.selectNodeContents(node);                                                                                  // 7879
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);                                             // 7880
                                                                                                                       // 7881
  var start = tempRange.toString().length;                                                                             // 7882
  var end = start + rangeLength;                                                                                       // 7883
                                                                                                                       // 7884
  // Detect whether the selection is backward.                                                                         // 7885
  var detectionRange = document.createRange();                                                                         // 7886
  detectionRange.setStart(anchorNode, anchorOffset);                                                                   // 7887
  detectionRange.setEnd(focusNode, focusOffset);                                                                       // 7888
  var isBackward = detectionRange.collapsed;                                                                           // 7889
  detectionRange.detach();                                                                                             // 7890
                                                                                                                       // 7891
  return {                                                                                                             // 7892
    start: isBackward ? end : start,                                                                                   // 7893
    end: isBackward ? start : end                                                                                      // 7894
  };                                                                                                                   // 7895
}                                                                                                                      // 7896
                                                                                                                       // 7897
/**                                                                                                                    // 7898
 * @param {DOMElement|DOMTextNode} node                                                                                // 7899
 * @param {object} offsets                                                                                             // 7900
 */                                                                                                                    // 7901
function setIEOffsets(node, offsets) {                                                                                 // 7902
  var range = document.selection.createRange().duplicate();                                                            // 7903
  var start, end;                                                                                                      // 7904
                                                                                                                       // 7905
  if (typeof offsets.end === 'undefined') {                                                                            // 7906
    start = offsets.start;                                                                                             // 7907
    end = start;                                                                                                       // 7908
  } else if (offsets.start > offsets.end) {                                                                            // 7909
    start = offsets.end;                                                                                               // 7910
    end = offsets.start;                                                                                               // 7911
  } else {                                                                                                             // 7912
    start = offsets.start;                                                                                             // 7913
    end = offsets.end;                                                                                                 // 7914
  }                                                                                                                    // 7915
                                                                                                                       // 7916
  range.moveToElementText(node);                                                                                       // 7917
  range.moveStart('character', start);                                                                                 // 7918
  range.setEndPoint('EndToStart', range);                                                                              // 7919
  range.moveEnd('character', end - start);                                                                             // 7920
  range.select();                                                                                                      // 7921
}                                                                                                                      // 7922
                                                                                                                       // 7923
/**                                                                                                                    // 7924
 * In modern non-IE browsers, we can support both forward and backward                                                 // 7925
 * selections.                                                                                                         // 7926
 *                                                                                                                     // 7927
 * Note: IE10+ supports the Selection object, but it does not support                                                  // 7928
 * the `extend` method, which means that even in modern IE, it's not possible                                          // 7929
 * to programatically create a backward selection. Thus, for all IE                                                    // 7930
 * versions, we use the old IE API to create our selections.                                                           // 7931
 *                                                                                                                     // 7932
 * @param {DOMElement|DOMTextNode} node                                                                                // 7933
 * @param {object} offsets                                                                                             // 7934
 */                                                                                                                    // 7935
function setModernOffsets(node, offsets) {                                                                             // 7936
  var selection = window.getSelection();                                                                               // 7937
                                                                                                                       // 7938
  var length = node[getTextContentAccessor()].length;                                                                  // 7939
  var start = Math.min(offsets.start, length);                                                                         // 7940
  var end = typeof offsets.end === 'undefined' ?                                                                       // 7941
            start : Math.min(offsets.end, length);                                                                     // 7942
                                                                                                                       // 7943
  // IE 11 uses modern selection, but doesn't support the extend method.                                               // 7944
  // Flip backward selections, so we can set with a single range.                                                      // 7945
  if (!selection.extend && start > end) {                                                                              // 7946
    var temp = end;                                                                                                    // 7947
    end = start;                                                                                                       // 7948
    start = temp;                                                                                                      // 7949
  }                                                                                                                    // 7950
                                                                                                                       // 7951
  var startMarker = getNodeForCharacterOffset(node, start);                                                            // 7952
  var endMarker = getNodeForCharacterOffset(node, end);                                                                // 7953
                                                                                                                       // 7954
  if (startMarker && endMarker) {                                                                                      // 7955
    var range = document.createRange();                                                                                // 7956
    range.setStart(startMarker.node, startMarker.offset);                                                              // 7957
    selection.removeAllRanges();                                                                                       // 7958
                                                                                                                       // 7959
    if (start > end) {                                                                                                 // 7960
      selection.addRange(range);                                                                                       // 7961
      selection.extend(endMarker.node, endMarker.offset);                                                              // 7962
    } else {                                                                                                           // 7963
      range.setEnd(endMarker.node, endMarker.offset);                                                                  // 7964
      selection.addRange(range);                                                                                       // 7965
    }                                                                                                                  // 7966
                                                                                                                       // 7967
    range.detach();                                                                                                    // 7968
  }                                                                                                                    // 7969
}                                                                                                                      // 7970
                                                                                                                       // 7971
var ReactDOMSelection = {                                                                                              // 7972
  /**                                                                                                                  // 7973
   * @param {DOMElement} node                                                                                          // 7974
   */                                                                                                                  // 7975
  getOffsets: function(node) {                                                                                         // 7976
    var getOffsets = document.selection ? getIEOffsets : getModernOffsets;                                             // 7977
    return getOffsets(node);                                                                                           // 7978
  },                                                                                                                   // 7979
                                                                                                                       // 7980
  /**                                                                                                                  // 7981
   * @param {DOMElement|DOMTextNode} node                                                                              // 7982
   * @param {object} offsets                                                                                           // 7983
   */                                                                                                                  // 7984
  setOffsets: function(node, offsets) {                                                                                // 7985
    var setOffsets = document.selection ? setIEOffsets : setModernOffsets;                                             // 7986
    setOffsets(node, offsets);                                                                                         // 7987
  }                                                                                                                    // 7988
};                                                                                                                     // 7989
                                                                                                                       // 7990
module.exports = ReactDOMSelection;                                                                                    // 7991
                                                                                                                       // 7992
},{"./getNodeForCharacterOffset":106,"./getTextContentAccessor":108}],42:[function(_dereq_,module,exports){            // 7993
/**                                                                                                                    // 7994
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 7995
 *                                                                                                                     // 7996
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7997
 * you may not use this file except in compliance with the License.                                                    // 7998
 * You may obtain a copy of the License at                                                                             // 7999
 *                                                                                                                     // 8000
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8001
 *                                                                                                                     // 8002
 * Unless required by applicable law or agreed to in writing, software                                                 // 8003
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8004
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8005
 * See the License for the specific language governing permissions and                                                 // 8006
 * limitations under the License.                                                                                      // 8007
 *                                                                                                                     // 8008
 * @providesModule ReactDOMTextarea                                                                                    // 8009
 */                                                                                                                    // 8010
                                                                                                                       // 8011
"use strict";                                                                                                          // 8012
                                                                                                                       // 8013
var AutoFocusMixin = _dereq_("./AutoFocusMixin");                                                                      // 8014
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");                                                        // 8015
var LinkedValueUtils = _dereq_("./LinkedValueUtils");                                                                  // 8016
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");                                              // 8017
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");                                                    // 8018
var ReactDOM = _dereq_("./ReactDOM");                                                                                  // 8019
                                                                                                                       // 8020
var invariant = _dereq_("./invariant");                                                                                // 8021
var merge = _dereq_("./merge");                                                                                        // 8022
                                                                                                                       // 8023
var warning = _dereq_("./warning");                                                                                    // 8024
                                                                                                                       // 8025
// Store a reference to the <textarea> `ReactDOMComponent`.                                                            // 8026
var textarea = ReactDOM.textarea;                                                                                      // 8027
                                                                                                                       // 8028
/**                                                                                                                    // 8029
 * Implements a <textarea> native component that allows setting `value`, and                                           // 8030
 * `defaultValue`. This differs from the traditional DOM API because value is                                          // 8031
 * usually set as PCDATA children.                                                                                     // 8032
 *                                                                                                                     // 8033
 * If `value` is not supplied (or null/undefined), user actions that affect the                                        // 8034
 * value will trigger updates to the element.                                                                          // 8035
 *                                                                                                                     // 8036
 * If `value` is supplied (and not null/undefined), the rendered element will                                          // 8037
 * not trigger updates to the element. Instead, the `value` prop must change in                                        // 8038
 * order for the rendered element to be updated.                                                                       // 8039
 *                                                                                                                     // 8040
 * The rendered element will be initialized with an empty value, the prop                                              // 8041
 * `defaultValue` if specified, or the children content (deprecated).                                                  // 8042
 */                                                                                                                    // 8043
var ReactDOMTextarea = ReactCompositeComponent.createClass({                                                           // 8044
  displayName: 'ReactDOMTextarea',                                                                                     // 8045
                                                                                                                       // 8046
  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],                                        // 8047
                                                                                                                       // 8048
  getInitialState: function() {                                                                                        // 8049
    var defaultValue = this.props.defaultValue;                                                                        // 8050
    // TODO (yungsters): Remove support for children content in <textarea>.                                            // 8051
    var children = this.props.children;                                                                                // 8052
    if (children != null) {                                                                                            // 8053
      if ("production" !== "development") {                                                                            // 8054
        ("production" !== "development" ? warning(                                                                     // 8055
          false,                                                                                                       // 8056
          'Use the `defaultValue` or `value` props instead of setting ' +                                              // 8057
          'children on <textarea>.'                                                                                    // 8058
        ) : null);                                                                                                     // 8059
      }                                                                                                                // 8060
      ("production" !== "development" ? invariant(                                                                     // 8061
        defaultValue == null,                                                                                          // 8062
        'If you supply `defaultValue` on a <textarea>, do not pass children.'                                          // 8063
      ) : invariant(defaultValue == null));                                                                            // 8064
      if (Array.isArray(children)) {                                                                                   // 8065
        ("production" !== "development" ? invariant(                                                                   // 8066
          children.length <= 1,                                                                                        // 8067
          '<textarea> can only have at most one child.'                                                                // 8068
        ) : invariant(children.length <= 1));                                                                          // 8069
        children = children[0];                                                                                        // 8070
      }                                                                                                                // 8071
                                                                                                                       // 8072
      defaultValue = '' + children;                                                                                    // 8073
    }                                                                                                                  // 8074
    if (defaultValue == null) {                                                                                        // 8075
      defaultValue = '';                                                                                               // 8076
    }                                                                                                                  // 8077
    var value = LinkedValueUtils.getValue(this);                                                                       // 8078
    return {                                                                                                           // 8079
      // We save the initial value so that `ReactDOMComponent` doesn't update                                          // 8080
      // `textContent` (unnecessary since we update value).                                                            // 8081
      // The initial value can be a boolean or object so that's why it's                                               // 8082
      // forced to be a string.                                                                                        // 8083
      initialValue: '' + (value != null ? value : defaultValue),                                                       // 8084
      value: defaultValue                                                                                              // 8085
    };                                                                                                                 // 8086
  },                                                                                                                   // 8087
                                                                                                                       // 8088
  shouldComponentUpdate: function() {                                                                                  // 8089
    // Defer any updates to this component during the `onChange` handler.                                              // 8090
    return !this._isChanging;                                                                                          // 8091
  },                                                                                                                   // 8092
                                                                                                                       // 8093
  render: function() {                                                                                                 // 8094
    // Clone `this.props` so we don't mutate the input.                                                                // 8095
    var props = merge(this.props);                                                                                     // 8096
    var value = LinkedValueUtils.getValue(this);                                                                       // 8097
                                                                                                                       // 8098
    ("production" !== "development" ? invariant(                                                                       // 8099
      props.dangerouslySetInnerHTML == null,                                                                           // 8100
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'                                                   // 8101
    ) : invariant(props.dangerouslySetInnerHTML == null));                                                             // 8102
                                                                                                                       // 8103
    props.defaultValue = null;                                                                                         // 8104
    props.value = value != null ? value : this.state.value;                                                            // 8105
    props.onChange = this._handleChange;                                                                               // 8106
                                                                                                                       // 8107
    // Always set children to the same thing. In IE9, the selection range will                                         // 8108
    // get reset if `textContent` is mutated.                                                                          // 8109
    return textarea(props, this.state.initialValue);                                                                   // 8110
  },                                                                                                                   // 8111
                                                                                                                       // 8112
  componentDidUpdate: function(prevProps, prevState, prevContext) {                                                    // 8113
    var value = LinkedValueUtils.getValue(this);                                                                       // 8114
    if (value != null) {                                                                                               // 8115
      var rootNode = this.getDOMNode();                                                                                // 8116
      // Cast `value` to a string to ensure the value is set correctly. While                                          // 8117
      // browsers typically do this as necessary, jsdom doesn't.                                                       // 8118
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);                                        // 8119
    }                                                                                                                  // 8120
  },                                                                                                                   // 8121
                                                                                                                       // 8122
  _handleChange: function(event) {                                                                                     // 8123
    var returnValue;                                                                                                   // 8124
    var onChange = LinkedValueUtils.getOnChange(this);                                                                 // 8125
    if (onChange) {                                                                                                    // 8126
      this._isChanging = true;                                                                                         // 8127
      returnValue = onChange.call(this, event);                                                                        // 8128
      this._isChanging = false;                                                                                        // 8129
    }                                                                                                                  // 8130
    this.setState({value: event.target.value});                                                                        // 8131
    return returnValue;                                                                                                // 8132
  }                                                                                                                    // 8133
                                                                                                                       // 8134
});                                                                                                                    // 8135
                                                                                                                       // 8136
module.exports = ReactDOMTextarea;                                                                                     // 8137
                                                                                                                       // 8138
},{"./AutoFocusMixin":1,"./DOMPropertyOperations":9,"./LinkedValueUtils":21,"./ReactBrowserComponentMixin":25,"./ReactCompositeComponent":29,"./ReactDOM":32,"./invariant":112,"./merge":121,"./warning":134}],43:[function(_dereq_,module,exports){
/**                                                                                                                    // 8140
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 8141
 *                                                                                                                     // 8142
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8143
 * you may not use this file except in compliance with the License.                                                    // 8144
 * You may obtain a copy of the License at                                                                             // 8145
 *                                                                                                                     // 8146
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8147
 *                                                                                                                     // 8148
 * Unless required by applicable law or agreed to in writing, software                                                 // 8149
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8150
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8151
 * See the License for the specific language governing permissions and                                                 // 8152
 * limitations under the License.                                                                                      // 8153
 *                                                                                                                     // 8154
 * @providesModule ReactDefaultBatchingStrategy                                                                        // 8155
 */                                                                                                                    // 8156
                                                                                                                       // 8157
"use strict";                                                                                                          // 8158
                                                                                                                       // 8159
var ReactUpdates = _dereq_("./ReactUpdates");                                                                          // 8160
var Transaction = _dereq_("./Transaction");                                                                            // 8161
                                                                                                                       // 8162
var emptyFunction = _dereq_("./emptyFunction");                                                                        // 8163
var mixInto = _dereq_("./mixInto");                                                                                    // 8164
                                                                                                                       // 8165
var RESET_BATCHED_UPDATES = {                                                                                          // 8166
  initialize: emptyFunction,                                                                                           // 8167
  close: function() {                                                                                                  // 8168
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;                                                            // 8169
  }                                                                                                                    // 8170
};                                                                                                                     // 8171
                                                                                                                       // 8172
var FLUSH_BATCHED_UPDATES = {                                                                                          // 8173
  initialize: emptyFunction,                                                                                           // 8174
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)                                                           // 8175
};                                                                                                                     // 8176
                                                                                                                       // 8177
var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];                                             // 8178
                                                                                                                       // 8179
function ReactDefaultBatchingStrategyTransaction() {                                                                   // 8180
  this.reinitializeTransaction();                                                                                      // 8181
}                                                                                                                      // 8182
                                                                                                                       // 8183
mixInto(ReactDefaultBatchingStrategyTransaction, Transaction.Mixin);                                                   // 8184
mixInto(ReactDefaultBatchingStrategyTransaction, {                                                                     // 8185
  getTransactionWrappers: function() {                                                                                 // 8186
    return TRANSACTION_WRAPPERS;                                                                                       // 8187
  }                                                                                                                    // 8188
});                                                                                                                    // 8189
                                                                                                                       // 8190
var transaction = new ReactDefaultBatchingStrategyTransaction();                                                       // 8191
                                                                                                                       // 8192
var ReactDefaultBatchingStrategy = {                                                                                   // 8193
  isBatchingUpdates: false,                                                                                            // 8194
                                                                                                                       // 8195
  /**                                                                                                                  // 8196
   * Call the provided function in a context within which calls to `setState`                                          // 8197
   * and friends are batched such that components aren't updated unnecessarily.                                        // 8198
   */                                                                                                                  // 8199
  batchedUpdates: function(callback, param) {                                                                          // 8200
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;                                       // 8201
                                                                                                                       // 8202
    ReactDefaultBatchingStrategy.isBatchingUpdates = true;                                                             // 8203
                                                                                                                       // 8204
    // The code is written this way to avoid extra allocations                                                         // 8205
    if (alreadyBatchingUpdates) {                                                                                      // 8206
      callback(param);                                                                                                 // 8207
    } else {                                                                                                           // 8208
      transaction.perform(callback, null, param);                                                                      // 8209
    }                                                                                                                  // 8210
  }                                                                                                                    // 8211
};                                                                                                                     // 8212
                                                                                                                       // 8213
module.exports = ReactDefaultBatchingStrategy;                                                                         // 8214
                                                                                                                       // 8215
},{"./ReactUpdates":71,"./Transaction":85,"./emptyFunction":96,"./mixInto":124}],44:[function(_dereq_,module,exports){ // 8216
/**                                                                                                                    // 8217
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 8218
 *                                                                                                                     // 8219
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8220
 * you may not use this file except in compliance with the License.                                                    // 8221
 * You may obtain a copy of the License at                                                                             // 8222
 *                                                                                                                     // 8223
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8224
 *                                                                                                                     // 8225
 * Unless required by applicable law or agreed to in writing, software                                                 // 8226
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8227
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8228
 * See the License for the specific language governing permissions and                                                 // 8229
 * limitations under the License.                                                                                      // 8230
 *                                                                                                                     // 8231
 * @providesModule ReactDefaultInjection                                                                               // 8232
 */                                                                                                                    // 8233
                                                                                                                       // 8234
"use strict";                                                                                                          // 8235
                                                                                                                       // 8236
var ReactInjection = _dereq_("./ReactInjection");                                                                      // 8237
                                                                                                                       // 8238
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 8239
                                                                                                                       // 8240
var DefaultDOMPropertyConfig = _dereq_("./DefaultDOMPropertyConfig");                                                  // 8241
                                                                                                                       // 8242
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");                                                                // 8243
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");                                                          // 8244
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");                                                      // 8245
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");                                                    // 8246
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");                                                        // 8247
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");                                          // 8248
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");                                              // 8249
var ReactComponentBrowserEnvironment =                                                                                 // 8250
  _dereq_("./ReactComponentBrowserEnvironment");                                                                       // 8251
var ReactEventTopLevelCallback = _dereq_("./ReactEventTopLevelCallback");                                              // 8252
var ReactDOM = _dereq_("./ReactDOM");                                                                                  // 8253
var ReactDOMButton = _dereq_("./ReactDOMButton");                                                                      // 8254
var ReactDOMForm = _dereq_("./ReactDOMForm");                                                                          // 8255
var ReactDOMImg = _dereq_("./ReactDOMImg");                                                                            // 8256
var ReactDOMInput = _dereq_("./ReactDOMInput");                                                                        // 8257
var ReactDOMOption = _dereq_("./ReactDOMOption");                                                                      // 8258
var ReactDOMSelect = _dereq_("./ReactDOMSelect");                                                                      // 8259
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");                                                                  // 8260
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");                                                          // 8261
var ReactMount = _dereq_("./ReactMount");                                                                              // 8262
var SelectEventPlugin = _dereq_("./SelectEventPlugin");                                                                // 8263
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");                                                          // 8264
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");                                                                // 8265
                                                                                                                       // 8266
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");                                          // 8267
                                                                                                                       // 8268
var createFullPageComponent = _dereq_("./createFullPageComponent");                                                    // 8269
                                                                                                                       // 8270
function inject() {                                                                                                    // 8271
  ReactInjection.EventEmitter.injectTopLevelCallbackCreator(                                                           // 8272
    ReactEventTopLevelCallback                                                                                         // 8273
  );                                                                                                                   // 8274
                                                                                                                       // 8275
  /**                                                                                                                  // 8276
   * Inject modules for resolving DOM hierarchy and plugin ordering.                                                   // 8277
   */                                                                                                                  // 8278
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);                                       // 8279
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);                                            // 8280
  ReactInjection.EventPluginHub.injectMount(ReactMount);                                                               // 8281
                                                                                                                       // 8282
  /**                                                                                                                  // 8283
   * Some important event plugins included by default (without having to require                                       // 8284
   * them).                                                                                                            // 8285
   */                                                                                                                  // 8286
  ReactInjection.EventPluginHub.injectEventPluginsByName({                                                             // 8287
    SimpleEventPlugin: SimpleEventPlugin,                                                                              // 8288
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,                                                                      // 8289
    ChangeEventPlugin: ChangeEventPlugin,                                                                              // 8290
    CompositionEventPlugin: CompositionEventPlugin,                                                                    // 8291
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,                                                        // 8292
    SelectEventPlugin: SelectEventPlugin                                                                               // 8293
  });                                                                                                                  // 8294
                                                                                                                       // 8295
  ReactInjection.DOM.injectComponentClasses({                                                                          // 8296
    button: ReactDOMButton,                                                                                            // 8297
    form: ReactDOMForm,                                                                                                // 8298
    img: ReactDOMImg,                                                                                                  // 8299
    input: ReactDOMInput,                                                                                              // 8300
    option: ReactDOMOption,                                                                                            // 8301
    select: ReactDOMSelect,                                                                                            // 8302
    textarea: ReactDOMTextarea,                                                                                        // 8303
                                                                                                                       // 8304
    html: createFullPageComponent(ReactDOM.html),                                                                      // 8305
    head: createFullPageComponent(ReactDOM.head),                                                                      // 8306
    title: createFullPageComponent(ReactDOM.title),                                                                    // 8307
    body: createFullPageComponent(ReactDOM.body)                                                                       // 8308
  });                                                                                                                  // 8309
                                                                                                                       // 8310
                                                                                                                       // 8311
  // This needs to happen after createFullPageComponent() otherwise the mixin                                          // 8312
  // gets double injected.                                                                                             // 8313
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);                                           // 8314
                                                                                                                       // 8315
  ReactInjection.DOMProperty.injectDOMPropertyConfig(DefaultDOMPropertyConfig);                                        // 8316
                                                                                                                       // 8317
  ReactInjection.Updates.injectBatchingStrategy(                                                                       // 8318
    ReactDefaultBatchingStrategy                                                                                       // 8319
  );                                                                                                                   // 8320
                                                                                                                       // 8321
  ReactInjection.RootIndex.injectCreateReactRootIndex(                                                                 // 8322
    ExecutionEnvironment.canUseDOM ?                                                                                   // 8323
      ClientReactRootIndex.createReactRootIndex :                                                                      // 8324
      ServerReactRootIndex.createReactRootIndex                                                                        // 8325
  );                                                                                                                   // 8326
                                                                                                                       // 8327
  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);                                        // 8328
                                                                                                                       // 8329
  if ("production" !== "development") {                                                                                // 8330
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';                                          // 8331
    if ((/[?&]react_perf\b/).test(url)) {                                                                              // 8332
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");                                                            // 8333
      ReactDefaultPerf.start();                                                                                        // 8334
    }                                                                                                                  // 8335
  }                                                                                                                    // 8336
}                                                                                                                      // 8337
                                                                                                                       // 8338
module.exports = {                                                                                                     // 8339
  inject: inject                                                                                                       // 8340
};                                                                                                                     // 8341
                                                                                                                       // 8342
},{"./ChangeEventPlugin":4,"./ClientReactRootIndex":5,"./CompositionEventPlugin":6,"./DefaultDOMPropertyConfig":11,"./DefaultEventPluginOrder":12,"./EnterLeaveEventPlugin":13,"./ExecutionEnvironment":20,"./MobileSafariClickEventPlugin":22,"./ReactBrowserComponentMixin":25,"./ReactComponentBrowserEnvironment":28,"./ReactDOM":32,"./ReactDOMButton":33,"./ReactDOMForm":35,"./ReactDOMImg":37,"./ReactDOMInput":38,"./ReactDOMOption":39,"./ReactDOMSelect":40,"./ReactDOMTextarea":42,"./ReactDefaultBatchingStrategy":43,"./ReactDefaultPerf":45,"./ReactEventTopLevelCallback":50,"./ReactInjection":51,"./ReactInstanceHandles":53,"./ReactMount":55,"./SelectEventPlugin":72,"./ServerReactRootIndex":73,"./SimpleEventPlugin":74,"./createFullPageComponent":92}],45:[function(_dereq_,module,exports){
/**                                                                                                                    // 8344
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 8345
 *                                                                                                                     // 8346
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8347
 * you may not use this file except in compliance with the License.                                                    // 8348
 * You may obtain a copy of the License at                                                                             // 8349
 *                                                                                                                     // 8350
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8351
 *                                                                                                                     // 8352
 * Unless required by applicable law or agreed to in writing, software                                                 // 8353
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8354
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8355
 * See the License for the specific language governing permissions and                                                 // 8356
 * limitations under the License.                                                                                      // 8357
 *                                                                                                                     // 8358
 * @providesModule ReactDefaultPerf                                                                                    // 8359
 * @typechecks static-only                                                                                             // 8360
 */                                                                                                                    // 8361
                                                                                                                       // 8362
"use strict";                                                                                                          // 8363
                                                                                                                       // 8364
var DOMProperty = _dereq_("./DOMProperty");                                                                            // 8365
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");                                                  // 8366
var ReactMount = _dereq_("./ReactMount");                                                                              // 8367
var ReactPerf = _dereq_("./ReactPerf");                                                                                // 8368
                                                                                                                       // 8369
var performanceNow = _dereq_("./performanceNow");                                                                      // 8370
                                                                                                                       // 8371
function roundFloat(val) {                                                                                             // 8372
  return Math.floor(val * 100) / 100;                                                                                  // 8373
}                                                                                                                      // 8374
                                                                                                                       // 8375
var ReactDefaultPerf = {                                                                                               // 8376
  _allMeasurements: [], // last item in the list is the current one                                                    // 8377
  _injected: false,                                                                                                    // 8378
                                                                                                                       // 8379
  start: function() {                                                                                                  // 8380
    if (!ReactDefaultPerf._injected) {                                                                                 // 8381
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);                                                     // 8382
    }                                                                                                                  // 8383
                                                                                                                       // 8384
    ReactDefaultPerf._allMeasurements.length = 0;                                                                      // 8385
    ReactPerf.enableMeasure = true;                                                                                    // 8386
  },                                                                                                                   // 8387
                                                                                                                       // 8388
  stop: function() {                                                                                                   // 8389
    ReactPerf.enableMeasure = false;                                                                                   // 8390
  },                                                                                                                   // 8391
                                                                                                                       // 8392
  getLastMeasurements: function() {                                                                                    // 8393
    return ReactDefaultPerf._allMeasurements;                                                                          // 8394
  },                                                                                                                   // 8395
                                                                                                                       // 8396
  printExclusive: function(measurements) {                                                                             // 8397
    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 8398
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);                                          // 8399
    console.table(summary.map(function(item) {                                                                         // 8400
      return {                                                                                                         // 8401
        'Component class name': item.componentName,                                                                    // 8402
        'Total inclusive time (ms)': roundFloat(item.inclusive),                                                       // 8403
        'Total exclusive time (ms)': roundFloat(item.exclusive),                                                       // 8404
        'Exclusive time per instance (ms)': roundFloat(item.exclusive / item.count),                                   // 8405
        'Instances': item.count                                                                                        // 8406
      };                                                                                                               // 8407
    }));                                                                                                               // 8408
    console.log(                                                                                                       // 8409
      'Total time:',                                                                                                   // 8410
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'                                           // 8411
    );                                                                                                                 // 8412
  },                                                                                                                   // 8413
                                                                                                                       // 8414
  printInclusive: function(measurements) {                                                                             // 8415
    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 8416
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);                                          // 8417
    console.table(summary.map(function(item) {                                                                         // 8418
      return {                                                                                                         // 8419
        'Owner > component': item.componentName,                                                                       // 8420
        'Inclusive time (ms)': roundFloat(item.time),                                                                  // 8421
        'Instances': item.count                                                                                        // 8422
      };                                                                                                               // 8423
    }));                                                                                                               // 8424
    console.log(                                                                                                       // 8425
      'Total time:',                                                                                                   // 8426
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'                                           // 8427
    );                                                                                                                 // 8428
  },                                                                                                                   // 8429
                                                                                                                       // 8430
  printWasted: function(measurements) {                                                                                // 8431
    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 8432
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(                                                        // 8433
      measurements,                                                                                                    // 8434
      true                                                                                                             // 8435
    );                                                                                                                 // 8436
    console.table(summary.map(function(item) {                                                                         // 8437
      return {                                                                                                         // 8438
        'Owner > component': item.componentName,                                                                       // 8439
        'Wasted time (ms)': item.time,                                                                                 // 8440
        'Instances': item.count                                                                                        // 8441
      };                                                                                                               // 8442
    }));                                                                                                               // 8443
    console.log(                                                                                                       // 8444
      'Total time:',                                                                                                   // 8445
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'                                           // 8446
    );                                                                                                                 // 8447
  },                                                                                                                   // 8448
                                                                                                                       // 8449
  printDOM: function(measurements) {                                                                                   // 8450
    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 8451
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);                                                // 8452
    console.table(summary.map(function(item) {                                                                         // 8453
      var result = {};                                                                                                 // 8454
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;                                                                 // 8455
      result['type'] = item.type;                                                                                      // 8456
      result['args'] = JSON.stringify(item.args);                                                                      // 8457
      return result;                                                                                                   // 8458
    }));                                                                                                               // 8459
    console.log(                                                                                                       // 8460
      'Total time:',                                                                                                   // 8461
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'                                           // 8462
    );                                                                                                                 // 8463
  },                                                                                                                   // 8464
                                                                                                                       // 8465
  _recordWrite: function(id, fnName, totalTime, args) {                                                                // 8466
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows                                         // 8467
    var writes =                                                                                                       // 8468
      ReactDefaultPerf                                                                                                 // 8469
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]                                                // 8470
        .writes;                                                                                                       // 8471
    writes[id] = writes[id] || [];                                                                                     // 8472
    writes[id].push({                                                                                                  // 8473
      type: fnName,                                                                                                    // 8474
      time: totalTime,                                                                                                 // 8475
      args: args                                                                                                       // 8476
    });                                                                                                                // 8477
  },                                                                                                                   // 8478
                                                                                                                       // 8479
  measure: function(moduleName, fnName, func) {                                                                        // 8480
    return function() {var args=Array.prototype.slice.call(arguments,0);                                               // 8481
      var totalTime;                                                                                                   // 8482
      var rv;                                                                                                          // 8483
      var start;                                                                                                       // 8484
                                                                                                                       // 8485
      if (fnName === '_renderNewRootComponent' ||                                                                      // 8486
          fnName === 'flushBatchedUpdates') {                                                                          // 8487
        // A "measurement" is a set of metrics recorded for each flush. We want                                        // 8488
        // to group the metrics for a given flush together so we can look at the                                       // 8489
        // components that rendered and the DOM operations that actually                                               // 8490
        // happened to determine the amount of "wasted work" performed.                                                // 8491
        ReactDefaultPerf._allMeasurements.push({                                                                       // 8492
          exclusive: {},                                                                                               // 8493
          inclusive: {},                                                                                               // 8494
          counts: {},                                                                                                  // 8495
          writes: {},                                                                                                  // 8496
          displayNames: {},                                                                                            // 8497
          totalTime: 0                                                                                                 // 8498
        });                                                                                                            // 8499
        start = performanceNow();                                                                                      // 8500
        rv = func.apply(this, args);                                                                                   // 8501
        ReactDefaultPerf._allMeasurements[                                                                             // 8502
          ReactDefaultPerf._allMeasurements.length - 1                                                                 // 8503
        ].totalTime = performanceNow() - start;                                                                        // 8504
        return rv;                                                                                                     // 8505
      } else if (moduleName === 'ReactDOMIDOperations' ||                                                              // 8506
        moduleName === 'ReactComponentBrowserEnvironment') {                                                           // 8507
        start = performanceNow();                                                                                      // 8508
        rv = func.apply(this, args);                                                                                   // 8509
        totalTime = performanceNow() - start;                                                                          // 8510
                                                                                                                       // 8511
        if (fnName === 'mountImageIntoNode') {                                                                         // 8512
          var mountID = ReactMount.getID(args[1]);                                                                     // 8513
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);                                          // 8514
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {                                                   // 8515
          // special format                                                                                            // 8516
          args[0].forEach(function(update) {                                                                           // 8517
            var writeArgs = {};                                                                                        // 8518
            if (update.fromIndex !== null) {                                                                           // 8519
              writeArgs.fromIndex = update.fromIndex;                                                                  // 8520
            }                                                                                                          // 8521
            if (update.toIndex !== null) {                                                                             // 8522
              writeArgs.toIndex = update.toIndex;                                                                      // 8523
            }                                                                                                          // 8524
            if (update.textContent !== null) {                                                                         // 8525
              writeArgs.textContent = update.textContent;                                                              // 8526
            }                                                                                                          // 8527
            if (update.markupIndex !== null) {                                                                         // 8528
              writeArgs.markup = args[1][update.markupIndex];                                                          // 8529
            }                                                                                                          // 8530
            ReactDefaultPerf._recordWrite(                                                                             // 8531
              update.parentID,                                                                                         // 8532
              update.type,                                                                                             // 8533
              totalTime,                                                                                               // 8534
              writeArgs                                                                                                // 8535
            );                                                                                                         // 8536
          });                                                                                                          // 8537
        } else {                                                                                                       // 8538
          // basic format                                                                                              // 8539
          ReactDefaultPerf._recordWrite(                                                                               // 8540
            args[0],                                                                                                   // 8541
            fnName,                                                                                                    // 8542
            totalTime,                                                                                                 // 8543
            Array.prototype.slice.call(args, 1)                                                                        // 8544
          );                                                                                                           // 8545
        }                                                                                                              // 8546
        return rv;                                                                                                     // 8547
      } else if (moduleName === 'ReactCompositeComponent' && (                                                         // 8548
        fnName === 'mountComponent' ||                                                                                 // 8549
        fnName === 'updateComponent' || // TODO: receiveComponent()?                                                   // 8550
        fnName === '_renderValidatedComponent')) {                                                                     // 8551
                                                                                                                       // 8552
        var rootNodeID = fnName === 'mountComponent' ?                                                                 // 8553
          args[0] :                                                                                                    // 8554
          this._rootNodeID;                                                                                            // 8555
        var isRender = fnName === '_renderValidatedComponent';                                                         // 8556
        var entry = ReactDefaultPerf._allMeasurements[                                                                 // 8557
          ReactDefaultPerf._allMeasurements.length - 1                                                                 // 8558
        ];                                                                                                             // 8559
                                                                                                                       // 8560
        if (isRender) {                                                                                                // 8561
          entry.counts[rootNodeID] = entry.counts[rootNodeID] || 0;                                                    // 8562
          entry.counts[rootNodeID] += 1;                                                                               // 8563
        }                                                                                                              // 8564
                                                                                                                       // 8565
        start = performanceNow();                                                                                      // 8566
        rv = func.apply(this, args);                                                                                   // 8567
        totalTime = performanceNow() - start;                                                                          // 8568
                                                                                                                       // 8569
        var typeOfLog = isRender ? entry.exclusive : entry.inclusive;                                                  // 8570
        typeOfLog[rootNodeID] = typeOfLog[rootNodeID] || 0;                                                            // 8571
        typeOfLog[rootNodeID] += totalTime;                                                                            // 8572
                                                                                                                       // 8573
        entry.displayNames[rootNodeID] = {                                                                             // 8574
          current: this.constructor.displayName,                                                                       // 8575
          owner: this._owner ? this._owner.constructor.displayName : '<root>'                                          // 8576
        };                                                                                                             // 8577
                                                                                                                       // 8578
        return rv;                                                                                                     // 8579
      } else {                                                                                                         // 8580
        return func.apply(this, args);                                                                                 // 8581
      }                                                                                                                // 8582
    };                                                                                                                 // 8583
  }                                                                                                                    // 8584
};                                                                                                                     // 8585
                                                                                                                       // 8586
module.exports = ReactDefaultPerf;                                                                                     // 8587
                                                                                                                       // 8588
},{"./DOMProperty":8,"./ReactDefaultPerfAnalysis":46,"./ReactMount":55,"./ReactPerf":60,"./performanceNow":129}],46:[function(_dereq_,module,exports){
/**                                                                                                                    // 8590
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 8591
 *                                                                                                                     // 8592
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8593
 * you may not use this file except in compliance with the License.                                                    // 8594
 * You may obtain a copy of the License at                                                                             // 8595
 *                                                                                                                     // 8596
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8597
 *                                                                                                                     // 8598
 * Unless required by applicable law or agreed to in writing, software                                                 // 8599
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8600
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8601
 * See the License for the specific language governing permissions and                                                 // 8602
 * limitations under the License.                                                                                      // 8603
 *                                                                                                                     // 8604
 * @providesModule ReactDefaultPerfAnalysis                                                                            // 8605
 */                                                                                                                    // 8606
                                                                                                                       // 8607
var merge = _dereq_("./merge");                                                                                        // 8608
                                                                                                                       // 8609
// Don't try to save users less than 1.2ms (a number I made up)                                                        // 8610
var DONT_CARE_THRESHOLD = 1.2;                                                                                         // 8611
var DOM_OPERATION_TYPES = {                                                                                            // 8612
  'mountImageIntoNode': 'set innerHTML',                                                                               // 8613
  INSERT_MARKUP: 'set innerHTML',                                                                                      // 8614
  MOVE_EXISTING: 'move',                                                                                               // 8615
  REMOVE_NODE: 'remove',                                                                                               // 8616
  TEXT_CONTENT: 'set textContent',                                                                                     // 8617
  'updatePropertyByID': 'update attribute',                                                                            // 8618
  'deletePropertyByID': 'delete attribute',                                                                            // 8619
  'updateStylesByID': 'update styles',                                                                                 // 8620
  'updateInnerHTMLByID': 'set innerHTML',                                                                              // 8621
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'                                                                    // 8622
};                                                                                                                     // 8623
                                                                                                                       // 8624
function getTotalTime(measurements) {                                                                                  // 8625
  // TODO: return number of DOM ops? could be misleading.                                                              // 8626
  // TODO: measure dropped frames after reconcile?                                                                     // 8627
  // TODO: log total time of each reconcile and the top-level component                                                // 8628
  // class that triggered it.                                                                                          // 8629
  var totalTime = 0;                                                                                                   // 8630
  for (var i = 0; i < measurements.length; i++) {                                                                      // 8631
    var measurement = measurements[i];                                                                                 // 8632
    totalTime += measurement.totalTime;                                                                                // 8633
  }                                                                                                                    // 8634
  return totalTime;                                                                                                    // 8635
}                                                                                                                      // 8636
                                                                                                                       // 8637
function getDOMSummary(measurements) {                                                                                 // 8638
  var items = [];                                                                                                      // 8639
  for (var i = 0; i < measurements.length; i++) {                                                                      // 8640
    var measurement = measurements[i];                                                                                 // 8641
    var id;                                                                                                            // 8642
                                                                                                                       // 8643
    for (id in measurement.writes) {                                                                                   // 8644
      measurement.writes[id].forEach(function(write) {                                                                 // 8645
        items.push({                                                                                                   // 8646
          id: id,                                                                                                      // 8647
          type: DOM_OPERATION_TYPES[write.type] || write.type,                                                         // 8648
          args: write.args                                                                                             // 8649
        });                                                                                                            // 8650
      });                                                                                                              // 8651
    }                                                                                                                  // 8652
  }                                                                                                                    // 8653
  return items;                                                                                                        // 8654
}                                                                                                                      // 8655
                                                                                                                       // 8656
function getExclusiveSummary(measurements) {                                                                           // 8657
  var candidates = {};                                                                                                 // 8658
  var displayName;                                                                                                     // 8659
                                                                                                                       // 8660
  for (var i = 0; i < measurements.length; i++) {                                                                      // 8661
    var measurement = measurements[i];                                                                                 // 8662
    var allIDs = merge(measurement.exclusive, measurement.inclusive);                                                  // 8663
                                                                                                                       // 8664
    for (var id in allIDs) {                                                                                           // 8665
      displayName = measurement.displayNames[id].current;                                                              // 8666
                                                                                                                       // 8667
      candidates[displayName] = candidates[displayName] || {                                                           // 8668
        componentName: displayName,                                                                                    // 8669
        inclusive: 0,                                                                                                  // 8670
        exclusive: 0,                                                                                                  // 8671
        count: 0                                                                                                       // 8672
      };                                                                                                               // 8673
      if (measurement.exclusive[id]) {                                                                                 // 8674
        candidates[displayName].exclusive += measurement.exclusive[id];                                                // 8675
      }                                                                                                                // 8676
      if (measurement.inclusive[id]) {                                                                                 // 8677
        candidates[displayName].inclusive += measurement.inclusive[id];                                                // 8678
      }                                                                                                                // 8679
      if (measurement.counts[id]) {                                                                                    // 8680
        candidates[displayName].count += measurement.counts[id];                                                       // 8681
      }                                                                                                                // 8682
    }                                                                                                                  // 8683
  }                                                                                                                    // 8684
                                                                                                                       // 8685
  // Now make a sorted array with the results.                                                                         // 8686
  var arr = [];                                                                                                        // 8687
  for (displayName in candidates) {                                                                                    // 8688
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {                                                    // 8689
      arr.push(candidates[displayName]);                                                                               // 8690
    }                                                                                                                  // 8691
  }                                                                                                                    // 8692
                                                                                                                       // 8693
  arr.sort(function(a, b) {                                                                                            // 8694
    return b.exclusive - a.exclusive;                                                                                  // 8695
  });                                                                                                                  // 8696
                                                                                                                       // 8697
  return arr;                                                                                                          // 8698
}                                                                                                                      // 8699
                                                                                                                       // 8700
function getInclusiveSummary(measurements, onlyClean) {                                                                // 8701
  var candidates = {};                                                                                                 // 8702
  var inclusiveKey;                                                                                                    // 8703
                                                                                                                       // 8704
  for (var i = 0; i < measurements.length; i++) {                                                                      // 8705
    var measurement = measurements[i];                                                                                 // 8706
    var allIDs = merge(measurement.exclusive, measurement.inclusive);                                                  // 8707
    var cleanComponents;                                                                                               // 8708
                                                                                                                       // 8709
    if (onlyClean) {                                                                                                   // 8710
      cleanComponents = getUnchangedComponents(measurement);                                                           // 8711
    }                                                                                                                  // 8712
                                                                                                                       // 8713
    for (var id in allIDs) {                                                                                           // 8714
      if (onlyClean && !cleanComponents[id]) {                                                                         // 8715
        continue;                                                                                                      // 8716
      }                                                                                                                // 8717
                                                                                                                       // 8718
      var displayName = measurement.displayNames[id];                                                                  // 8719
                                                                                                                       // 8720
      // Inclusive time is not useful for many components without knowing where                                        // 8721
      // they are instantiated. So we aggregate inclusive time with both the                                           // 8722
      // owner and current displayName as the key.                                                                     // 8723
      inclusiveKey = displayName.owner + ' > ' + displayName.current;                                                  // 8724
                                                                                                                       // 8725
      candidates[inclusiveKey] = candidates[inclusiveKey] || {                                                         // 8726
        componentName: inclusiveKey,                                                                                   // 8727
        time: 0,                                                                                                       // 8728
        count: 0                                                                                                       // 8729
      };                                                                                                               // 8730
                                                                                                                       // 8731
      if (measurement.inclusive[id]) {                                                                                 // 8732
        candidates[inclusiveKey].time += measurement.inclusive[id];                                                    // 8733
      }                                                                                                                // 8734
      if (measurement.counts[id]) {                                                                                    // 8735
        candidates[inclusiveKey].count += measurement.counts[id];                                                      // 8736
      }                                                                                                                // 8737
    }                                                                                                                  // 8738
  }                                                                                                                    // 8739
                                                                                                                       // 8740
  // Now make a sorted array with the results.                                                                         // 8741
  var arr = [];                                                                                                        // 8742
  for (inclusiveKey in candidates) {                                                                                   // 8743
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {                                                        // 8744
      arr.push(candidates[inclusiveKey]);                                                                              // 8745
    }                                                                                                                  // 8746
  }                                                                                                                    // 8747
                                                                                                                       // 8748
  arr.sort(function(a, b) {                                                                                            // 8749
    return b.time - a.time;                                                                                            // 8750
  });                                                                                                                  // 8751
                                                                                                                       // 8752
  return arr;                                                                                                          // 8753
}                                                                                                                      // 8754
                                                                                                                       // 8755
function getUnchangedComponents(measurement) {                                                                         // 8756
  // For a given reconcile, look at which components did not actually                                                  // 8757
  // render anything to the DOM and return a mapping of their ID to                                                    // 8758
  // the amount of time it took to render the entire subtree.                                                          // 8759
  var cleanComponents = {};                                                                                            // 8760
  var dirtyLeafIDs = Object.keys(measurement.writes);                                                                  // 8761
  var allIDs = merge(measurement.exclusive, measurement.inclusive);                                                    // 8762
                                                                                                                       // 8763
  for (var id in allIDs) {                                                                                             // 8764
    var isDirty = false;                                                                                               // 8765
    // For each component that rendered, see if a component that triggerd                                              // 8766
    // a DOM op is in its subtree.                                                                                     // 8767
    for (var i = 0; i < dirtyLeafIDs.length; i++) {                                                                    // 8768
      if (dirtyLeafIDs[i].indexOf(id) === 0) {                                                                         // 8769
        isDirty = true;                                                                                                // 8770
        break;                                                                                                         // 8771
      }                                                                                                                // 8772
    }                                                                                                                  // 8773
    if (!isDirty && measurement.counts[id] > 0) {                                                                      // 8774
      cleanComponents[id] = true;                                                                                      // 8775
    }                                                                                                                  // 8776
  }                                                                                                                    // 8777
  return cleanComponents;                                                                                              // 8778
}                                                                                                                      // 8779
                                                                                                                       // 8780
var ReactDefaultPerfAnalysis = {                                                                                       // 8781
  getExclusiveSummary: getExclusiveSummary,                                                                            // 8782
  getInclusiveSummary: getInclusiveSummary,                                                                            // 8783
  getDOMSummary: getDOMSummary,                                                                                        // 8784
  getTotalTime: getTotalTime                                                                                           // 8785
};                                                                                                                     // 8786
                                                                                                                       // 8787
module.exports = ReactDefaultPerfAnalysis;                                                                             // 8788
                                                                                                                       // 8789
},{"./merge":121}],47:[function(_dereq_,module,exports){                                                               // 8790
/**                                                                                                                    // 8791
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 8792
 *                                                                                                                     // 8793
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8794
 * you may not use this file except in compliance with the License.                                                    // 8795
 * You may obtain a copy of the License at                                                                             // 8796
 *                                                                                                                     // 8797
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8798
 *                                                                                                                     // 8799
 * Unless required by applicable law or agreed to in writing, software                                                 // 8800
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8801
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8802
 * See the License for the specific language governing permissions and                                                 // 8803
 * limitations under the License.                                                                                      // 8804
 *                                                                                                                     // 8805
 * @providesModule ReactErrorUtils                                                                                     // 8806
 * @typechecks                                                                                                         // 8807
 */                                                                                                                    // 8808
                                                                                                                       // 8809
"use strict";                                                                                                          // 8810
                                                                                                                       // 8811
var ReactErrorUtils = {                                                                                                // 8812
  /**                                                                                                                  // 8813
   * Creates a guarded version of a function. This is supposed to make debugging                                       // 8814
   * of event handlers easier. To aid debugging with the browser's debugger,                                           // 8815
   * this currently simply returns the original function.                                                              // 8816
   *                                                                                                                   // 8817
   * @param {function} func Function to be executed                                                                    // 8818
   * @param {string} name The name of the guard                                                                        // 8819
   * @return {function}                                                                                                // 8820
   */                                                                                                                  // 8821
  guard: function(func, name) {                                                                                        // 8822
    return func;                                                                                                       // 8823
  }                                                                                                                    // 8824
};                                                                                                                     // 8825
                                                                                                                       // 8826
module.exports = ReactErrorUtils;                                                                                      // 8827
                                                                                                                       // 8828
},{}],48:[function(_dereq_,module,exports){                                                                            // 8829
/**                                                                                                                    // 8830
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 8831
 *                                                                                                                     // 8832
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8833
 * you may not use this file except in compliance with the License.                                                    // 8834
 * You may obtain a copy of the License at                                                                             // 8835
 *                                                                                                                     // 8836
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8837
 *                                                                                                                     // 8838
 * Unless required by applicable law or agreed to in writing, software                                                 // 8839
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8840
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8841
 * See the License for the specific language governing permissions and                                                 // 8842
 * limitations under the License.                                                                                      // 8843
 *                                                                                                                     // 8844
 * @providesModule ReactEventEmitter                                                                                   // 8845
 * @typechecks static-only                                                                                             // 8846
 */                                                                                                                    // 8847
                                                                                                                       // 8848
"use strict";                                                                                                          // 8849
                                                                                                                       // 8850
var EventConstants = _dereq_("./EventConstants");                                                                      // 8851
var EventListener = _dereq_("./EventListener");                                                                        // 8852
var EventPluginHub = _dereq_("./EventPluginHub");                                                                      // 8853
var EventPluginRegistry = _dereq_("./EventPluginRegistry");                                                            // 8854
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 8855
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");                                                      // 8856
var ViewportMetrics = _dereq_("./ViewportMetrics");                                                                    // 8857
                                                                                                                       // 8858
var invariant = _dereq_("./invariant");                                                                                // 8859
var isEventSupported = _dereq_("./isEventSupported");                                                                  // 8860
var merge = _dereq_("./merge");                                                                                        // 8861
                                                                                                                       // 8862
/**                                                                                                                    // 8863
 * Summary of `ReactEventEmitter` event handling:                                                                      // 8864
 *                                                                                                                     // 8865
 *  - Top-level delegation is used to trap native browser events. We normalize                                         // 8866
 *    and de-duplicate events to account for browser quirks.                                                           // 8867
 *                                                                                                                     // 8868
 *  - Forward these native events (with the associated top-level type used to                                          // 8869
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want                                        // 8870
 *    to extract any synthetic events.                                                                                 // 8871
 *                                                                                                                     // 8872
 *  - The `EventPluginHub` will then process each event by annotating them with                                        // 8873
 *    "dispatches", a sequence of listeners and IDs that care about that event.                                        // 8874
 *                                                                                                                     // 8875
 *  - The `EventPluginHub` then dispatches the events.                                                                 // 8876
 *                                                                                                                     // 8877
 * Overview of React and the event system:                                                                             // 8878
 *                                                                                                                     // 8879
 *                   .                                                                                                 // 8880
 * +------------+    .                                                                                                 // 8881
 * |    DOM     |    .                                                                                                 // 8882
 * +------------+    .                         +-----------+                                                           // 8883
 *       +           .               +--------+|SimpleEvent|                                                           // 8884
 *       |           .               |         |Plugin     |                                                           // 8885
 * +-----|------+    .               v         +-----------+                                                           // 8886
 * |     |      |    .    +--------------+                    +------------+                                           // 8887
 * |     +-----------.--->|EventPluginHub|                    |    Event   |                                           // 8888
 * |            |    .    |              |     +-----------+  | Propagators|                                           // 8889
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|                                           // 8890
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|                                           // 8891
 * |            |    .    |              |     +-----------+  |  utilities |                                           // 8892
 * |     +-----------.--->|              |                    +------------+                                           // 8893
 * |     |      |    .    +--------------+                                                                             // 8894
 * +-----|------+    .                ^        +-----------+                                                           // 8895
 *       |           .                |        |Enter/Leave|                                                           // 8896
 *       +           .                +-------+|Plugin     |                                                           // 8897
 * +-------------+   .                         +-----------+                                                           // 8898
 * | application |   .                                                                                                 // 8899
 * |-------------|   .                                                                                                 // 8900
 * |             |   .                                                                                                 // 8901
 * |             |   .                                                                                                 // 8902
 * +-------------+   .                                                                                                 // 8903
 *                   .                                                                                                 // 8904
 *    React Core     .  General Purpose Event Plugin System                                                            // 8905
 */                                                                                                                    // 8906
                                                                                                                       // 8907
var alreadyListeningTo = {};                                                                                           // 8908
var isMonitoringScrollValue = false;                                                                                   // 8909
var reactTopListenersCounter = 0;                                                                                      // 8910
                                                                                                                       // 8911
// For events like 'submit' which don't consistently bubble (which we trap at a                                        // 8912
// lower node than `document`), binding at `document` would cause duplicate                                            // 8913
// events so we don't include them here                                                                                // 8914
var topEventMapping = {                                                                                                // 8915
  topBlur: 'blur',                                                                                                     // 8916
  topChange: 'change',                                                                                                 // 8917
  topClick: 'click',                                                                                                   // 8918
  topCompositionEnd: 'compositionend',                                                                                 // 8919
  topCompositionStart: 'compositionstart',                                                                             // 8920
  topCompositionUpdate: 'compositionupdate',                                                                           // 8921
  topContextMenu: 'contextmenu',                                                                                       // 8922
  topCopy: 'copy',                                                                                                     // 8923
  topCut: 'cut',                                                                                                       // 8924
  topDoubleClick: 'dblclick',                                                                                          // 8925
  topDrag: 'drag',                                                                                                     // 8926
  topDragEnd: 'dragend',                                                                                               // 8927
  topDragEnter: 'dragenter',                                                                                           // 8928
  topDragExit: 'dragexit',                                                                                             // 8929
  topDragLeave: 'dragleave',                                                                                           // 8930
  topDragOver: 'dragover',                                                                                             // 8931
  topDragStart: 'dragstart',                                                                                           // 8932
  topDrop: 'drop',                                                                                                     // 8933
  topFocus: 'focus',                                                                                                   // 8934
  topInput: 'input',                                                                                                   // 8935
  topKeyDown: 'keydown',                                                                                               // 8936
  topKeyPress: 'keypress',                                                                                             // 8937
  topKeyUp: 'keyup',                                                                                                   // 8938
  topMouseDown: 'mousedown',                                                                                           // 8939
  topMouseMove: 'mousemove',                                                                                           // 8940
  topMouseOut: 'mouseout',                                                                                             // 8941
  topMouseOver: 'mouseover',                                                                                           // 8942
  topMouseUp: 'mouseup',                                                                                               // 8943
  topPaste: 'paste',                                                                                                   // 8944
  topScroll: 'scroll',                                                                                                 // 8945
  topSelectionChange: 'selectionchange',                                                                               // 8946
  topTouchCancel: 'touchcancel',                                                                                       // 8947
  topTouchEnd: 'touchend',                                                                                             // 8948
  topTouchMove: 'touchmove',                                                                                           // 8949
  topTouchStart: 'touchstart',                                                                                         // 8950
  topWheel: 'wheel'                                                                                                    // 8951
};                                                                                                                     // 8952
                                                                                                                       // 8953
/**                                                                                                                    // 8954
 * To ensure no conflicts with other potential React instances on the page                                             // 8955
 */                                                                                                                    // 8956
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);                                          // 8957
                                                                                                                       // 8958
function getListeningForDocument(mountAt) {                                                                            // 8959
  if (mountAt[topListenersIDKey] == null) {                                                                            // 8960
    mountAt[topListenersIDKey] = reactTopListenersCounter++;                                                           // 8961
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};                                                               // 8962
  }                                                                                                                    // 8963
  return alreadyListeningTo[mountAt[topListenersIDKey]];                                                               // 8964
}                                                                                                                      // 8965
                                                                                                                       // 8966
/**                                                                                                                    // 8967
 * Traps top-level events by using event bubbling.                                                                     // 8968
 *                                                                                                                     // 8969
 * @param {string} topLevelType Record from `EventConstants`.                                                          // 8970
 * @param {string} handlerBaseName Event name (e.g. "click").                                                          // 8971
 * @param {DOMEventTarget} element Element on which to attach listener.                                                // 8972
 * @internal                                                                                                           // 8973
 */                                                                                                                    // 8974
function trapBubbledEvent(topLevelType, handlerBaseName, element) {                                                    // 8975
  EventListener.listen(                                                                                                // 8976
    element,                                                                                                           // 8977
    handlerBaseName,                                                                                                   // 8978
    ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(                                                  // 8979
      topLevelType                                                                                                     // 8980
    )                                                                                                                  // 8981
  );                                                                                                                   // 8982
}                                                                                                                      // 8983
                                                                                                                       // 8984
/**                                                                                                                    // 8985
 * Traps a top-level event by using event capturing.                                                                   // 8986
 *                                                                                                                     // 8987
 * @param {string} topLevelType Record from `EventConstants`.                                                          // 8988
 * @param {string} handlerBaseName Event name (e.g. "click").                                                          // 8989
 * @param {DOMEventTarget} element Element on which to attach listener.                                                // 8990
 * @internal                                                                                                           // 8991
 */                                                                                                                    // 8992
function trapCapturedEvent(topLevelType, handlerBaseName, element) {                                                   // 8993
  EventListener.capture(                                                                                               // 8994
    element,                                                                                                           // 8995
    handlerBaseName,                                                                                                   // 8996
    ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(                                                  // 8997
      topLevelType                                                                                                     // 8998
    )                                                                                                                  // 8999
  );                                                                                                                   // 9000
}                                                                                                                      // 9001
                                                                                                                       // 9002
/**                                                                                                                    // 9003
 * `ReactEventEmitter` is used to attach top-level event listeners. For example:                                       // 9004
 *                                                                                                                     // 9005
 *   ReactEventEmitter.putListener('myID', 'onClick', myFunction);                                                     // 9006
 *                                                                                                                     // 9007
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.                                        // 9008
 *                                                                                                                     // 9009
 * @internal                                                                                                           // 9010
 */                                                                                                                    // 9011
var ReactEventEmitter = merge(ReactEventEmitterMixin, {                                                                // 9012
                                                                                                                       // 9013
  /**                                                                                                                  // 9014
   * React references `ReactEventTopLevelCallback` using this property in order                                        // 9015
   * to allow dependency injection.                                                                                    // 9016
   */                                                                                                                  // 9017
  TopLevelCallbackCreator: null,                                                                                       // 9018
                                                                                                                       // 9019
  injection: {                                                                                                         // 9020
    /**                                                                                                                // 9021
     * @param {function} TopLevelCallbackCreator                                                                       // 9022
     */                                                                                                                // 9023
    injectTopLevelCallbackCreator: function(TopLevelCallbackCreator) {                                                 // 9024
      ReactEventEmitter.TopLevelCallbackCreator = TopLevelCallbackCreator;                                             // 9025
    }                                                                                                                  // 9026
  },                                                                                                                   // 9027
                                                                                                                       // 9028
  /**                                                                                                                  // 9029
   * Sets whether or not any created callbacks should be enabled.                                                      // 9030
   *                                                                                                                   // 9031
   * @param {boolean} enabled True if callbacks should be enabled.                                                     // 9032
   */                                                                                                                  // 9033
  setEnabled: function(enabled) {                                                                                      // 9034
    ("production" !== "development" ? invariant(                                                                       // 9035
      ExecutionEnvironment.canUseDOM,                                                                                  // 9036
      'setEnabled(...): Cannot toggle event listening in a Worker thread. ' +                                          // 9037
      'This is likely a bug in the framework. Please report immediately.'                                              // 9038
    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 9039
    if (ReactEventEmitter.TopLevelCallbackCreator) {                                                                   // 9040
      ReactEventEmitter.TopLevelCallbackCreator.setEnabled(enabled);                                                   // 9041
    }                                                                                                                  // 9042
  },                                                                                                                   // 9043
                                                                                                                       // 9044
  /**                                                                                                                  // 9045
   * @return {boolean} True if callbacks are enabled.                                                                  // 9046
   */                                                                                                                  // 9047
  isEnabled: function() {                                                                                              // 9048
    return !!(                                                                                                         // 9049
      ReactEventEmitter.TopLevelCallbackCreator &&                                                                     // 9050
      ReactEventEmitter.TopLevelCallbackCreator.isEnabled()                                                            // 9051
    );                                                                                                                 // 9052
  },                                                                                                                   // 9053
                                                                                                                       // 9054
  /**                                                                                                                  // 9055
   * We listen for bubbled touch events on the document object.                                                        // 9056
   *                                                                                                                   // 9057
   * Firefox v8.01 (and possibly others) exhibited strange behavior when                                               // 9058
   * mounting `onmousemove` events at some node that was not the document                                              // 9059
   * element. The symptoms were that if your mouse is not moving over something                                        // 9060
   * contained within that mount point (for example on the background) the                                             // 9061
   * top-level listeners for `onmousemove` won't be called. However, if you                                            // 9062
   * register the `mousemove` on the document object, then it will of course                                           // 9063
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting                                         // 9064
   * top-level listeners to the document object only, at least for these                                               // 9065
   * movement types of events and possibly all events.                                                                 // 9066
   *                                                                                                                   // 9067
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html                                         // 9068
   *                                                                                                                   // 9069
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but                                         // 9070
   * they bubble to document.                                                                                          // 9071
   *                                                                                                                   // 9072
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 9073
   * @param {DOMDocument} contentDocument Document which owns the container                                            // 9074
   */                                                                                                                  // 9075
  listenTo: function(registrationName, contentDocument) {                                                              // 9076
    var mountAt = contentDocument;                                                                                     // 9077
    var isListening = getListeningForDocument(mountAt);                                                                // 9078
    var dependencies = EventPluginRegistry.                                                                            // 9079
      registrationNameDependencies[registrationName];                                                                  // 9080
                                                                                                                       // 9081
    var topLevelTypes = EventConstants.topLevelTypes;                                                                  // 9082
    for (var i = 0, l = dependencies.length; i < l; i++) {                                                             // 9083
      var dependency = dependencies[i];                                                                                // 9084
      if (!isListening[dependency]) {                                                                                  // 9085
        var topLevelType = topLevelTypes[dependency];                                                                  // 9086
                                                                                                                       // 9087
        if (topLevelType === topLevelTypes.topWheel) {                                                                 // 9088
          if (isEventSupported('wheel')) {                                                                             // 9089
            trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);                                                // 9090
          } else if (isEventSupported('mousewheel')) {                                                                 // 9091
            trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);                                           // 9092
          } else {                                                                                                     // 9093
            // Firefox needs to capture a different mouse scroll event.                                                // 9094
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html                                             // 9095
            trapBubbledEvent(                                                                                          // 9096
              topLevelTypes.topWheel,                                                                                  // 9097
              'DOMMouseScroll',                                                                                        // 9098
              mountAt);                                                                                                // 9099
          }                                                                                                            // 9100
        } else if (topLevelType === topLevelTypes.topScroll) {                                                         // 9101
                                                                                                                       // 9102
          if (isEventSupported('scroll', true)) {                                                                      // 9103
            trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);                                             // 9104
          } else {                                                                                                     // 9105
            trapBubbledEvent(topLevelTypes.topScroll, 'scroll', window);                                               // 9106
          }                                                                                                            // 9107
        } else if (topLevelType === topLevelTypes.topFocus ||                                                          // 9108
            topLevelType === topLevelTypes.topBlur) {                                                                  // 9109
                                                                                                                       // 9110
          if (isEventSupported('focus', true)) {                                                                       // 9111
            trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);                                               // 9112
            trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);                                                 // 9113
          } else if (isEventSupported('focusin')) {                                                                    // 9114
            // IE has `focusin` and `focusout` events which bubble.                                                    // 9115
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html                                // 9116
            trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);                                              // 9117
            trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);                                              // 9118
          }                                                                                                            // 9119
                                                                                                                       // 9120
          // to make sure blur and focus event listeners are only attached once                                        // 9121
          isListening[topLevelTypes.topBlur] = true;                                                                   // 9122
          isListening[topLevelTypes.topFocus] = true;                                                                  // 9123
        } else if (topEventMapping[dependency]) {                                                                      // 9124
          trapBubbledEvent(topLevelType, topEventMapping[dependency], mountAt);                                        // 9125
        }                                                                                                              // 9126
                                                                                                                       // 9127
        isListening[dependency] = true;                                                                                // 9128
      }                                                                                                                // 9129
    }                                                                                                                  // 9130
  },                                                                                                                   // 9131
                                                                                                                       // 9132
  /**                                                                                                                  // 9133
   * Listens to window scroll and resize events. We cache scroll values so that                                        // 9134
   * application code can access them without triggering reflows.                                                      // 9135
   *                                                                                                                   // 9136
   * NOTE: Scroll events do not bubble.                                                                                // 9137
   *                                                                                                                   // 9138
   * @see http://www.quirksmode.org/dom/events/scroll.html                                                             // 9139
   */                                                                                                                  // 9140
  ensureScrollValueMonitoring: function(){                                                                             // 9141
    if (!isMonitoringScrollValue) {                                                                                    // 9142
      var refresh = ViewportMetrics.refreshScrollValues;                                                               // 9143
      EventListener.listen(window, 'scroll', refresh);                                                                 // 9144
      EventListener.listen(window, 'resize', refresh);                                                                 // 9145
      isMonitoringScrollValue = true;                                                                                  // 9146
    }                                                                                                                  // 9147
  },                                                                                                                   // 9148
                                                                                                                       // 9149
  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,                                                   // 9150
                                                                                                                       // 9151
  registrationNameModules: EventPluginHub.registrationNameModules,                                                     // 9152
                                                                                                                       // 9153
  putListener: EventPluginHub.putListener,                                                                             // 9154
                                                                                                                       // 9155
  getListener: EventPluginHub.getListener,                                                                             // 9156
                                                                                                                       // 9157
  deleteListener: EventPluginHub.deleteListener,                                                                       // 9158
                                                                                                                       // 9159
  deleteAllListeners: EventPluginHub.deleteAllListeners,                                                               // 9160
                                                                                                                       // 9161
  trapBubbledEvent: trapBubbledEvent,                                                                                  // 9162
                                                                                                                       // 9163
  trapCapturedEvent: trapCapturedEvent                                                                                 // 9164
                                                                                                                       // 9165
});                                                                                                                    // 9166
                                                                                                                       // 9167
module.exports = ReactEventEmitter;                                                                                    // 9168
                                                                                                                       // 9169
},{"./EventConstants":14,"./EventListener":15,"./EventPluginHub":16,"./EventPluginRegistry":17,"./ExecutionEnvironment":20,"./ReactEventEmitterMixin":49,"./ViewportMetrics":86,"./invariant":112,"./isEventSupported":113,"./merge":121}],49:[function(_dereq_,module,exports){
/**                                                                                                                    // 9171
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 9172
 *                                                                                                                     // 9173
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9174
 * you may not use this file except in compliance with the License.                                                    // 9175
 * You may obtain a copy of the License at                                                                             // 9176
 *                                                                                                                     // 9177
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9178
 *                                                                                                                     // 9179
 * Unless required by applicable law or agreed to in writing, software                                                 // 9180
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9181
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9182
 * See the License for the specific language governing permissions and                                                 // 9183
 * limitations under the License.                                                                                      // 9184
 *                                                                                                                     // 9185
 * @providesModule ReactEventEmitterMixin                                                                              // 9186
 */                                                                                                                    // 9187
                                                                                                                       // 9188
"use strict";                                                                                                          // 9189
                                                                                                                       // 9190
var EventPluginHub = _dereq_("./EventPluginHub");                                                                      // 9191
var ReactUpdates = _dereq_("./ReactUpdates");                                                                          // 9192
                                                                                                                       // 9193
function runEventQueueInBatch(events) {                                                                                // 9194
  EventPluginHub.enqueueEvents(events);                                                                                // 9195
  EventPluginHub.processEventQueue();                                                                                  // 9196
}                                                                                                                      // 9197
                                                                                                                       // 9198
var ReactEventEmitterMixin = {                                                                                         // 9199
                                                                                                                       // 9200
  /**                                                                                                                  // 9201
   * Streams a fired top-level event to `EventPluginHub` where plugins have the                                        // 9202
   * opportunity to create `ReactEvent`s to be dispatched.                                                             // 9203
   *                                                                                                                   // 9204
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 9205
   * @param {object} topLevelTarget The listening component root node.                                                 // 9206
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 9207
   * @param {object} nativeEvent Native environment event.                                                             // 9208
   */                                                                                                                  // 9209
  handleTopLevel: function(                                                                                            // 9210
      topLevelType,                                                                                                    // 9211
      topLevelTarget,                                                                                                  // 9212
      topLevelTargetID,                                                                                                // 9213
      nativeEvent) {                                                                                                   // 9214
    var events = EventPluginHub.extractEvents(                                                                         // 9215
      topLevelType,                                                                                                    // 9216
      topLevelTarget,                                                                                                  // 9217
      topLevelTargetID,                                                                                                // 9218
      nativeEvent                                                                                                      // 9219
    );                                                                                                                 // 9220
                                                                                                                       // 9221
    // Event queue being processed in the same cycle allows `preventDefault`.                                          // 9222
    ReactUpdates.batchedUpdates(runEventQueueInBatch, events);                                                         // 9223
  }                                                                                                                    // 9224
};                                                                                                                     // 9225
                                                                                                                       // 9226
module.exports = ReactEventEmitterMixin;                                                                               // 9227
                                                                                                                       // 9228
},{"./EventPluginHub":16,"./ReactUpdates":71}],50:[function(_dereq_,module,exports){                                   // 9229
/**                                                                                                                    // 9230
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 9231
 *                                                                                                                     // 9232
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9233
 * you may not use this file except in compliance with the License.                                                    // 9234
 * You may obtain a copy of the License at                                                                             // 9235
 *                                                                                                                     // 9236
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9237
 *                                                                                                                     // 9238
 * Unless required by applicable law or agreed to in writing, software                                                 // 9239
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9240
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9241
 * See the License for the specific language governing permissions and                                                 // 9242
 * limitations under the License.                                                                                      // 9243
 *                                                                                                                     // 9244
 * @providesModule ReactEventTopLevelCallback                                                                          // 9245
 * @typechecks static-only                                                                                             // 9246
 */                                                                                                                    // 9247
                                                                                                                       // 9248
"use strict";                                                                                                          // 9249
                                                                                                                       // 9250
var PooledClass = _dereq_("./PooledClass");                                                                            // 9251
var ReactEventEmitter = _dereq_("./ReactEventEmitter");                                                                // 9252
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");                                                          // 9253
var ReactMount = _dereq_("./ReactMount");                                                                              // 9254
                                                                                                                       // 9255
var getEventTarget = _dereq_("./getEventTarget");                                                                      // 9256
var mixInto = _dereq_("./mixInto");                                                                                    // 9257
                                                                                                                       // 9258
/**                                                                                                                    // 9259
 * @type {boolean}                                                                                                     // 9260
 * @private                                                                                                            // 9261
 */                                                                                                                    // 9262
var _topLevelListenersEnabled = true;                                                                                  // 9263
                                                                                                                       // 9264
/**                                                                                                                    // 9265
 * Finds the parent React component of `node`.                                                                         // 9266
 *                                                                                                                     // 9267
 * @param {*} node                                                                                                     // 9268
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node                                         // 9269
 *                           is not nested.                                                                            // 9270
 */                                                                                                                    // 9271
function findParent(node) {                                                                                            // 9272
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM                                              // 9273
  // traversal, but caching is difficult to do correctly without using a                                               // 9274
  // mutation observer to listen for all DOM changes.                                                                  // 9275
  var nodeID = ReactMount.getID(node);                                                                                 // 9276
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);                                                  // 9277
  var container = ReactMount.findReactContainerForID(rootID);                                                          // 9278
  var parent = ReactMount.getFirstReactDOM(container);                                                                 // 9279
  return parent;                                                                                                       // 9280
}                                                                                                                      // 9281
                                                                                                                       // 9282
/**                                                                                                                    // 9283
 * Calls ReactEventEmitter.handleTopLevel for each node stored in bookKeeping's                                        // 9284
 * ancestor list. Separated from createTopLevelCallback to avoid try/finally                                           // 9285
 * deoptimization.                                                                                                     // 9286
 *                                                                                                                     // 9287
 * @param {string} topLevelType                                                                                        // 9288
 * @param {DOMEvent} nativeEvent                                                                                       // 9289
 * @param {TopLevelCallbackBookKeeping} bookKeeping                                                                    // 9290
 */                                                                                                                    // 9291
function handleTopLevelImpl(topLevelType, nativeEvent, bookKeeping) {                                                  // 9292
  var topLevelTarget = ReactMount.getFirstReactDOM(                                                                    // 9293
    getEventTarget(nativeEvent)                                                                                        // 9294
  ) || window;                                                                                                         // 9295
                                                                                                                       // 9296
  // Loop through the hierarchy, in case there's any nested components.                                                // 9297
  // It's important that we build the array of ancestors before calling any                                            // 9298
  // event handlers, because event handlers can modify the DOM, leading to                                             // 9299
  // inconsistencies with ReactMount's node cache. See #1105.                                                          // 9300
  var ancestor = topLevelTarget;                                                                                       // 9301
  while (ancestor) {                                                                                                   // 9302
    bookKeeping.ancestors.push(ancestor);                                                                              // 9303
    ancestor = findParent(ancestor);                                                                                   // 9304
  }                                                                                                                    // 9305
                                                                                                                       // 9306
  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {                                                      // 9307
    topLevelTarget = bookKeeping.ancestors[i];                                                                         // 9308
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';                                                     // 9309
    ReactEventEmitter.handleTopLevel(                                                                                  // 9310
      topLevelType,                                                                                                    // 9311
      topLevelTarget,                                                                                                  // 9312
      topLevelTargetID,                                                                                                // 9313
      nativeEvent                                                                                                      // 9314
    );                                                                                                                 // 9315
  }                                                                                                                    // 9316
}                                                                                                                      // 9317
                                                                                                                       // 9318
// Used to store ancestor hierarchy in top level callback                                                              // 9319
function TopLevelCallbackBookKeeping() {                                                                               // 9320
  this.ancestors = [];                                                                                                 // 9321
}                                                                                                                      // 9322
mixInto(TopLevelCallbackBookKeeping, {                                                                                 // 9323
  destructor: function() {                                                                                             // 9324
    this.ancestors.length = 0;                                                                                         // 9325
  }                                                                                                                    // 9326
});                                                                                                                    // 9327
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping);                                                                 // 9328
                                                                                                                       // 9329
/**                                                                                                                    // 9330
 * Top-level callback creator used to implement event handling using delegation.                                       // 9331
 * This is used via dependency injection.                                                                              // 9332
 */                                                                                                                    // 9333
var ReactEventTopLevelCallback = {                                                                                     // 9334
                                                                                                                       // 9335
  /**                                                                                                                  // 9336
   * Sets whether or not any created callbacks should be enabled.                                                      // 9337
   *                                                                                                                   // 9338
   * @param {boolean} enabled True if callbacks should be enabled.                                                     // 9339
   */                                                                                                                  // 9340
  setEnabled: function(enabled) {                                                                                      // 9341
    _topLevelListenersEnabled = !!enabled;                                                                             // 9342
  },                                                                                                                   // 9343
                                                                                                                       // 9344
  /**                                                                                                                  // 9345
   * @return {boolean} True if callbacks are enabled.                                                                  // 9346
   */                                                                                                                  // 9347
  isEnabled: function() {                                                                                              // 9348
    return _topLevelListenersEnabled;                                                                                  // 9349
  },                                                                                                                   // 9350
                                                                                                                       // 9351
  /**                                                                                                                  // 9352
   * Creates a callback for the supplied `topLevelType` that could be added as                                         // 9353
   * a listener to the document. The callback computes a `topLevelTarget` which                                        // 9354
   * should be the root node of a mounted React component where the listener                                           // 9355
   * is attached.                                                                                                      // 9356
   *                                                                                                                   // 9357
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 9358
   * @return {function} Callback for handling top-level events.                                                        // 9359
   */                                                                                                                  // 9360
  createTopLevelCallback: function(topLevelType) {                                                                     // 9361
    return function(nativeEvent) {                                                                                     // 9362
      if (!_topLevelListenersEnabled) {                                                                                // 9363
        return;                                                                                                        // 9364
      }                                                                                                                // 9365
                                                                                                                       // 9366
      var bookKeeping = TopLevelCallbackBookKeeping.getPooled();                                                       // 9367
      try {                                                                                                            // 9368
        handleTopLevelImpl(topLevelType, nativeEvent, bookKeeping);                                                    // 9369
      } finally {                                                                                                      // 9370
        TopLevelCallbackBookKeeping.release(bookKeeping);                                                              // 9371
      }                                                                                                                // 9372
    };                                                                                                                 // 9373
  }                                                                                                                    // 9374
                                                                                                                       // 9375
};                                                                                                                     // 9376
                                                                                                                       // 9377
module.exports = ReactEventTopLevelCallback;                                                                           // 9378
                                                                                                                       // 9379
},{"./PooledClass":23,"./ReactEventEmitter":48,"./ReactInstanceHandles":53,"./ReactMount":55,"./getEventTarget":104,"./mixInto":124}],51:[function(_dereq_,module,exports){
/**                                                                                                                    // 9381
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 9382
 *                                                                                                                     // 9383
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9384
 * you may not use this file except in compliance with the License.                                                    // 9385
 * You may obtain a copy of the License at                                                                             // 9386
 *                                                                                                                     // 9387
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9388
 *                                                                                                                     // 9389
 * Unless required by applicable law or agreed to in writing, software                                                 // 9390
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9391
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9392
 * See the License for the specific language governing permissions and                                                 // 9393
 * limitations under the License.                                                                                      // 9394
 *                                                                                                                     // 9395
 * @providesModule ReactInjection                                                                                      // 9396
 */                                                                                                                    // 9397
                                                                                                                       // 9398
"use strict";                                                                                                          // 9399
                                                                                                                       // 9400
var DOMProperty = _dereq_("./DOMProperty");                                                                            // 9401
var EventPluginHub = _dereq_("./EventPluginHub");                                                                      // 9402
var ReactComponent = _dereq_("./ReactComponent");                                                                      // 9403
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");                                                    // 9404
var ReactDOM = _dereq_("./ReactDOM");                                                                                  // 9405
var ReactEventEmitter = _dereq_("./ReactEventEmitter");                                                                // 9406
var ReactPerf = _dereq_("./ReactPerf");                                                                                // 9407
var ReactRootIndex = _dereq_("./ReactRootIndex");                                                                      // 9408
var ReactUpdates = _dereq_("./ReactUpdates");                                                                          // 9409
                                                                                                                       // 9410
var ReactInjection = {                                                                                                 // 9411
  Component: ReactComponent.injection,                                                                                 // 9412
  CompositeComponent: ReactCompositeComponent.injection,                                                               // 9413
  DOMProperty: DOMProperty.injection,                                                                                  // 9414
  EventPluginHub: EventPluginHub.injection,                                                                            // 9415
  DOM: ReactDOM.injection,                                                                                             // 9416
  EventEmitter: ReactEventEmitter.injection,                                                                           // 9417
  Perf: ReactPerf.injection,                                                                                           // 9418
  RootIndex: ReactRootIndex.injection,                                                                                 // 9419
  Updates: ReactUpdates.injection                                                                                      // 9420
};                                                                                                                     // 9421
                                                                                                                       // 9422
module.exports = ReactInjection;                                                                                       // 9423
                                                                                                                       // 9424
},{"./DOMProperty":8,"./EventPluginHub":16,"./ReactComponent":27,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactEventEmitter":48,"./ReactPerf":60,"./ReactRootIndex":67,"./ReactUpdates":71}],52:[function(_dereq_,module,exports){
/**                                                                                                                    // 9426
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 9427
 *                                                                                                                     // 9428
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9429
 * you may not use this file except in compliance with the License.                                                    // 9430
 * You may obtain a copy of the License at                                                                             // 9431
 *                                                                                                                     // 9432
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9433
 *                                                                                                                     // 9434
 * Unless required by applicable law or agreed to in writing, software                                                 // 9435
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9436
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9437
 * See the License for the specific language governing permissions and                                                 // 9438
 * limitations under the License.                                                                                      // 9439
 *                                                                                                                     // 9440
 * @providesModule ReactInputSelection                                                                                 // 9441
 */                                                                                                                    // 9442
                                                                                                                       // 9443
"use strict";                                                                                                          // 9444
                                                                                                                       // 9445
var ReactDOMSelection = _dereq_("./ReactDOMSelection");                                                                // 9446
                                                                                                                       // 9447
var containsNode = _dereq_("./containsNode");                                                                          // 9448
var focusNode = _dereq_("./focusNode");                                                                                // 9449
var getActiveElement = _dereq_("./getActiveElement");                                                                  // 9450
                                                                                                                       // 9451
function isInDocument(node) {                                                                                          // 9452
  return containsNode(document.documentElement, node);                                                                 // 9453
}                                                                                                                      // 9454
                                                                                                                       // 9455
/**                                                                                                                    // 9456
 * @ReactInputSelection: React input selection module. Based on Selection.js,                                          // 9457
 * but modified to be suitable for react and has a couple of bug fixes (doesn't                                        // 9458
 * assume buttons have range selections allowed).                                                                      // 9459
 * Input selection module for React.                                                                                   // 9460
 */                                                                                                                    // 9461
var ReactInputSelection = {                                                                                            // 9462
                                                                                                                       // 9463
  hasSelectionCapabilities: function(elem) {                                                                           // 9464
    return elem && (                                                                                                   // 9465
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||                                                           // 9466
      elem.nodeName === 'TEXTAREA' ||                                                                                  // 9467
      elem.contentEditable === 'true'                                                                                  // 9468
    );                                                                                                                 // 9469
  },                                                                                                                   // 9470
                                                                                                                       // 9471
  getSelectionInformation: function() {                                                                                // 9472
    var focusedElem = getActiveElement();                                                                              // 9473
    return {                                                                                                           // 9474
      focusedElem: focusedElem,                                                                                        // 9475
      selectionRange:                                                                                                  // 9476
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?                                                  // 9477
          ReactInputSelection.getSelection(focusedElem) :                                                              // 9478
          null                                                                                                         // 9479
    };                                                                                                                 // 9480
  },                                                                                                                   // 9481
                                                                                                                       // 9482
  /**                                                                                                                  // 9483
   * @restoreSelection: If any selection information was potentially lost,                                             // 9484
   * restore it. This is useful when performing operations that could remove dom                                       // 9485
   * nodes and place them back in, resulting in focus being lost.                                                      // 9486
   */                                                                                                                  // 9487
  restoreSelection: function(priorSelectionInformation) {                                                              // 9488
    var curFocusedElem = getActiveElement();                                                                           // 9489
    var priorFocusedElem = priorSelectionInformation.focusedElem;                                                      // 9490
    var priorSelectionRange = priorSelectionInformation.selectionRange;                                                // 9491
    if (curFocusedElem !== priorFocusedElem &&                                                                         // 9492
        isInDocument(priorFocusedElem)) {                                                                              // 9493
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {                                            // 9494
        ReactInputSelection.setSelection(                                                                              // 9495
          priorFocusedElem,                                                                                            // 9496
          priorSelectionRange                                                                                          // 9497
        );                                                                                                             // 9498
      }                                                                                                                // 9499
      focusNode(priorFocusedElem);                                                                                     // 9500
    }                                                                                                                  // 9501
  },                                                                                                                   // 9502
                                                                                                                       // 9503
  /**                                                                                                                  // 9504
   * @getSelection: Gets the selection bounds of a focused textarea, input or                                          // 9505
   * contentEditable node.                                                                                             // 9506
   * -@input: Look up selection bounds of this input                                                                   // 9507
   * -@return {start: selectionStart, end: selectionEnd}                                                               // 9508
   */                                                                                                                  // 9509
  getSelection: function(input) {                                                                                      // 9510
    var selection;                                                                                                     // 9511
                                                                                                                       // 9512
    if ('selectionStart' in input) {                                                                                   // 9513
      // Modern browser with input or textarea.                                                                        // 9514
      selection = {                                                                                                    // 9515
        start: input.selectionStart,                                                                                   // 9516
        end: input.selectionEnd                                                                                        // 9517
      };                                                                                                               // 9518
    } else if (document.selection && input.nodeName === 'INPUT') {                                                     // 9519
      // IE8 input.                                                                                                    // 9520
      var range = document.selection.createRange();                                                                    // 9521
      // There can only be one selection per document in IE, so it must                                                // 9522
      // be in our element.                                                                                            // 9523
      if (range.parentElement() === input) {                                                                           // 9524
        selection = {                                                                                                  // 9525
          start: -range.moveStart('character', -input.value.length),                                                   // 9526
          end: -range.moveEnd('character', -input.value.length)                                                        // 9527
        };                                                                                                             // 9528
      }                                                                                                                // 9529
    } else {                                                                                                           // 9530
      // Content editable or old IE textarea.                                                                          // 9531
      selection = ReactDOMSelection.getOffsets(input);                                                                 // 9532
    }                                                                                                                  // 9533
                                                                                                                       // 9534
    return selection || {start: 0, end: 0};                                                                            // 9535
  },                                                                                                                   // 9536
                                                                                                                       // 9537
  /**                                                                                                                  // 9538
   * @setSelection: Sets the selection bounds of a textarea or input and focuses                                       // 9539
   * the input.                                                                                                        // 9540
   * -@input     Set selection bounds of this input or textarea                                                        // 9541
   * -@offsets   Object of same form that is returned from get*                                                        // 9542
   */                                                                                                                  // 9543
  setSelection: function(input, offsets) {                                                                             // 9544
    var start = offsets.start;                                                                                         // 9545
    var end = offsets.end;                                                                                             // 9546
    if (typeof end === 'undefined') {                                                                                  // 9547
      end = start;                                                                                                     // 9548
    }                                                                                                                  // 9549
                                                                                                                       // 9550
    if ('selectionStart' in input) {                                                                                   // 9551
      input.selectionStart = start;                                                                                    // 9552
      input.selectionEnd = Math.min(end, input.value.length);                                                          // 9553
    } else if (document.selection && input.nodeName === 'INPUT') {                                                     // 9554
      var range = input.createTextRange();                                                                             // 9555
      range.collapse(true);                                                                                            // 9556
      range.moveStart('character', start);                                                                             // 9557
      range.moveEnd('character', end - start);                                                                         // 9558
      range.select();                                                                                                  // 9559
    } else {                                                                                                           // 9560
      ReactDOMSelection.setOffsets(input, offsets);                                                                    // 9561
    }                                                                                                                  // 9562
  }                                                                                                                    // 9563
};                                                                                                                     // 9564
                                                                                                                       // 9565
module.exports = ReactInputSelection;                                                                                  // 9566
                                                                                                                       // 9567
},{"./ReactDOMSelection":41,"./containsNode":89,"./focusNode":100,"./getActiveElement":102}],53:[function(_dereq_,module,exports){
/**                                                                                                                    // 9569
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 9570
 *                                                                                                                     // 9571
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9572
 * you may not use this file except in compliance with the License.                                                    // 9573
 * You may obtain a copy of the License at                                                                             // 9574
 *                                                                                                                     // 9575
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9576
 *                                                                                                                     // 9577
 * Unless required by applicable law or agreed to in writing, software                                                 // 9578
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9579
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9580
 * See the License for the specific language governing permissions and                                                 // 9581
 * limitations under the License.                                                                                      // 9582
 *                                                                                                                     // 9583
 * @providesModule ReactInstanceHandles                                                                                // 9584
 * @typechecks static-only                                                                                             // 9585
 */                                                                                                                    // 9586
                                                                                                                       // 9587
"use strict";                                                                                                          // 9588
                                                                                                                       // 9589
var ReactRootIndex = _dereq_("./ReactRootIndex");                                                                      // 9590
                                                                                                                       // 9591
var invariant = _dereq_("./invariant");                                                                                // 9592
                                                                                                                       // 9593
var SEPARATOR = '.';                                                                                                   // 9594
var SEPARATOR_LENGTH = SEPARATOR.length;                                                                               // 9595
                                                                                                                       // 9596
/**                                                                                                                    // 9597
 * Maximum depth of traversals before we consider the possibility of a bad ID.                                         // 9598
 */                                                                                                                    // 9599
var MAX_TREE_DEPTH = 100;                                                                                              // 9600
                                                                                                                       // 9601
/**                                                                                                                    // 9602
 * Creates a DOM ID prefix to use when mounting React components.                                                      // 9603
 *                                                                                                                     // 9604
 * @param {number} index A unique integer                                                                              // 9605
 * @return {string} React root ID.                                                                                     // 9606
 * @internal                                                                                                           // 9607
 */                                                                                                                    // 9608
function getReactRootIDString(index) {                                                                                 // 9609
  return SEPARATOR + index.toString(36);                                                                               // 9610
}                                                                                                                      // 9611
                                                                                                                       // 9612
/**                                                                                                                    // 9613
 * Checks if a character in the supplied ID is a separator or the end.                                                 // 9614
 *                                                                                                                     // 9615
 * @param {string} id A React DOM ID.                                                                                  // 9616
 * @param {number} index Index of the character to check.                                                              // 9617
 * @return {boolean} True if the character is a separator or end of the ID.                                            // 9618
 * @private                                                                                                            // 9619
 */                                                                                                                    // 9620
function isBoundary(id, index) {                                                                                       // 9621
  return id.charAt(index) === SEPARATOR || index === id.length;                                                        // 9622
}                                                                                                                      // 9623
                                                                                                                       // 9624
/**                                                                                                                    // 9625
 * Checks if the supplied string is a valid React DOM ID.                                                              // 9626
 *                                                                                                                     // 9627
 * @param {string} id A React DOM ID, maybe.                                                                           // 9628
 * @return {boolean} True if the string is a valid React DOM ID.                                                       // 9629
 * @private                                                                                                            // 9630
 */                                                                                                                    // 9631
function isValidID(id) {                                                                                               // 9632
  return id === '' || (                                                                                                // 9633
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR                                               // 9634
  );                                                                                                                   // 9635
}                                                                                                                      // 9636
                                                                                                                       // 9637
/**                                                                                                                    // 9638
 * Checks if the first ID is an ancestor of or equal to the second ID.                                                 // 9639
 *                                                                                                                     // 9640
 * @param {string} ancestorID                                                                                          // 9641
 * @param {string} descendantID                                                                                        // 9642
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.                                            // 9643
 * @internal                                                                                                           // 9644
 */                                                                                                                    // 9645
function isAncestorIDOf(ancestorID, descendantID) {                                                                    // 9646
  return (                                                                                                             // 9647
    descendantID.indexOf(ancestorID) === 0 &&                                                                          // 9648
    isBoundary(descendantID, ancestorID.length)                                                                        // 9649
  );                                                                                                                   // 9650
}                                                                                                                      // 9651
                                                                                                                       // 9652
/**                                                                                                                    // 9653
 * Gets the parent ID of the supplied React DOM ID, `id`.                                                              // 9654
 *                                                                                                                     // 9655
 * @param {string} id ID of a component.                                                                               // 9656
 * @return {string} ID of the parent, or an empty string.                                                              // 9657
 * @private                                                                                                            // 9658
 */                                                                                                                    // 9659
function getParentID(id) {                                                                                             // 9660
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';                                                            // 9661
}                                                                                                                      // 9662
                                                                                                                       // 9663
/**                                                                                                                    // 9664
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the                                         // 9665
 * supplied `destinationID`. If they are equal, the ID is returned.                                                    // 9666
 *                                                                                                                     // 9667
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.                                               // 9668
 * @param {string} destinationID ID of the destination node.                                                           // 9669
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.                                          // 9670
 * @private                                                                                                            // 9671
 */                                                                                                                    // 9672
function getNextDescendantID(ancestorID, destinationID) {                                                              // 9673
  ("production" !== "development" ? invariant(                                                                         // 9674
    isValidID(ancestorID) && isValidID(destinationID),                                                                 // 9675
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',                                                  // 9676
    ancestorID,                                                                                                        // 9677
    destinationID                                                                                                      // 9678
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));                                                   // 9679
  ("production" !== "development" ? invariant(                                                                         // 9680
    isAncestorIDOf(ancestorID, destinationID),                                                                         // 9681
    'getNextDescendantID(...): React has made an invalid assumption about ' +                                          // 9682
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',                                                     // 9683
    ancestorID,                                                                                                        // 9684
    destinationID                                                                                                      // 9685
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));                                                           // 9686
  if (ancestorID === destinationID) {                                                                                  // 9687
    return ancestorID;                                                                                                 // 9688
  }                                                                                                                    // 9689
  // Skip over the ancestor and the immediate separator. Traverse until we hit                                         // 9690
  // another separator or we reach the end of `destinationID`.                                                         // 9691
  var start = ancestorID.length + SEPARATOR_LENGTH;                                                                    // 9692
  for (var i = start; i < destinationID.length; i++) {                                                                 // 9693
    if (isBoundary(destinationID, i)) {                                                                                // 9694
      break;                                                                                                           // 9695
    }                                                                                                                  // 9696
  }                                                                                                                    // 9697
  return destinationID.substr(0, i);                                                                                   // 9698
}                                                                                                                      // 9699
                                                                                                                       // 9700
/**                                                                                                                    // 9701
 * Gets the nearest common ancestor ID of two IDs.                                                                     // 9702
 *                                                                                                                     // 9703
 * Using this ID scheme, the nearest common ancestor ID is the longest common                                          // 9704
 * prefix of the two IDs that immediately preceded a "marker" in both strings.                                         // 9705
 *                                                                                                                     // 9706
 * @param {string} oneID                                                                                               // 9707
 * @param {string} twoID                                                                                               // 9708
 * @return {string} Nearest common ancestor ID, or the empty string if none.                                           // 9709
 * @private                                                                                                            // 9710
 */                                                                                                                    // 9711
function getFirstCommonAncestorID(oneID, twoID) {                                                                      // 9712
  var minLength = Math.min(oneID.length, twoID.length);                                                                // 9713
  if (minLength === 0) {                                                                                               // 9714
    return '';                                                                                                         // 9715
  }                                                                                                                    // 9716
  var lastCommonMarkerIndex = 0;                                                                                       // 9717
  // Use `<=` to traverse until the "EOL" of the shorter string.                                                       // 9718
  for (var i = 0; i <= minLength; i++) {                                                                               // 9719
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {                                                                // 9720
      lastCommonMarkerIndex = i;                                                                                       // 9721
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {                                                                  // 9722
      break;                                                                                                           // 9723
    }                                                                                                                  // 9724
  }                                                                                                                    // 9725
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);                                                        // 9726
  ("production" !== "development" ? invariant(                                                                         // 9727
    isValidID(longestCommonID),                                                                                        // 9728
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',                                             // 9729
    oneID,                                                                                                             // 9730
    twoID,                                                                                                             // 9731
    longestCommonID                                                                                                    // 9732
  ) : invariant(isValidID(longestCommonID)));                                                                          // 9733
  return longestCommonID;                                                                                              // 9734
}                                                                                                                      // 9735
                                                                                                                       // 9736
/**                                                                                                                    // 9737
 * Traverses the parent path between two IDs (either up or down). The IDs must                                         // 9738
 * not be the same, and there must exist a parent path between them. If the                                            // 9739
 * callback returns `false`, traversal is stopped.                                                                     // 9740
 *                                                                                                                     // 9741
 * @param {?string} start ID at which to start traversal.                                                              // 9742
 * @param {?string} stop ID at which to end traversal.                                                                 // 9743
 * @param {function} cb Callback to invoke each ID with.                                                               // 9744
 * @param {?boolean} skipFirst Whether or not to skip the first node.                                                  // 9745
 * @param {?boolean} skipLast Whether or not to skip the last node.                                                    // 9746
 * @private                                                                                                            // 9747
 */                                                                                                                    // 9748
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {                                               // 9749
  start = start || '';                                                                                                 // 9750
  stop = stop || '';                                                                                                   // 9751
  ("production" !== "development" ? invariant(                                                                         // 9752
    start !== stop,                                                                                                    // 9753
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',                                         // 9754
    start                                                                                                              // 9755
  ) : invariant(start !== stop));                                                                                      // 9756
  var traverseUp = isAncestorIDOf(stop, start);                                                                        // 9757
  ("production" !== "development" ? invariant(                                                                         // 9758
    traverseUp || isAncestorIDOf(start, stop),                                                                         // 9759
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +                                         // 9760
    'not have a parent path.',                                                                                         // 9761
    start,                                                                                                             // 9762
    stop                                                                                                               // 9763
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));                                                           // 9764
  // Traverse from `start` to `stop` one depth at a time.                                                              // 9765
  var depth = 0;                                                                                                       // 9766
  var traverse = traverseUp ? getParentID : getNextDescendantID;                                                       // 9767
  for (var id = start; /* until break */; id = traverse(id, stop)) {                                                   // 9768
    var ret;                                                                                                           // 9769
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {                                                  // 9770
      ret = cb(id, traverseUp, arg);                                                                                   // 9771
    }                                                                                                                  // 9772
    if (ret === false || id === stop) {                                                                                // 9773
      // Only break //after// visiting `stop`.                                                                         // 9774
      break;                                                                                                           // 9775
    }                                                                                                                  // 9776
    ("production" !== "development" ? invariant(                                                                       // 9777
      depth++ < MAX_TREE_DEPTH,                                                                                        // 9778
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +                                            // 9779
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',                                        // 9780
      start, stop                                                                                                      // 9781
    ) : invariant(depth++ < MAX_TREE_DEPTH));                                                                          // 9782
  }                                                                                                                    // 9783
}                                                                                                                      // 9784
                                                                                                                       // 9785
/**                                                                                                                    // 9786
 * Manages the IDs assigned to DOM representations of React components. This                                           // 9787
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in                                            // 9788
 * order to simulate events).                                                                                          // 9789
 *                                                                                                                     // 9790
 * @internal                                                                                                           // 9791
 */                                                                                                                    // 9792
var ReactInstanceHandles = {                                                                                           // 9793
                                                                                                                       // 9794
  /**                                                                                                                  // 9795
   * Constructs a React root ID                                                                                        // 9796
   * @return {string} A React root ID.                                                                                 // 9797
   */                                                                                                                  // 9798
  createReactRootID: function() {                                                                                      // 9799
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());                                                // 9800
  },                                                                                                                   // 9801
                                                                                                                       // 9802
  /**                                                                                                                  // 9803
   * Constructs a React ID by joining a root ID with a name.                                                           // 9804
   *                                                                                                                   // 9805
   * @param {string} rootID Root ID of a parent component.                                                             // 9806
   * @param {string} name A component's name (as flattened children).                                                  // 9807
   * @return {string} A React ID.                                                                                      // 9808
   * @internal                                                                                                         // 9809
   */                                                                                                                  // 9810
  createReactID: function(rootID, name) {                                                                              // 9811
    return rootID + name;                                                                                              // 9812
  },                                                                                                                   // 9813
                                                                                                                       // 9814
  /**                                                                                                                  // 9815
   * Gets the DOM ID of the React component that is the root of the tree that                                          // 9816
   * contains the React component with the supplied DOM ID.                                                            // 9817
   *                                                                                                                   // 9818
   * @param {string} id DOM ID of a React component.                                                                   // 9819
   * @return {?string} DOM ID of the React component that is the root.                                                 // 9820
   * @internal                                                                                                         // 9821
   */                                                                                                                  // 9822
  getReactRootIDFromNodeID: function(id) {                                                                             // 9823
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {                                                           // 9824
      var index = id.indexOf(SEPARATOR, 1);                                                                            // 9825
      return index > -1 ? id.substr(0, index) : id;                                                                    // 9826
    }                                                                                                                  // 9827
    return null;                                                                                                       // 9828
  },                                                                                                                   // 9829
                                                                                                                       // 9830
  /**                                                                                                                  // 9831
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that                                          // 9832
   * should would receive a `mouseEnter` or `mouseLeave` event.                                                        // 9833
   *                                                                                                                   // 9834
   * NOTE: Does not invoke the callback on the nearest common ancestor because                                         // 9835
   * nothing "entered" or "left" that element.                                                                         // 9836
   *                                                                                                                   // 9837
   * @param {string} leaveID ID being left.                                                                            // 9838
   * @param {string} enterID ID being entered.                                                                         // 9839
   * @param {function} cb Callback to invoke on each entered/left ID.                                                  // 9840
   * @param {*} upArg Argument to invoke the callback with on left IDs.                                                // 9841
   * @param {*} downArg Argument to invoke the callback with on entered IDs.                                           // 9842
   * @internal                                                                                                         // 9843
   */                                                                                                                  // 9844
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {                                                 // 9845
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);                                                       // 9846
    if (ancestorID !== leaveID) {                                                                                      // 9847
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);                                                 // 9848
    }                                                                                                                  // 9849
    if (ancestorID !== enterID) {                                                                                      // 9850
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);                                               // 9851
    }                                                                                                                  // 9852
  },                                                                                                                   // 9853
                                                                                                                       // 9854
  /**                                                                                                                  // 9855
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.                                            // 9856
   *                                                                                                                   // 9857
   * NOTE: This traversal happens on IDs without touching the DOM.                                                     // 9858
   *                                                                                                                   // 9859
   * @param {string} targetID ID of the target node.                                                                   // 9860
   * @param {function} cb Callback to invoke.                                                                          // 9861
   * @param {*} arg Argument to invoke the callback with.                                                              // 9862
   * @internal                                                                                                         // 9863
   */                                                                                                                  // 9864
  traverseTwoPhase: function(targetID, cb, arg) {                                                                      // 9865
    if (targetID) {                                                                                                    // 9866
      traverseParentPath('', targetID, cb, arg, true, false);                                                          // 9867
      traverseParentPath(targetID, '', cb, arg, false, true);                                                          // 9868
    }                                                                                                                  // 9869
  },                                                                                                                   // 9870
                                                                                                                       // 9871
  /**                                                                                                                  // 9872
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For                                           // 9873
   * example, passing `.0.$row-0.1` would result in `cb` getting called                                                // 9874
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.                                                                        // 9875
   *                                                                                                                   // 9876
   * NOTE: This traversal happens on IDs without touching the DOM.                                                     // 9877
   *                                                                                                                   // 9878
   * @param {string} targetID ID of the target node.                                                                   // 9879
   * @param {function} cb Callback to invoke.                                                                          // 9880
   * @param {*} arg Argument to invoke the callback with.                                                              // 9881
   * @internal                                                                                                         // 9882
   */                                                                                                                  // 9883
  traverseAncestors: function(targetID, cb, arg) {                                                                     // 9884
    traverseParentPath('', targetID, cb, arg, true, false);                                                            // 9885
  },                                                                                                                   // 9886
                                                                                                                       // 9887
  /**                                                                                                                  // 9888
   * Exposed for unit testing.                                                                                         // 9889
   * @private                                                                                                          // 9890
   */                                                                                                                  // 9891
  _getFirstCommonAncestorID: getFirstCommonAncestorID,                                                                 // 9892
                                                                                                                       // 9893
  /**                                                                                                                  // 9894
   * Exposed for unit testing.                                                                                         // 9895
   * @private                                                                                                          // 9896
   */                                                                                                                  // 9897
  _getNextDescendantID: getNextDescendantID,                                                                           // 9898
                                                                                                                       // 9899
  isAncestorIDOf: isAncestorIDOf,                                                                                      // 9900
                                                                                                                       // 9901
  SEPARATOR: SEPARATOR                                                                                                 // 9902
                                                                                                                       // 9903
};                                                                                                                     // 9904
                                                                                                                       // 9905
module.exports = ReactInstanceHandles;                                                                                 // 9906
                                                                                                                       // 9907
},{"./ReactRootIndex":67,"./invariant":112}],54:[function(_dereq_,module,exports){                                     // 9908
/**                                                                                                                    // 9909
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 9910
 *                                                                                                                     // 9911
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9912
 * you may not use this file except in compliance with the License.                                                    // 9913
 * You may obtain a copy of the License at                                                                             // 9914
 *                                                                                                                     // 9915
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9916
 *                                                                                                                     // 9917
 * Unless required by applicable law or agreed to in writing, software                                                 // 9918
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9919
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9920
 * See the License for the specific language governing permissions and                                                 // 9921
 * limitations under the License.                                                                                      // 9922
 *                                                                                                                     // 9923
 * @providesModule ReactMarkupChecksum                                                                                 // 9924
 */                                                                                                                    // 9925
                                                                                                                       // 9926
"use strict";                                                                                                          // 9927
                                                                                                                       // 9928
var adler32 = _dereq_("./adler32");                                                                                    // 9929
                                                                                                                       // 9930
var ReactMarkupChecksum = {                                                                                            // 9931
  CHECKSUM_ATTR_NAME: 'data-react-checksum',                                                                           // 9932
                                                                                                                       // 9933
  /**                                                                                                                  // 9934
   * @param {string} markup Markup string                                                                              // 9935
   * @return {string} Markup string with checksum attribute attached                                                   // 9936
   */                                                                                                                  // 9937
  addChecksumToMarkup: function(markup) {                                                                              // 9938
    var checksum = adler32(markup);                                                                                    // 9939
    return markup.replace(                                                                                             // 9940
      '>',                                                                                                             // 9941
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'                                            // 9942
    );                                                                                                                 // 9943
  },                                                                                                                   // 9944
                                                                                                                       // 9945
  /**                                                                                                                  // 9946
   * @param {string} markup to use                                                                                     // 9947
   * @param {DOMElement} element root React element                                                                    // 9948
   * @returns {boolean} whether or not the markup is the same                                                          // 9949
   */                                                                                                                  // 9950
  canReuseMarkup: function(markup, element) {                                                                          // 9951
    var existingChecksum = element.getAttribute(                                                                       // 9952
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME                                                                           // 9953
    );                                                                                                                 // 9954
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);                                             // 9955
    var markupChecksum = adler32(markup);                                                                              // 9956
    return markupChecksum === existingChecksum;                                                                        // 9957
  }                                                                                                                    // 9958
};                                                                                                                     // 9959
                                                                                                                       // 9960
module.exports = ReactMarkupChecksum;                                                                                  // 9961
                                                                                                                       // 9962
},{"./adler32":88}],55:[function(_dereq_,module,exports){                                                              // 9963
/**                                                                                                                    // 9964
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 9965
 *                                                                                                                     // 9966
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9967
 * you may not use this file except in compliance with the License.                                                    // 9968
 * You may obtain a copy of the License at                                                                             // 9969
 *                                                                                                                     // 9970
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9971
 *                                                                                                                     // 9972
 * Unless required by applicable law or agreed to in writing, software                                                 // 9973
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9974
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9975
 * See the License for the specific language governing permissions and                                                 // 9976
 * limitations under the License.                                                                                      // 9977
 *                                                                                                                     // 9978
 * @providesModule ReactMount                                                                                          // 9979
 */                                                                                                                    // 9980
                                                                                                                       // 9981
"use strict";                                                                                                          // 9982
                                                                                                                       // 9983
var DOMProperty = _dereq_("./DOMProperty");                                                                            // 9984
var ReactEventEmitter = _dereq_("./ReactEventEmitter");                                                                // 9985
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");                                                          // 9986
var ReactPerf = _dereq_("./ReactPerf");                                                                                // 9987
                                                                                                                       // 9988
var containsNode = _dereq_("./containsNode");                                                                          // 9989
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");                                      // 9990
var instantiateReactComponent = _dereq_("./instantiateReactComponent");                                                // 9991
var invariant = _dereq_("./invariant");                                                                                // 9992
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");                                              // 9993
                                                                                                                       // 9994
var SEPARATOR = ReactInstanceHandles.SEPARATOR;                                                                        // 9995
                                                                                                                       // 9996
var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;                                                                         // 9997
var nodeCache = {};                                                                                                    // 9998
                                                                                                                       // 9999
var ELEMENT_NODE_TYPE = 1;                                                                                             // 10000
var DOC_NODE_TYPE = 9;                                                                                                 // 10001
                                                                                                                       // 10002
/** Mapping from reactRootID to React component instance. */                                                           // 10003
var instancesByReactRootID = {};                                                                                       // 10004
                                                                                                                       // 10005
/** Mapping from reactRootID to `container` nodes. */                                                                  // 10006
var containersByReactRootID = {};                                                                                      // 10007
                                                                                                                       // 10008
if ("production" !== "development") {                                                                                  // 10009
  /** __DEV__-only mapping from reactRootID to root elements. */                                                       // 10010
  var rootElementsByReactRootID = {};                                                                                  // 10011
}                                                                                                                      // 10012
                                                                                                                       // 10013
// Used to store breadth-first search state in findComponentRoot.                                                      // 10014
var findComponentRootReusableArray = [];                                                                               // 10015
                                                                                                                       // 10016
/**                                                                                                                    // 10017
 * @param {DOMElement} container DOM element that may contain a React component.                                       // 10018
 * @return {?string} A "reactRoot" ID, if a React component is rendered.                                               // 10019
 */                                                                                                                    // 10020
function getReactRootID(container) {                                                                                   // 10021
  var rootElement = getReactRootElementInContainer(container);                                                         // 10022
  return rootElement && ReactMount.getID(rootElement);                                                                 // 10023
}                                                                                                                      // 10024
                                                                                                                       // 10025
/**                                                                                                                    // 10026
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form                                              // 10027
 * element can return its control whose name or ID equals ATTR_NAME. All                                               // 10028
 * DOM nodes support `getAttributeNode` but this can also get called on                                                // 10029
 * other objects so just return '' if we're given something other than a                                               // 10030
 * DOM node (such as window).                                                                                          // 10031
 *                                                                                                                     // 10032
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.                                               // 10033
 * @return {string} ID of the supplied `domNode`.                                                                      // 10034
 */                                                                                                                    // 10035
function getID(node) {                                                                                                 // 10036
  var id = internalGetID(node);                                                                                        // 10037
  if (id) {                                                                                                            // 10038
    if (nodeCache.hasOwnProperty(id)) {                                                                                // 10039
      var cached = nodeCache[id];                                                                                      // 10040
      if (cached !== node) {                                                                                           // 10041
        ("production" !== "development" ? invariant(                                                                   // 10042
          !isValid(cached, id),                                                                                        // 10043
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',                                            // 10044
          ATTR_NAME, id                                                                                                // 10045
        ) : invariant(!isValid(cached, id)));                                                                          // 10046
                                                                                                                       // 10047
        nodeCache[id] = node;                                                                                          // 10048
      }                                                                                                                // 10049
    } else {                                                                                                           // 10050
      nodeCache[id] = node;                                                                                            // 10051
    }                                                                                                                  // 10052
  }                                                                                                                    // 10053
                                                                                                                       // 10054
  return id;                                                                                                           // 10055
}                                                                                                                      // 10056
                                                                                                                       // 10057
function internalGetID(node) {                                                                                         // 10058
  // If node is something like a window, document, or text node, none of                                               // 10059
  // which support attributes or a .getAttribute method, gracefully return                                             // 10060
  // the empty string, as if the attribute were missing.                                                               // 10061
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';                                              // 10062
}                                                                                                                      // 10063
                                                                                                                       // 10064
/**                                                                                                                    // 10065
 * Sets the React-specific ID of the given node.                                                                       // 10066
 *                                                                                                                     // 10067
 * @param {DOMElement} node The DOM node whose ID will be set.                                                         // 10068
 * @param {string} id The value of the ID attribute.                                                                   // 10069
 */                                                                                                                    // 10070
function setID(node, id) {                                                                                             // 10071
  var oldID = internalGetID(node);                                                                                     // 10072
  if (oldID !== id) {                                                                                                  // 10073
    delete nodeCache[oldID];                                                                                           // 10074
  }                                                                                                                    // 10075
  node.setAttribute(ATTR_NAME, id);                                                                                    // 10076
  nodeCache[id] = node;                                                                                                // 10077
}                                                                                                                      // 10078
                                                                                                                       // 10079
/**                                                                                                                    // 10080
 * Finds the node with the supplied React-generated DOM ID.                                                            // 10081
 *                                                                                                                     // 10082
 * @param {string} id A React-generated DOM ID.                                                                        // 10083
 * @return {DOMElement} DOM node with the suppled `id`.                                                                // 10084
 * @internal                                                                                                           // 10085
 */                                                                                                                    // 10086
function getNode(id) {                                                                                                 // 10087
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {                                                  // 10088
    nodeCache[id] = ReactMount.findReactNodeByID(id);                                                                  // 10089
  }                                                                                                                    // 10090
  return nodeCache[id];                                                                                                // 10091
}                                                                                                                      // 10092
                                                                                                                       // 10093
/**                                                                                                                    // 10094
 * A node is "valid" if it is contained by a currently mounted container.                                              // 10095
 *                                                                                                                     // 10096
 * This means that the node does not have to be contained by a document in                                             // 10097
 * order to be considered valid.                                                                                       // 10098
 *                                                                                                                     // 10099
 * @param {?DOMElement} node The candidate DOM node.                                                                   // 10100
 * @param {string} id The expected ID of the node.                                                                     // 10101
 * @return {boolean} Whether the node is contained by a mounted container.                                             // 10102
 */                                                                                                                    // 10103
function isValid(node, id) {                                                                                           // 10104
  if (node) {                                                                                                          // 10105
    ("production" !== "development" ? invariant(                                                                       // 10106
      internalGetID(node) === id,                                                                                      // 10107
      'ReactMount: Unexpected modification of `%s`',                                                                   // 10108
      ATTR_NAME                                                                                                        // 10109
    ) : invariant(internalGetID(node) === id));                                                                        // 10110
                                                                                                                       // 10111
    var container = ReactMount.findReactContainerForID(id);                                                            // 10112
    if (container && containsNode(container, node)) {                                                                  // 10113
      return true;                                                                                                     // 10114
    }                                                                                                                  // 10115
  }                                                                                                                    // 10116
                                                                                                                       // 10117
  return false;                                                                                                        // 10118
}                                                                                                                      // 10119
                                                                                                                       // 10120
/**                                                                                                                    // 10121
 * Causes the cache to forget about one React-specific ID.                                                             // 10122
 *                                                                                                                     // 10123
 * @param {string} id The ID to forget.                                                                                // 10124
 */                                                                                                                    // 10125
function purgeID(id) {                                                                                                 // 10126
  delete nodeCache[id];                                                                                                // 10127
}                                                                                                                      // 10128
                                                                                                                       // 10129
var deepestNodeSoFar = null;                                                                                           // 10130
function findDeepestCachedAncestorImpl(ancestorID) {                                                                   // 10131
  var ancestor = nodeCache[ancestorID];                                                                                // 10132
  if (ancestor && isValid(ancestor, ancestorID)) {                                                                     // 10133
    deepestNodeSoFar = ancestor;                                                                                       // 10134
  } else {                                                                                                             // 10135
    // This node isn't populated in the cache, so presumably none of its                                               // 10136
    // descendants are. Break out of the loop.                                                                         // 10137
    return false;                                                                                                      // 10138
  }                                                                                                                    // 10139
}                                                                                                                      // 10140
                                                                                                                       // 10141
/**                                                                                                                    // 10142
 * Return the deepest cached node whose ID is a prefix of `targetID`.                                                  // 10143
 */                                                                                                                    // 10144
function findDeepestCachedAncestor(targetID) {                                                                         // 10145
  deepestNodeSoFar = null;                                                                                             // 10146
  ReactInstanceHandles.traverseAncestors(                                                                              // 10147
    targetID,                                                                                                          // 10148
    findDeepestCachedAncestorImpl                                                                                      // 10149
  );                                                                                                                   // 10150
                                                                                                                       // 10151
  var foundNode = deepestNodeSoFar;                                                                                    // 10152
  deepestNodeSoFar = null;                                                                                             // 10153
  return foundNode;                                                                                                    // 10154
}                                                                                                                      // 10155
                                                                                                                       // 10156
/**                                                                                                                    // 10157
 * Mounting is the process of initializing a React component by creatings its                                          // 10158
 * representative DOM elements and inserting them into a supplied `container`.                                         // 10159
 * Any prior content inside `container` is destroyed in the process.                                                   // 10160
 *                                                                                                                     // 10161
 *   ReactMount.renderComponent(                                                                                       // 10162
 *     component,                                                                                                      // 10163
 *     document.getElementById('container')                                                                            // 10164
 *   );                                                                                                                // 10165
 *                                                                                                                     // 10166
 *   <div id="container">                   <-- Supplied `container`.                                                  // 10167
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React                                            // 10168
 *       // ...                                 component.                                                             // 10169
 *     </div>                                                                                                          // 10170
 *   </div>                                                                                                            // 10171
 *                                                                                                                     // 10172
 * Inside of `container`, the first element rendered is the "reactRoot".                                               // 10173
 */                                                                                                                    // 10174
var ReactMount = {                                                                                                     // 10175
  /** Time spent generating markup. */                                                                                 // 10176
  totalInstantiationTime: 0,                                                                                           // 10177
                                                                                                                       // 10178
  /** Time spent inserting markup into the DOM. */                                                                     // 10179
  totalInjectionTime: 0,                                                                                               // 10180
                                                                                                                       // 10181
  /** Whether support for touch events should be initialized. */                                                       // 10182
  useTouchEvents: false,                                                                                               // 10183
                                                                                                                       // 10184
  /** Exposed for debugging purposes **/                                                                               // 10185
  _instancesByReactRootID: instancesByReactRootID,                                                                     // 10186
                                                                                                                       // 10187
  /**                                                                                                                  // 10188
   * This is a hook provided to support rendering React components while                                               // 10189
   * ensuring that the apparent scroll position of its `container` does not                                            // 10190
   * change.                                                                                                           // 10191
   *                                                                                                                   // 10192
   * @param {DOMElement} container The `container` being rendered into.                                                // 10193
   * @param {function} renderCallback This must be called once to do the render.                                       // 10194
   */                                                                                                                  // 10195
  scrollMonitor: function(container, renderCallback) {                                                                 // 10196
    renderCallback();                                                                                                  // 10197
  },                                                                                                                   // 10198
                                                                                                                       // 10199
  /**                                                                                                                  // 10200
   * Take a component that's already mounted into the DOM and replace its props                                        // 10201
   * @param {ReactComponent} prevComponent component instance already in the DOM                                       // 10202
   * @param {ReactComponent} nextComponent component instance to render                                                // 10203
   * @param {DOMElement} container container to render into                                                            // 10204
   * @param {?function} callback function triggered on completion                                                      // 10205
   */                                                                                                                  // 10206
  _updateRootComponent: function(                                                                                      // 10207
      prevComponent,                                                                                                   // 10208
      nextComponent,                                                                                                   // 10209
      container,                                                                                                       // 10210
      callback) {                                                                                                      // 10211
    var nextProps = nextComponent.props;                                                                               // 10212
    ReactMount.scrollMonitor(container, function() {                                                                   // 10213
      prevComponent.replaceProps(nextProps, callback);                                                                 // 10214
    });                                                                                                                // 10215
                                                                                                                       // 10216
    if ("production" !== "development") {                                                                              // 10217
      // Record the root element in case it later gets transplanted.                                                   // 10218
      rootElementsByReactRootID[getReactRootID(container)] =                                                           // 10219
        getReactRootElementInContainer(container);                                                                     // 10220
    }                                                                                                                  // 10221
                                                                                                                       // 10222
    return prevComponent;                                                                                              // 10223
  },                                                                                                                   // 10224
                                                                                                                       // 10225
  /**                                                                                                                  // 10226
   * Register a component into the instance map and starts scroll value                                                // 10227
   * monitoring                                                                                                        // 10228
   * @param {ReactComponent} nextComponent component instance to render                                                // 10229
   * @param {DOMElement} container container to render into                                                            // 10230
   * @return {string} reactRoot ID prefix                                                                              // 10231
   */                                                                                                                  // 10232
  _registerComponent: function(nextComponent, container) {                                                             // 10233
    ("production" !== "development" ? invariant(                                                                       // 10234
      container && (                                                                                                   // 10235
        container.nodeType === ELEMENT_NODE_TYPE ||                                                                    // 10236
        container.nodeType === DOC_NODE_TYPE                                                                           // 10237
      ),                                                                                                               // 10238
      '_registerComponent(...): Target container is not a DOM element.'                                                // 10239
    ) : invariant(container && (                                                                                       // 10240
      container.nodeType === ELEMENT_NODE_TYPE ||                                                                      // 10241
      container.nodeType === DOC_NODE_TYPE                                                                             // 10242
    )));                                                                                                               // 10243
                                                                                                                       // 10244
    ReactEventEmitter.ensureScrollValueMonitoring();                                                                   // 10245
                                                                                                                       // 10246
    var reactRootID = ReactMount.registerContainer(container);                                                         // 10247
    instancesByReactRootID[reactRootID] = nextComponent;                                                               // 10248
    return reactRootID;                                                                                                // 10249
  },                                                                                                                   // 10250
                                                                                                                       // 10251
  /**                                                                                                                  // 10252
   * Render a new component into the DOM.                                                                              // 10253
   * @param {ReactComponent} nextComponent component instance to render                                                // 10254
   * @param {DOMElement} container container to render into                                                            // 10255
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion                                         // 10256
   * @return {ReactComponent} nextComponent                                                                            // 10257
   */                                                                                                                  // 10258
  _renderNewRootComponent: ReactPerf.measure(                                                                          // 10259
    'ReactMount',                                                                                                      // 10260
    '_renderNewRootComponent',                                                                                         // 10261
    function(                                                                                                          // 10262
        nextComponent,                                                                                                 // 10263
        container,                                                                                                     // 10264
        shouldReuseMarkup) {                                                                                           // 10265
                                                                                                                       // 10266
      var componentInstance = instantiateReactComponent(nextComponent);                                                // 10267
      var reactRootID = ReactMount._registerComponent(                                                                 // 10268
        componentInstance,                                                                                             // 10269
        container                                                                                                      // 10270
      );                                                                                                               // 10271
      componentInstance.mountComponentIntoNode(                                                                        // 10272
        reactRootID,                                                                                                   // 10273
        container,                                                                                                     // 10274
        shouldReuseMarkup                                                                                              // 10275
      );                                                                                                               // 10276
                                                                                                                       // 10277
      if ("production" !== "development") {                                                                            // 10278
        // Record the root element in case it later gets transplanted.                                                 // 10279
        rootElementsByReactRootID[reactRootID] =                                                                       // 10280
          getReactRootElementInContainer(container);                                                                   // 10281
      }                                                                                                                // 10282
                                                                                                                       // 10283
      return componentInstance;                                                                                        // 10284
    }                                                                                                                  // 10285
  ),                                                                                                                   // 10286
                                                                                                                       // 10287
  /**                                                                                                                  // 10288
   * Renders a React component into the DOM in the supplied `container`.                                               // 10289
   *                                                                                                                   // 10290
   * If the React component was previously rendered into `container`, this will                                        // 10291
   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 10292
   * latest React component.                                                                                           // 10293
   *                                                                                                                   // 10294
   * @param {ReactComponent} nextComponent Component instance to render.                                               // 10295
   * @param {DOMElement} container DOM element to render into.                                                         // 10296
   * @param {?function} callback function triggered on completion                                                      // 10297
   * @return {ReactComponent} Component instance rendered in `container`.                                              // 10298
   */                                                                                                                  // 10299
  renderComponent: function(nextComponent, container, callback) {                                                      // 10300
    var prevComponent = instancesByReactRootID[getReactRootID(container)];                                             // 10301
                                                                                                                       // 10302
    if (prevComponent) {                                                                                               // 10303
      if (shouldUpdateReactComponent(prevComponent, nextComponent)) {                                                  // 10304
        return ReactMount._updateRootComponent(                                                                        // 10305
          prevComponent,                                                                                               // 10306
          nextComponent,                                                                                               // 10307
          container,                                                                                                   // 10308
          callback                                                                                                     // 10309
        );                                                                                                             // 10310
      } else {                                                                                                         // 10311
        ReactMount.unmountComponentAtNode(container);                                                                  // 10312
      }                                                                                                                // 10313
    }                                                                                                                  // 10314
                                                                                                                       // 10315
    var reactRootElement = getReactRootElementInContainer(container);                                                  // 10316
    var containerHasReactMarkup =                                                                                      // 10317
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);                                              // 10318
                                                                                                                       // 10319
    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;                                                 // 10320
                                                                                                                       // 10321
    var component = ReactMount._renderNewRootComponent(                                                                // 10322
      nextComponent,                                                                                                   // 10323
      container,                                                                                                       // 10324
      shouldReuseMarkup                                                                                                // 10325
    );                                                                                                                 // 10326
    callback && callback.call(component);                                                                              // 10327
    return component;                                                                                                  // 10328
  },                                                                                                                   // 10329
                                                                                                                       // 10330
  /**                                                                                                                  // 10331
   * Constructs a component instance of `constructor` with `initialProps` and                                          // 10332
   * renders it into the supplied `container`.                                                                         // 10333
   *                                                                                                                   // 10334
   * @param {function} constructor React component constructor.                                                        // 10335
   * @param {?object} props Initial props of the component instance.                                                   // 10336
   * @param {DOMElement} container DOM element to render into.                                                         // 10337
   * @return {ReactComponent} Component instance rendered in `container`.                                              // 10338
   */                                                                                                                  // 10339
  constructAndRenderComponent: function(constructor, props, container) {                                               // 10340
    return ReactMount.renderComponent(constructor(props), container);                                                  // 10341
  },                                                                                                                   // 10342
                                                                                                                       // 10343
  /**                                                                                                                  // 10344
   * Constructs a component instance of `constructor` with `initialProps` and                                          // 10345
   * renders it into a container node identified by supplied `id`.                                                     // 10346
   *                                                                                                                   // 10347
   * @param {function} componentConstructor React component constructor                                                // 10348
   * @param {?object} props Initial props of the component instance.                                                   // 10349
   * @param {string} id ID of the DOM element to render into.                                                          // 10350
   * @return {ReactComponent} Component instance rendered in the container node.                                       // 10351
   */                                                                                                                  // 10352
  constructAndRenderComponentByID: function(constructor, props, id) {                                                  // 10353
    var domNode = document.getElementById(id);                                                                         // 10354
    ("production" !== "development" ? invariant(                                                                       // 10355
      domNode,                                                                                                         // 10356
      'Tried to get element with id of "%s" but it is not present on the page.',                                       // 10357
      id                                                                                                               // 10358
    ) : invariant(domNode));                                                                                           // 10359
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);                                        // 10360
  },                                                                                                                   // 10361
                                                                                                                       // 10362
  /**                                                                                                                  // 10363
   * Registers a container node into which React components will be rendered.                                          // 10364
   * This also creates the "reactRoot" ID that will be assigned to the element                                         // 10365
   * rendered within.                                                                                                  // 10366
   *                                                                                                                   // 10367
   * @param {DOMElement} container DOM element to register as a container.                                             // 10368
   * @return {string} The "reactRoot" ID of elements rendered within.                                                  // 10369
   */                                                                                                                  // 10370
  registerContainer: function(container) {                                                                             // 10371
    var reactRootID = getReactRootID(container);                                                                       // 10372
    if (reactRootID) {                                                                                                 // 10373
      // If one exists, make sure it is a valid "reactRoot" ID.                                                        // 10374
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);                                        // 10375
    }                                                                                                                  // 10376
    if (!reactRootID) {                                                                                                // 10377
      // No valid "reactRoot" ID found, create one.                                                                    // 10378
      reactRootID = ReactInstanceHandles.createReactRootID();                                                          // 10379
    }                                                                                                                  // 10380
    containersByReactRootID[reactRootID] = container;                                                                  // 10381
    return reactRootID;                                                                                                // 10382
  },                                                                                                                   // 10383
                                                                                                                       // 10384
  /**                                                                                                                  // 10385
   * Unmounts and destroys the React component rendered in the `container`.                                            // 10386
   *                                                                                                                   // 10387
   * @param {DOMElement} container DOM element containing a React component.                                           // 10388
   * @return {boolean} True if a component was found in and unmounted from                                             // 10389
   *                   `container`                                                                                     // 10390
   */                                                                                                                  // 10391
  unmountComponentAtNode: function(container) {                                                                        // 10392
    var reactRootID = getReactRootID(container);                                                                       // 10393
    var component = instancesByReactRootID[reactRootID];                                                               // 10394
    if (!component) {                                                                                                  // 10395
      return false;                                                                                                    // 10396
    }                                                                                                                  // 10397
    ReactMount.unmountComponentFromNode(component, container);                                                         // 10398
    delete instancesByReactRootID[reactRootID];                                                                        // 10399
    delete containersByReactRootID[reactRootID];                                                                       // 10400
    if ("production" !== "development") {                                                                              // 10401
      delete rootElementsByReactRootID[reactRootID];                                                                   // 10402
    }                                                                                                                  // 10403
    return true;                                                                                                       // 10404
  },                                                                                                                   // 10405
                                                                                                                       // 10406
  /**                                                                                                                  // 10407
   * Unmounts a component and removes it from the DOM.                                                                 // 10408
   *                                                                                                                   // 10409
   * @param {ReactComponent} instance React component instance.                                                        // 10410
   * @param {DOMElement} container DOM element to unmount from.                                                        // 10411
   * @final                                                                                                            // 10412
   * @internal                                                                                                         // 10413
   * @see {ReactMount.unmountComponentAtNode}                                                                          // 10414
   */                                                                                                                  // 10415
  unmountComponentFromNode: function(instance, container) {                                                            // 10416
    instance.unmountComponent();                                                                                       // 10417
                                                                                                                       // 10418
    if (container.nodeType === DOC_NODE_TYPE) {                                                                        // 10419
      container = container.documentElement;                                                                           // 10420
    }                                                                                                                  // 10421
                                                                                                                       // 10422
    // http://jsperf.com/emptying-a-node                                                                               // 10423
    while (container.lastChild) {                                                                                      // 10424
      container.removeChild(container.lastChild);                                                                      // 10425
    }                                                                                                                  // 10426
  },                                                                                                                   // 10427
                                                                                                                       // 10428
  /**                                                                                                                  // 10429
   * Finds the container DOM element that contains React component to which the                                        // 10430
   * supplied DOM `id` belongs.                                                                                        // 10431
   *                                                                                                                   // 10432
   * @param {string} id The ID of an element rendered by a React component.                                            // 10433
   * @return {?DOMElement} DOM element that contains the `id`.                                                         // 10434
   */                                                                                                                  // 10435
  findReactContainerForID: function(id) {                                                                              // 10436
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);                                               // 10437
    var container = containersByReactRootID[reactRootID];                                                              // 10438
                                                                                                                       // 10439
    if ("production" !== "development") {                                                                              // 10440
      var rootElement = rootElementsByReactRootID[reactRootID];                                                        // 10441
      if (rootElement && rootElement.parentNode !== container) {                                                       // 10442
        ("production" !== "development" ? invariant(                                                                   // 10443
          // Call internalGetID here because getID calls isValid which calls                                           // 10444
          // findReactContainerForID (this function).                                                                  // 10445
          internalGetID(rootElement) === reactRootID,                                                                  // 10446
          'ReactMount: Root element ID differed from reactRootID.'                                                     // 10447
        ) : invariant(// Call internalGetID here because getID calls isValid which calls                               // 10448
        // findReactContainerForID (this function).                                                                    // 10449
        internalGetID(rootElement) === reactRootID));                                                                  // 10450
                                                                                                                       // 10451
        var containerChild = container.firstChild;                                                                     // 10452
        if (containerChild &&                                                                                          // 10453
            reactRootID === internalGetID(containerChild)) {                                                           // 10454
          // If the container has a new child with the same ID as the old                                              // 10455
          // root element, then rootElementsByReactRootID[reactRootID] is                                              // 10456
          // just stale and needs to be updated. The case that deserves a                                              // 10457
          // warning is when the container is empty.                                                                   // 10458
          rootElementsByReactRootID[reactRootID] = containerChild;                                                     // 10459
        } else {                                                                                                       // 10460
          console.warn(                                                                                                // 10461
            'ReactMount: Root element has been removed from its original ' +                                           // 10462
            'container. New container:', rootElement.parentNode                                                        // 10463
          );                                                                                                           // 10464
        }                                                                                                              // 10465
      }                                                                                                                // 10466
    }                                                                                                                  // 10467
                                                                                                                       // 10468
    return container;                                                                                                  // 10469
  },                                                                                                                   // 10470
                                                                                                                       // 10471
  /**                                                                                                                  // 10472
   * Finds an element rendered by React with the supplied ID.                                                          // 10473
   *                                                                                                                   // 10474
   * @param {string} id ID of a DOM node in the React component.                                                       // 10475
   * @return {DOMElement} Root DOM node of the React component.                                                        // 10476
   */                                                                                                                  // 10477
  findReactNodeByID: function(id) {                                                                                    // 10478
    var reactRoot = ReactMount.findReactContainerForID(id);                                                            // 10479
    return ReactMount.findComponentRoot(reactRoot, id);                                                                // 10480
  },                                                                                                                   // 10481
                                                                                                                       // 10482
  /**                                                                                                                  // 10483
   * True if the supplied `node` is rendered by React.                                                                 // 10484
   *                                                                                                                   // 10485
   * @param {*} node DOM Element to check.                                                                             // 10486
   * @return {boolean} True if the DOM Element appears to be rendered by React.                                        // 10487
   * @internal                                                                                                         // 10488
   */                                                                                                                  // 10489
  isRenderedByReact: function(node) {                                                                                  // 10490
    if (node.nodeType !== 1) {                                                                                         // 10491
      // Not a DOMElement, therefore not a React component                                                             // 10492
      return false;                                                                                                    // 10493
    }                                                                                                                  // 10494
    var id = ReactMount.getID(node);                                                                                   // 10495
    return id ? id.charAt(0) === SEPARATOR : false;                                                                    // 10496
  },                                                                                                                   // 10497
                                                                                                                       // 10498
  /**                                                                                                                  // 10499
   * Traverses up the ancestors of the supplied node to find a node that is a                                          // 10500
   * DOM representation of a React component.                                                                          // 10501
   *                                                                                                                   // 10502
   * @param {*} node                                                                                                   // 10503
   * @return {?DOMEventTarget}                                                                                         // 10504
   * @internal                                                                                                         // 10505
   */                                                                                                                  // 10506
  getFirstReactDOM: function(node) {                                                                                   // 10507
    var current = node;                                                                                                // 10508
    while (current && current.parentNode !== current) {                                                                // 10509
      if (ReactMount.isRenderedByReact(current)) {                                                                     // 10510
        return current;                                                                                                // 10511
      }                                                                                                                // 10512
      current = current.parentNode;                                                                                    // 10513
    }                                                                                                                  // 10514
    return null;                                                                                                       // 10515
  },                                                                                                                   // 10516
                                                                                                                       // 10517
  /**                                                                                                                  // 10518
   * Finds a node with the supplied `targetID` inside of the supplied                                                  // 10519
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search                                              // 10520
   * quickly.                                                                                                          // 10521
   *                                                                                                                   // 10522
   * @param {DOMEventTarget} ancestorNode Search from this root.                                                       // 10523
   * @pararm {string} targetID ID of the DOM representation of the component.                                          // 10524
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.                                                   // 10525
   * @internal                                                                                                         // 10526
   */                                                                                                                  // 10527
  findComponentRoot: function(ancestorNode, targetID) {                                                                // 10528
    var firstChildren = findComponentRootReusableArray;                                                                // 10529
    var childIndex = 0;                                                                                                // 10530
                                                                                                                       // 10531
    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;                                         // 10532
                                                                                                                       // 10533
    firstChildren[0] = deepestAncestor.firstChild;                                                                     // 10534
    firstChildren.length = 1;                                                                                          // 10535
                                                                                                                       // 10536
    while (childIndex < firstChildren.length) {                                                                        // 10537
      var child = firstChildren[childIndex++];                                                                         // 10538
      var targetChild;                                                                                                 // 10539
                                                                                                                       // 10540
      while (child) {                                                                                                  // 10541
        var childID = ReactMount.getID(child);                                                                         // 10542
        if (childID) {                                                                                                 // 10543
          // Even if we find the node we're looking for, we finish looping                                             // 10544
          // through its siblings to ensure they're cached so that we don't have                                       // 10545
          // to revisit this node again. Otherwise, we make n^2 calls to getID                                         // 10546
          // when visiting the many children of a single node in order.                                                // 10547
                                                                                                                       // 10548
          if (targetID === childID) {                                                                                  // 10549
            targetChild = child;                                                                                       // 10550
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {                                         // 10551
            // If we find a child whose ID is an ancestor of the given ID,                                             // 10552
            // then we can be sure that we only want to search the subtree                                             // 10553
            // rooted at this child, so we can throw out the rest of the                                               // 10554
            // search state.                                                                                           // 10555
            firstChildren.length = childIndex = 0;                                                                     // 10556
            firstChildren.push(child.firstChild);                                                                      // 10557
          }                                                                                                            // 10558
                                                                                                                       // 10559
        } else {                                                                                                       // 10560
          // If this child had no ID, then there's a chance that it was                                                // 10561
          // injected automatically by the browser, as when a `<table>`                                                // 10562
          // element sprouts an extra `<tbody>` child as a side effect of                                              // 10563
          // `.innerHTML` parsing. Optimistically continue down this                                                   // 10564
          // branch, but not before examining the other siblings.                                                      // 10565
          firstChildren.push(child.firstChild);                                                                        // 10566
        }                                                                                                              // 10567
                                                                                                                       // 10568
        child = child.nextSibling;                                                                                     // 10569
      }                                                                                                                // 10570
                                                                                                                       // 10571
      if (targetChild) {                                                                                               // 10572
        // Emptying firstChildren/findComponentRootReusableArray is                                                    // 10573
        // not necessary for correctness, but it helps the GC reclaim                                                  // 10574
        // any nodes that were left at the end of the search.                                                          // 10575
        firstChildren.length = 0;                                                                                      // 10576
                                                                                                                       // 10577
        return targetChild;                                                                                            // 10578
      }                                                                                                                // 10579
    }                                                                                                                  // 10580
                                                                                                                       // 10581
    firstChildren.length = 0;                                                                                          // 10582
                                                                                                                       // 10583
    ("production" !== "development" ? invariant(                                                                       // 10584
      false,                                                                                                           // 10585
      'findComponentRoot(..., %s): Unable to find element. This probably ' +                                           // 10586
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +                                              // 10587
      'usually due to forgetting a <tbody> when using tables or nesting <p> ' +                                        // 10588
      'or <a> tags. Try inspecting the child nodes of the element with React ' +                                       // 10589
      'ID `%s`.',                                                                                                      // 10590
      targetID,                                                                                                        // 10591
      ReactMount.getID(ancestorNode)                                                                                   // 10592
    ) : invariant(false));                                                                                             // 10593
  },                                                                                                                   // 10594
                                                                                                                       // 10595
                                                                                                                       // 10596
  /**                                                                                                                  // 10597
   * React ID utilities.                                                                                               // 10598
   */                                                                                                                  // 10599
                                                                                                                       // 10600
  getReactRootID: getReactRootID,                                                                                      // 10601
                                                                                                                       // 10602
  getID: getID,                                                                                                        // 10603
                                                                                                                       // 10604
  setID: setID,                                                                                                        // 10605
                                                                                                                       // 10606
  getNode: getNode,                                                                                                    // 10607
                                                                                                                       // 10608
  purgeID: purgeID                                                                                                     // 10609
};                                                                                                                     // 10610
                                                                                                                       // 10611
module.exports = ReactMount;                                                                                           // 10612
                                                                                                                       // 10613
},{"./DOMProperty":8,"./ReactEventEmitter":48,"./ReactInstanceHandles":53,"./ReactPerf":60,"./containsNode":89,"./getReactRootElementInContainer":107,"./instantiateReactComponent":111,"./invariant":112,"./shouldUpdateReactComponent":131}],56:[function(_dereq_,module,exports){
/**                                                                                                                    // 10615
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 10616
 *                                                                                                                     // 10617
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10618
 * you may not use this file except in compliance with the License.                                                    // 10619
 * You may obtain a copy of the License at                                                                             // 10620
 *                                                                                                                     // 10621
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10622
 *                                                                                                                     // 10623
 * Unless required by applicable law or agreed to in writing, software                                                 // 10624
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10625
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10626
 * See the License for the specific language governing permissions and                                                 // 10627
 * limitations under the License.                                                                                      // 10628
 *                                                                                                                     // 10629
 * @providesModule ReactMountReady                                                                                     // 10630
 */                                                                                                                    // 10631
                                                                                                                       // 10632
"use strict";                                                                                                          // 10633
                                                                                                                       // 10634
var PooledClass = _dereq_("./PooledClass");                                                                            // 10635
                                                                                                                       // 10636
var mixInto = _dereq_("./mixInto");                                                                                    // 10637
                                                                                                                       // 10638
/**                                                                                                                    // 10639
 * A specialized pseudo-event module to help keep track of components waiting to                                       // 10640
 * be notified when their DOM representations are available for use.                                                   // 10641
 *                                                                                                                     // 10642
 * This implements `PooledClass`, so you should never need to instantiate this.                                        // 10643
 * Instead, use `ReactMountReady.getPooled()`.                                                                         // 10644
 *                                                                                                                     // 10645
 * @param {?array<function>} initialCollection                                                                         // 10646
 * @class ReactMountReady                                                                                              // 10647
 * @implements PooledClass                                                                                             // 10648
 * @internal                                                                                                           // 10649
 */                                                                                                                    // 10650
function ReactMountReady(initialCollection) {                                                                          // 10651
  this._queue = initialCollection || null;                                                                             // 10652
}                                                                                                                      // 10653
                                                                                                                       // 10654
mixInto(ReactMountReady, {                                                                                             // 10655
                                                                                                                       // 10656
  /**                                                                                                                  // 10657
   * Enqueues a callback to be invoked when `notifyAll` is invoked. This is used                                       // 10658
   * to enqueue calls to `componentDidMount` and `componentDidUpdate`.                                                 // 10659
   *                                                                                                                   // 10660
   * @param {ReactComponent} component Component being rendered.                                                       // 10661
   * @param {function(DOMElement)} callback Invoked when `notifyAll` is invoked.                                       // 10662
   * @internal                                                                                                         // 10663
   */                                                                                                                  // 10664
  enqueue: function(component, callback) {                                                                             // 10665
    this._queue = this._queue || [];                                                                                   // 10666
    this._queue.push({component: component, callback: callback});                                                      // 10667
  },                                                                                                                   // 10668
                                                                                                                       // 10669
  /**                                                                                                                  // 10670
   * Invokes all enqueued callbacks and clears the queue. This is invoked after                                        // 10671
   * the DOM representation of a component has been created or updated.                                                // 10672
   *                                                                                                                   // 10673
   * @internal                                                                                                         // 10674
   */                                                                                                                  // 10675
  notifyAll: function() {                                                                                              // 10676
    var queue = this._queue;                                                                                           // 10677
    if (queue) {                                                                                                       // 10678
      this._queue = null;                                                                                              // 10679
      for (var i = 0, l = queue.length; i < l; i++) {                                                                  // 10680
        var component = queue[i].component;                                                                            // 10681
        var callback = queue[i].callback;                                                                              // 10682
        callback.call(component);                                                                                      // 10683
      }                                                                                                                // 10684
      queue.length = 0;                                                                                                // 10685
    }                                                                                                                  // 10686
  },                                                                                                                   // 10687
                                                                                                                       // 10688
  /**                                                                                                                  // 10689
   * Resets the internal queue.                                                                                        // 10690
   *                                                                                                                   // 10691
   * @internal                                                                                                         // 10692
   */                                                                                                                  // 10693
  reset: function() {                                                                                                  // 10694
    this._queue = null;                                                                                                // 10695
  },                                                                                                                   // 10696
                                                                                                                       // 10697
  /**                                                                                                                  // 10698
   * `PooledClass` looks for this.                                                                                     // 10699
   */                                                                                                                  // 10700
  destructor: function() {                                                                                             // 10701
    this.reset();                                                                                                      // 10702
  }                                                                                                                    // 10703
                                                                                                                       // 10704
});                                                                                                                    // 10705
                                                                                                                       // 10706
PooledClass.addPoolingTo(ReactMountReady);                                                                             // 10707
                                                                                                                       // 10708
module.exports = ReactMountReady;                                                                                      // 10709
                                                                                                                       // 10710
},{"./PooledClass":23,"./mixInto":124}],57:[function(_dereq_,module,exports){                                          // 10711
/**                                                                                                                    // 10712
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 10713
 *                                                                                                                     // 10714
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10715
 * you may not use this file except in compliance with the License.                                                    // 10716
 * You may obtain a copy of the License at                                                                             // 10717
 *                                                                                                                     // 10718
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10719
 *                                                                                                                     // 10720
 * Unless required by applicable law or agreed to in writing, software                                                 // 10721
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10722
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10723
 * See the License for the specific language governing permissions and                                                 // 10724
 * limitations under the License.                                                                                      // 10725
 *                                                                                                                     // 10726
 * @providesModule ReactMultiChild                                                                                     // 10727
 * @typechecks static-only                                                                                             // 10728
 */                                                                                                                    // 10729
                                                                                                                       // 10730
"use strict";                                                                                                          // 10731
                                                                                                                       // 10732
var ReactComponent = _dereq_("./ReactComponent");                                                                      // 10733
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");                                              // 10734
                                                                                                                       // 10735
var flattenChildren = _dereq_("./flattenChildren");                                                                    // 10736
var instantiateReactComponent = _dereq_("./instantiateReactComponent");                                                // 10737
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");                                              // 10738
                                                                                                                       // 10739
/**                                                                                                                    // 10740
 * Updating children of a component may trigger recursive updates. The depth is                                        // 10741
 * used to batch recursive updates to render markup more efficiently.                                                  // 10742
 *                                                                                                                     // 10743
 * @type {number}                                                                                                      // 10744
 * @private                                                                                                            // 10745
 */                                                                                                                    // 10746
var updateDepth = 0;                                                                                                   // 10747
                                                                                                                       // 10748
/**                                                                                                                    // 10749
 * Queue of update configuration objects.                                                                              // 10750
 *                                                                                                                     // 10751
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.                                          // 10752
 *                                                                                                                     // 10753
 * @type {array<object>}                                                                                               // 10754
 * @private                                                                                                            // 10755
 */                                                                                                                    // 10756
var updateQueue = [];                                                                                                  // 10757
                                                                                                                       // 10758
/**                                                                                                                    // 10759
 * Queue of markup to be rendered.                                                                                     // 10760
 *                                                                                                                     // 10761
 * @type {array<string>}                                                                                               // 10762
 * @private                                                                                                            // 10763
 */                                                                                                                    // 10764
var markupQueue = [];                                                                                                  // 10765
                                                                                                                       // 10766
/**                                                                                                                    // 10767
 * Enqueues markup to be rendered and inserted at a supplied index.                                                    // 10768
 *                                                                                                                     // 10769
 * @param {string} parentID ID of the parent component.                                                                // 10770
 * @param {string} markup Markup that renders into an element.                                                         // 10771
 * @param {number} toIndex Destination index.                                                                          // 10772
 * @private                                                                                                            // 10773
 */                                                                                                                    // 10774
function enqueueMarkup(parentID, markup, toIndex) {                                                                    // 10775
  // NOTE: Null values reduce hidden classes.                                                                          // 10776
  updateQueue.push({                                                                                                   // 10777
    parentID: parentID,                                                                                                // 10778
    parentNode: null,                                                                                                  // 10779
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,                                                                    // 10780
    markupIndex: markupQueue.push(markup) - 1,                                                                         // 10781
    textContent: null,                                                                                                 // 10782
    fromIndex: null,                                                                                                   // 10783
    toIndex: toIndex                                                                                                   // 10784
  });                                                                                                                  // 10785
}                                                                                                                      // 10786
                                                                                                                       // 10787
/**                                                                                                                    // 10788
 * Enqueues moving an existing element to another index.                                                               // 10789
 *                                                                                                                     // 10790
 * @param {string} parentID ID of the parent component.                                                                // 10791
 * @param {number} fromIndex Source index of the existing element.                                                     // 10792
 * @param {number} toIndex Destination index of the element.                                                           // 10793
 * @private                                                                                                            // 10794
 */                                                                                                                    // 10795
function enqueueMove(parentID, fromIndex, toIndex) {                                                                   // 10796
  // NOTE: Null values reduce hidden classes.                                                                          // 10797
  updateQueue.push({                                                                                                   // 10798
    parentID: parentID,                                                                                                // 10799
    parentNode: null,                                                                                                  // 10800
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,                                                                    // 10801
    markupIndex: null,                                                                                                 // 10802
    textContent: null,                                                                                                 // 10803
    fromIndex: fromIndex,                                                                                              // 10804
    toIndex: toIndex                                                                                                   // 10805
  });                                                                                                                  // 10806
}                                                                                                                      // 10807
                                                                                                                       // 10808
/**                                                                                                                    // 10809
 * Enqueues removing an element at an index.                                                                           // 10810
 *                                                                                                                     // 10811
 * @param {string} parentID ID of the parent component.                                                                // 10812
 * @param {number} fromIndex Index of the element to remove.                                                           // 10813
 * @private                                                                                                            // 10814
 */                                                                                                                    // 10815
function enqueueRemove(parentID, fromIndex) {                                                                          // 10816
  // NOTE: Null values reduce hidden classes.                                                                          // 10817
  updateQueue.push({                                                                                                   // 10818
    parentID: parentID,                                                                                                // 10819
    parentNode: null,                                                                                                  // 10820
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,                                                                      // 10821
    markupIndex: null,                                                                                                 // 10822
    textContent: null,                                                                                                 // 10823
    fromIndex: fromIndex,                                                                                              // 10824
    toIndex: null                                                                                                      // 10825
  });                                                                                                                  // 10826
}                                                                                                                      // 10827
                                                                                                                       // 10828
/**                                                                                                                    // 10829
 * Enqueues setting the text content.                                                                                  // 10830
 *                                                                                                                     // 10831
 * @param {string} parentID ID of the parent component.                                                                // 10832
 * @param {string} textContent Text content to set.                                                                    // 10833
 * @private                                                                                                            // 10834
 */                                                                                                                    // 10835
function enqueueTextContent(parentID, textContent) {                                                                   // 10836
  // NOTE: Null values reduce hidden classes.                                                                          // 10837
  updateQueue.push({                                                                                                   // 10838
    parentID: parentID,                                                                                                // 10839
    parentNode: null,                                                                                                  // 10840
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,                                                                     // 10841
    markupIndex: null,                                                                                                 // 10842
    textContent: textContent,                                                                                          // 10843
    fromIndex: null,                                                                                                   // 10844
    toIndex: null                                                                                                      // 10845
  });                                                                                                                  // 10846
}                                                                                                                      // 10847
                                                                                                                       // 10848
/**                                                                                                                    // 10849
 * Processes any enqueued updates.                                                                                     // 10850
 *                                                                                                                     // 10851
 * @private                                                                                                            // 10852
 */                                                                                                                    // 10853
function processQueue() {                                                                                              // 10854
  if (updateQueue.length) {                                                                                            // 10855
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(                                              // 10856
      updateQueue,                                                                                                     // 10857
      markupQueue                                                                                                      // 10858
    );                                                                                                                 // 10859
    clearQueue();                                                                                                      // 10860
  }                                                                                                                    // 10861
}                                                                                                                      // 10862
                                                                                                                       // 10863
/**                                                                                                                    // 10864
 * Clears any enqueued updates.                                                                                        // 10865
 *                                                                                                                     // 10866
 * @private                                                                                                            // 10867
 */                                                                                                                    // 10868
function clearQueue() {                                                                                                // 10869
  updateQueue.length = 0;                                                                                              // 10870
  markupQueue.length = 0;                                                                                              // 10871
}                                                                                                                      // 10872
                                                                                                                       // 10873
/**                                                                                                                    // 10874
 * ReactMultiChild are capable of reconciling multiple children.                                                       // 10875
 *                                                                                                                     // 10876
 * @class ReactMultiChild                                                                                              // 10877
 * @internal                                                                                                           // 10878
 */                                                                                                                    // 10879
var ReactMultiChild = {                                                                                                // 10880
                                                                                                                       // 10881
  /**                                                                                                                  // 10882
   * Provides common functionality for components that must reconcile multiple                                         // 10883
   * children. This is used by `ReactDOMComponent` to mount, update, and                                               // 10884
   * unmount child components.                                                                                         // 10885
   *                                                                                                                   // 10886
   * @lends {ReactMultiChild.prototype}                                                                                // 10887
   */                                                                                                                  // 10888
  Mixin: {                                                                                                             // 10889
                                                                                                                       // 10890
    /**                                                                                                                // 10891
     * Generates a "mount image" for each of the supplied children. In the case                                        // 10892
     * of `ReactDOMComponent`, a mount image is a string of markup.                                                    // 10893
     *                                                                                                                 // 10894
     * @param {?object} nestedChildren Nested child maps.                                                              // 10895
     * @return {array} An array of mounted representations.                                                            // 10896
     * @internal                                                                                                       // 10897
     */                                                                                                                // 10898
    mountChildren: function(nestedChildren, transaction) {                                                             // 10899
      var children = flattenChildren(nestedChildren);                                                                  // 10900
      var mountImages = [];                                                                                            // 10901
      var index = 0;                                                                                                   // 10902
      this._renderedChildren = children;                                                                               // 10903
      for (var name in children) {                                                                                     // 10904
        var child = children[name];                                                                                    // 10905
        if (children.hasOwnProperty(name)) {                                                                           // 10906
          // The rendered children must be turned into instances as they're                                            // 10907
          // mounted.                                                                                                  // 10908
          var childInstance = instantiateReactComponent(child);                                                        // 10909
          children[name] = childInstance;                                                                              // 10910
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.                                        // 10911
          var rootID = this._rootNodeID + name;                                                                        // 10912
          var mountImage = childInstance.mountComponent(                                                               // 10913
            rootID,                                                                                                    // 10914
            transaction,                                                                                               // 10915
            this._mountDepth + 1                                                                                       // 10916
          );                                                                                                           // 10917
          childInstance._mountIndex = index;                                                                           // 10918
          mountImages.push(mountImage);                                                                                // 10919
          index++;                                                                                                     // 10920
        }                                                                                                              // 10921
      }                                                                                                                // 10922
      return mountImages;                                                                                              // 10923
    },                                                                                                                 // 10924
                                                                                                                       // 10925
    /**                                                                                                                // 10926
     * Replaces any rendered children with a text content string.                                                      // 10927
     *                                                                                                                 // 10928
     * @param {string} nextContent String of content.                                                                  // 10929
     * @internal                                                                                                       // 10930
     */                                                                                                                // 10931
    updateTextContent: function(nextContent) {                                                                         // 10932
      updateDepth++;                                                                                                   // 10933
      var errorThrown = true;                                                                                          // 10934
      try {                                                                                                            // 10935
        var prevChildren = this._renderedChildren;                                                                     // 10936
        // Remove any rendered children.                                                                               // 10937
        for (var name in prevChildren) {                                                                               // 10938
          if (prevChildren.hasOwnProperty(name)) {                                                                     // 10939
            this._unmountChildByName(prevChildren[name], name);                                                        // 10940
          }                                                                                                            // 10941
        }                                                                                                              // 10942
        // Set new text content.                                                                                       // 10943
        this.setTextContent(nextContent);                                                                              // 10944
        errorThrown = false;                                                                                           // 10945
      } finally {                                                                                                      // 10946
        updateDepth--;                                                                                                 // 10947
        if (!updateDepth) {                                                                                            // 10948
          errorThrown ? clearQueue() : processQueue();                                                                 // 10949
        }                                                                                                              // 10950
      }                                                                                                                // 10951
    },                                                                                                                 // 10952
                                                                                                                       // 10953
    /**                                                                                                                // 10954
     * Updates the rendered children with new children.                                                                // 10955
     *                                                                                                                 // 10956
     * @param {?object} nextNestedChildren Nested child maps.                                                          // 10957
     * @param {ReactReconcileTransaction} transaction                                                                  // 10958
     * @internal                                                                                                       // 10959
     */                                                                                                                // 10960
    updateChildren: function(nextNestedChildren, transaction) {                                                        // 10961
      updateDepth++;                                                                                                   // 10962
      var errorThrown = true;                                                                                          // 10963
      try {                                                                                                            // 10964
        this._updateChildren(nextNestedChildren, transaction);                                                         // 10965
        errorThrown = false;                                                                                           // 10966
      } finally {                                                                                                      // 10967
        updateDepth--;                                                                                                 // 10968
        if (!updateDepth) {                                                                                            // 10969
          errorThrown ? clearQueue() : processQueue();                                                                 // 10970
        }                                                                                                              // 10971
      }                                                                                                                // 10972
    },                                                                                                                 // 10973
                                                                                                                       // 10974
    /**                                                                                                                // 10975
     * Improve performance by isolating this hot code path from the try/catch                                          // 10976
     * block in `updateChildren`.                                                                                      // 10977
     *                                                                                                                 // 10978
     * @param {?object} nextNestedChildren Nested child maps.                                                          // 10979
     * @param {ReactReconcileTransaction} transaction                                                                  // 10980
     * @final                                                                                                          // 10981
     * @protected                                                                                                      // 10982
     */                                                                                                                // 10983
    _updateChildren: function(nextNestedChildren, transaction) {                                                       // 10984
      var nextChildren = flattenChildren(nextNestedChildren);                                                          // 10985
      var prevChildren = this._renderedChildren;                                                                       // 10986
      if (!nextChildren && !prevChildren) {                                                                            // 10987
        return;                                                                                                        // 10988
      }                                                                                                                // 10989
      var name;                                                                                                        // 10990
      // `nextIndex` will increment for each child in `nextChildren`, but                                              // 10991
      // `lastIndex` will be the last index visited in `prevChildren`.                                                 // 10992
      var lastIndex = 0;                                                                                               // 10993
      var nextIndex = 0;                                                                                               // 10994
      for (name in nextChildren) {                                                                                     // 10995
        if (!nextChildren.hasOwnProperty(name)) {                                                                      // 10996
          continue;                                                                                                    // 10997
        }                                                                                                              // 10998
        var prevChild = prevChildren && prevChildren[name];                                                            // 10999
        var nextChild = nextChildren[name];                                                                            // 11000
        if (shouldUpdateReactComponent(prevChild, nextChild)) {                                                        // 11001
          this.moveChild(prevChild, nextIndex, lastIndex);                                                             // 11002
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                      // 11003
          prevChild.receiveComponent(nextChild, transaction);                                                          // 11004
          prevChild._mountIndex = nextIndex;                                                                           // 11005
        } else {                                                                                                       // 11006
          if (prevChild) {                                                                                             // 11007
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.                                       // 11008
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                    // 11009
            this._unmountChildByName(prevChild, name);                                                                 // 11010
          }                                                                                                            // 11011
          // The child must be instantiated before it's mounted.                                                       // 11012
          var nextChildInstance = instantiateReactComponent(nextChild);                                                // 11013
          this._mountChildByNameAtIndex(                                                                               // 11014
            nextChildInstance, name, nextIndex, transaction                                                            // 11015
          );                                                                                                           // 11016
        }                                                                                                              // 11017
        nextIndex++;                                                                                                   // 11018
      }                                                                                                                // 11019
      // Remove children that are no longer present.                                                                   // 11020
      for (name in prevChildren) {                                                                                     // 11021
        if (prevChildren.hasOwnProperty(name) &&                                                                       // 11022
            !(nextChildren && nextChildren[name])) {                                                                   // 11023
          this._unmountChildByName(prevChildren[name], name);                                                          // 11024
        }                                                                                                              // 11025
      }                                                                                                                // 11026
    },                                                                                                                 // 11027
                                                                                                                       // 11028
    /**                                                                                                                // 11029
     * Unmounts all rendered children. This should be used to clean up children                                        // 11030
     * when this component is unmounted.                                                                               // 11031
     *                                                                                                                 // 11032
     * @internal                                                                                                       // 11033
     */                                                                                                                // 11034
    unmountChildren: function() {                                                                                      // 11035
      var renderedChildren = this._renderedChildren;                                                                   // 11036
      for (var name in renderedChildren) {                                                                             // 11037
        var renderedChild = renderedChildren[name];                                                                    // 11038
        // TODO: When is this not true?                                                                                // 11039
        if (renderedChild.unmountComponent) {                                                                          // 11040
          renderedChild.unmountComponent();                                                                            // 11041
        }                                                                                                              // 11042
      }                                                                                                                // 11043
      this._renderedChildren = null;                                                                                   // 11044
    },                                                                                                                 // 11045
                                                                                                                       // 11046
    /**                                                                                                                // 11047
     * Moves a child component to the supplied index.                                                                  // 11048
     *                                                                                                                 // 11049
     * @param {ReactComponent} child Component to move.                                                                // 11050
     * @param {number} toIndex Destination index of the element.                                                       // 11051
     * @param {number} lastIndex Last index visited of the siblings of `child`.                                        // 11052
     * @protected                                                                                                      // 11053
     */                                                                                                                // 11054
    moveChild: function(child, toIndex, lastIndex) {                                                                   // 11055
      // If the index of `child` is less than `lastIndex`, then it needs to                                            // 11056
      // be moved. Otherwise, we do not need to move it because a child will be                                        // 11057
      // inserted or moved before `child`.                                                                             // 11058
      if (child._mountIndex < lastIndex) {                                                                             // 11059
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);                                                     // 11060
      }                                                                                                                // 11061
    },                                                                                                                 // 11062
                                                                                                                       // 11063
    /**                                                                                                                // 11064
     * Creates a child component.                                                                                      // 11065
     *                                                                                                                 // 11066
     * @param {ReactComponent} child Component to create.                                                              // 11067
     * @param {string} mountImage Markup to insert.                                                                    // 11068
     * @protected                                                                                                      // 11069
     */                                                                                                                // 11070
    createChild: function(child, mountImage) {                                                                         // 11071
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);                                                  // 11072
    },                                                                                                                 // 11073
                                                                                                                       // 11074
    /**                                                                                                                // 11075
     * Removes a child component.                                                                                      // 11076
     *                                                                                                                 // 11077
     * @param {ReactComponent} child Child to remove.                                                                  // 11078
     * @protected                                                                                                      // 11079
     */                                                                                                                // 11080
    removeChild: function(child) {                                                                                     // 11081
      enqueueRemove(this._rootNodeID, child._mountIndex);                                                              // 11082
    },                                                                                                                 // 11083
                                                                                                                       // 11084
    /**                                                                                                                // 11085
     * Sets this text content string.                                                                                  // 11086
     *                                                                                                                 // 11087
     * @param {string} textContent Text content to set.                                                                // 11088
     * @protected                                                                                                      // 11089
     */                                                                                                                // 11090
    setTextContent: function(textContent) {                                                                            // 11091
      enqueueTextContent(this._rootNodeID, textContent);                                                               // 11092
    },                                                                                                                 // 11093
                                                                                                                       // 11094
    /**                                                                                                                // 11095
     * Mounts a child with the supplied name.                                                                          // 11096
     *                                                                                                                 // 11097
     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 11098
     *                                                                                                                 // 11099
     * @param {ReactComponent} child Component to mount.                                                               // 11100
     * @param {string} name Name of the child.                                                                         // 11101
     * @param {number} index Index at which to insert the child.                                                       // 11102
     * @param {ReactReconcileTransaction} transaction                                                                  // 11103
     * @private                                                                                                        // 11104
     */                                                                                                                // 11105
    _mountChildByNameAtIndex: function(child, name, index, transaction) {                                              // 11106
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.                                            // 11107
      var rootID = this._rootNodeID + name;                                                                            // 11108
      var mountImage = child.mountComponent(                                                                           // 11109
        rootID,                                                                                                        // 11110
        transaction,                                                                                                   // 11111
        this._mountDepth + 1                                                                                           // 11112
      );                                                                                                               // 11113
      child._mountIndex = index;                                                                                       // 11114
      this.createChild(child, mountImage);                                                                             // 11115
      this._renderedChildren = this._renderedChildren || {};                                                           // 11116
      this._renderedChildren[name] = child;                                                                            // 11117
    },                                                                                                                 // 11118
                                                                                                                       // 11119
    /**                                                                                                                // 11120
     * Unmounts a rendered child by name.                                                                              // 11121
     *                                                                                                                 // 11122
     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 11123
     *                                                                                                                 // 11124
     * @param {ReactComponent} child Component to unmount.                                                             // 11125
     * @param {string} name Name of the child in `this._renderedChildren`.                                             // 11126
     * @private                                                                                                        // 11127
     */                                                                                                                // 11128
    _unmountChildByName: function(child, name) {                                                                       // 11129
      // TODO: When is this not true?                                                                                  // 11130
      if (ReactComponent.isValidComponent(child)) {                                                                    // 11131
        this.removeChild(child);                                                                                       // 11132
        child._mountIndex = null;                                                                                      // 11133
        child.unmountComponent();                                                                                      // 11134
        delete this._renderedChildren[name];                                                                           // 11135
      }                                                                                                                // 11136
    }                                                                                                                  // 11137
                                                                                                                       // 11138
  }                                                                                                                    // 11139
                                                                                                                       // 11140
};                                                                                                                     // 11141
                                                                                                                       // 11142
module.exports = ReactMultiChild;                                                                                      // 11143
                                                                                                                       // 11144
},{"./ReactComponent":27,"./ReactMultiChildUpdateTypes":58,"./flattenChildren":99,"./instantiateReactComponent":111,"./shouldUpdateReactComponent":131}],58:[function(_dereq_,module,exports){
/**                                                                                                                    // 11146
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 11147
 *                                                                                                                     // 11148
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11149
 * you may not use this file except in compliance with the License.                                                    // 11150
 * You may obtain a copy of the License at                                                                             // 11151
 *                                                                                                                     // 11152
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11153
 *                                                                                                                     // 11154
 * Unless required by applicable law or agreed to in writing, software                                                 // 11155
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11156
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11157
 * See the License for the specific language governing permissions and                                                 // 11158
 * limitations under the License.                                                                                      // 11159
 *                                                                                                                     // 11160
 * @providesModule ReactMultiChildUpdateTypes                                                                          // 11161
 */                                                                                                                    // 11162
                                                                                                                       // 11163
"use strict";                                                                                                          // 11164
                                                                                                                       // 11165
var keyMirror = _dereq_("./keyMirror");                                                                                // 11166
                                                                                                                       // 11167
/**                                                                                                                    // 11168
 * When a component's children are updated, a series of update configuration                                           // 11169
 * objects are created in order to batch and serialize the required changes.                                           // 11170
 *                                                                                                                     // 11171
 * Enumerates all the possible types of update configurations.                                                         // 11172
 *                                                                                                                     // 11173
 * @internal                                                                                                           // 11174
 */                                                                                                                    // 11175
var ReactMultiChildUpdateTypes = keyMirror({                                                                           // 11176
  INSERT_MARKUP: null,                                                                                                 // 11177
  MOVE_EXISTING: null,                                                                                                 // 11178
  REMOVE_NODE: null,                                                                                                   // 11179
  TEXT_CONTENT: null                                                                                                   // 11180
});                                                                                                                    // 11181
                                                                                                                       // 11182
module.exports = ReactMultiChildUpdateTypes;                                                                           // 11183
                                                                                                                       // 11184
},{"./keyMirror":118}],59:[function(_dereq_,module,exports){                                                           // 11185
/**                                                                                                                    // 11186
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 11187
 *                                                                                                                     // 11188
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11189
 * you may not use this file except in compliance with the License.                                                    // 11190
 * You may obtain a copy of the License at                                                                             // 11191
 *                                                                                                                     // 11192
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11193
 *                                                                                                                     // 11194
 * Unless required by applicable law or agreed to in writing, software                                                 // 11195
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11196
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11197
 * See the License for the specific language governing permissions and                                                 // 11198
 * limitations under the License.                                                                                      // 11199
 *                                                                                                                     // 11200
 * @providesModule ReactOwner                                                                                          // 11201
 */                                                                                                                    // 11202
                                                                                                                       // 11203
"use strict";                                                                                                          // 11204
                                                                                                                       // 11205
var emptyObject = _dereq_("./emptyObject");                                                                            // 11206
var invariant = _dereq_("./invariant");                                                                                // 11207
                                                                                                                       // 11208
/**                                                                                                                    // 11209
 * ReactOwners are capable of storing references to owned components.                                                  // 11210
 *                                                                                                                     // 11211
 * All components are capable of //being// referenced by owner components, but                                         // 11212
 * only ReactOwner components are capable of //referencing// owned components.                                         // 11213
 * The named reference is known as a "ref".                                                                            // 11214
 *                                                                                                                     // 11215
 * Refs are available when mounted and updated during reconciliation.                                                  // 11216
 *                                                                                                                     // 11217
 *   var MyComponent = React.createClass({                                                                             // 11218
 *     render: function() {                                                                                            // 11219
 *       return (                                                                                                      // 11220
 *         <div onClick={this.handleClick}>                                                                            // 11221
 *           <CustomComponent ref="custom" />                                                                          // 11222
 *         </div>                                                                                                      // 11223
 *       );                                                                                                            // 11224
 *     },                                                                                                              // 11225
 *     handleClick: function() {                                                                                       // 11226
 *       this.refs.custom.handleClick();                                                                               // 11227
 *     },                                                                                                              // 11228
 *     componentDidMount: function() {                                                                                 // 11229
 *       this.refs.custom.initialize();                                                                                // 11230
 *     }                                                                                                               // 11231
 *   });                                                                                                               // 11232
 *                                                                                                                     // 11233
 * Refs should rarely be used. When refs are used, they should only be done to                                         // 11234
 * control data that is not handled by React's data flow.                                                              // 11235
 *                                                                                                                     // 11236
 * @class ReactOwner                                                                                                   // 11237
 */                                                                                                                    // 11238
var ReactOwner = {                                                                                                     // 11239
                                                                                                                       // 11240
  /**                                                                                                                  // 11241
   * @param {?object} object                                                                                           // 11242
   * @return {boolean} True if `object` is a valid owner.                                                              // 11243
   * @final                                                                                                            // 11244
   */                                                                                                                  // 11245
  isValidOwner: function(object) {                                                                                     // 11246
    return !!(                                                                                                         // 11247
      object &&                                                                                                        // 11248
      typeof object.attachRef === 'function' &&                                                                        // 11249
      typeof object.detachRef === 'function'                                                                           // 11250
    );                                                                                                                 // 11251
  },                                                                                                                   // 11252
                                                                                                                       // 11253
  /**                                                                                                                  // 11254
   * Adds a component by ref to an owner component.                                                                    // 11255
   *                                                                                                                   // 11256
   * @param {ReactComponent} component Component to reference.                                                         // 11257
   * @param {string} ref Name by which to refer to the component.                                                      // 11258
   * @param {ReactOwner} owner Component on which to record the ref.                                                   // 11259
   * @final                                                                                                            // 11260
   * @internal                                                                                                         // 11261
   */                                                                                                                  // 11262
  addComponentAsRefTo: function(component, ref, owner) {                                                               // 11263
    ("production" !== "development" ? invariant(                                                                       // 11264
      ReactOwner.isValidOwner(owner),                                                                                  // 11265
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +                                             // 11266
      'usually means that you\'re trying to add a ref to a component that ' +                                          // 11267
      'doesn\'t have an owner (that is, was not created inside of another ' +                                          // 11268
      'component\'s `render` method). Try rendering this component inside of ' +                                       // 11269
      'a new top-level component which will hold the ref.'                                                             // 11270
    ) : invariant(ReactOwner.isValidOwner(owner)));                                                                    // 11271
    owner.attachRef(ref, component);                                                                                   // 11272
  },                                                                                                                   // 11273
                                                                                                                       // 11274
  /**                                                                                                                  // 11275
   * Removes a component by ref from an owner component.                                                               // 11276
   *                                                                                                                   // 11277
   * @param {ReactComponent} component Component to dereference.                                                       // 11278
   * @param {string} ref Name of the ref to remove.                                                                    // 11279
   * @param {ReactOwner} owner Component on which the ref is recorded.                                                 // 11280
   * @final                                                                                                            // 11281
   * @internal                                                                                                         // 11282
   */                                                                                                                  // 11283
  removeComponentAsRefFrom: function(component, ref, owner) {                                                          // 11284
    ("production" !== "development" ? invariant(                                                                       // 11285
      ReactOwner.isValidOwner(owner),                                                                                  // 11286
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +                                        // 11287
      'usually means that you\'re trying to remove a ref to a component that ' +                                       // 11288
      'doesn\'t have an owner (that is, was not created inside of another ' +                                          // 11289
      'component\'s `render` method). Try rendering this component inside of ' +                                       // 11290
      'a new top-level component which will hold the ref.'                                                             // 11291
    ) : invariant(ReactOwner.isValidOwner(owner)));                                                                    // 11292
    // Check that `component` is still the current ref because we do not want to                                       // 11293
    // detach the ref if another component stole it.                                                                   // 11294
    if (owner.refs[ref] === component) {                                                                               // 11295
      owner.detachRef(ref);                                                                                            // 11296
    }                                                                                                                  // 11297
  },                                                                                                                   // 11298
                                                                                                                       // 11299
  /**                                                                                                                  // 11300
   * A ReactComponent must mix this in to have refs.                                                                   // 11301
   *                                                                                                                   // 11302
   * @lends {ReactOwner.prototype}                                                                                     // 11303
   */                                                                                                                  // 11304
  Mixin: {                                                                                                             // 11305
                                                                                                                       // 11306
    construct: function() {                                                                                            // 11307
      this.refs = emptyObject;                                                                                         // 11308
    },                                                                                                                 // 11309
                                                                                                                       // 11310
    /**                                                                                                                // 11311
     * Lazily allocates the refs object and stores `component` as `ref`.                                               // 11312
     *                                                                                                                 // 11313
     * @param {string} ref Reference name.                                                                             // 11314
     * @param {component} component Component to store as `ref`.                                                       // 11315
     * @final                                                                                                          // 11316
     * @private                                                                                                        // 11317
     */                                                                                                                // 11318
    attachRef: function(ref, component) {                                                                              // 11319
      ("production" !== "development" ? invariant(                                                                     // 11320
        component.isOwnedBy(this),                                                                                     // 11321
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',                                        // 11322
        ref                                                                                                            // 11323
      ) : invariant(component.isOwnedBy(this)));                                                                       // 11324
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;                                             // 11325
      refs[ref] = component;                                                                                           // 11326
    },                                                                                                                 // 11327
                                                                                                                       // 11328
    /**                                                                                                                // 11329
     * Detaches a reference name.                                                                                      // 11330
     *                                                                                                                 // 11331
     * @param {string} ref Name to dereference.                                                                        // 11332
     * @final                                                                                                          // 11333
     * @private                                                                                                        // 11334
     */                                                                                                                // 11335
    detachRef: function(ref) {                                                                                         // 11336
      delete this.refs[ref];                                                                                           // 11337
    }                                                                                                                  // 11338
                                                                                                                       // 11339
  }                                                                                                                    // 11340
                                                                                                                       // 11341
};                                                                                                                     // 11342
                                                                                                                       // 11343
module.exports = ReactOwner;                                                                                           // 11344
                                                                                                                       // 11345
},{"./emptyObject":97,"./invariant":112}],60:[function(_dereq_,module,exports){                                        // 11346
/**                                                                                                                    // 11347
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 11348
 *                                                                                                                     // 11349
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11350
 * you may not use this file except in compliance with the License.                                                    // 11351
 * You may obtain a copy of the License at                                                                             // 11352
 *                                                                                                                     // 11353
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11354
 *                                                                                                                     // 11355
 * Unless required by applicable law or agreed to in writing, software                                                 // 11356
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11357
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11358
 * See the License for the specific language governing permissions and                                                 // 11359
 * limitations under the License.                                                                                      // 11360
 *                                                                                                                     // 11361
 * @providesModule ReactPerf                                                                                           // 11362
 * @typechecks static-only                                                                                             // 11363
 */                                                                                                                    // 11364
                                                                                                                       // 11365
"use strict";                                                                                                          // 11366
                                                                                                                       // 11367
/**                                                                                                                    // 11368
 * ReactPerf is a general AOP system designed to measure performance. This                                             // 11369
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.                                              // 11370
 */                                                                                                                    // 11371
var ReactPerf = {                                                                                                      // 11372
  /**                                                                                                                  // 11373
   * Boolean to enable/disable measurement. Set to false by default to prevent                                         // 11374
   * accidental logging and perf loss.                                                                                 // 11375
   */                                                                                                                  // 11376
  enableMeasure: false,                                                                                                // 11377
                                                                                                                       // 11378
  /**                                                                                                                  // 11379
   * Holds onto the measure function in use. By default, don't measure                                                 // 11380
   * anything, but we'll override this if we inject a measure function.                                                // 11381
   */                                                                                                                  // 11382
  storedMeasure: _noMeasure,                                                                                           // 11383
                                                                                                                       // 11384
  /**                                                                                                                  // 11385
   * Use this to wrap methods you want to measure. Zero overhead in production.                                        // 11386
   *                                                                                                                   // 11387
   * @param {string} objName                                                                                           // 11388
   * @param {string} fnName                                                                                            // 11389
   * @param {function} func                                                                                            // 11390
   * @return {function}                                                                                                // 11391
   */                                                                                                                  // 11392
  measure: function(objName, fnName, func) {                                                                           // 11393
    if ("production" !== "development") {                                                                              // 11394
      var measuredFunc = null;                                                                                         // 11395
      return function() {                                                                                              // 11396
        if (ReactPerf.enableMeasure) {                                                                                 // 11397
          if (!measuredFunc) {                                                                                         // 11398
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);                                             // 11399
          }                                                                                                            // 11400
          return measuredFunc.apply(this, arguments);                                                                  // 11401
        }                                                                                                              // 11402
        return func.apply(this, arguments);                                                                            // 11403
      };                                                                                                               // 11404
    }                                                                                                                  // 11405
    return func;                                                                                                       // 11406
  },                                                                                                                   // 11407
                                                                                                                       // 11408
  injection: {                                                                                                         // 11409
    /**                                                                                                                // 11410
     * @param {function} measure                                                                                       // 11411
     */                                                                                                                // 11412
    injectMeasure: function(measure) {                                                                                 // 11413
      ReactPerf.storedMeasure = measure;                                                                               // 11414
    }                                                                                                                  // 11415
  }                                                                                                                    // 11416
};                                                                                                                     // 11417
                                                                                                                       // 11418
/**                                                                                                                    // 11419
 * Simply passes through the measured function, without measuring it.                                                  // 11420
 *                                                                                                                     // 11421
 * @param {string} objName                                                                                             // 11422
 * @param {string} fnName                                                                                              // 11423
 * @param {function} func                                                                                              // 11424
 * @return {function}                                                                                                  // 11425
 */                                                                                                                    // 11426
function _noMeasure(objName, fnName, func) {                                                                           // 11427
  return func;                                                                                                         // 11428
}                                                                                                                      // 11429
                                                                                                                       // 11430
module.exports = ReactPerf;                                                                                            // 11431
                                                                                                                       // 11432
},{}],61:[function(_dereq_,module,exports){                                                                            // 11433
/**                                                                                                                    // 11434
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 11435
 *                                                                                                                     // 11436
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11437
 * you may not use this file except in compliance with the License.                                                    // 11438
 * You may obtain a copy of the License at                                                                             // 11439
 *                                                                                                                     // 11440
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11441
 *                                                                                                                     // 11442
 * Unless required by applicable law or agreed to in writing, software                                                 // 11443
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11444
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11445
 * See the License for the specific language governing permissions and                                                 // 11446
 * limitations under the License.                                                                                      // 11447
 *                                                                                                                     // 11448
 * @providesModule ReactPropTransferer                                                                                 // 11449
 */                                                                                                                    // 11450
                                                                                                                       // 11451
"use strict";                                                                                                          // 11452
                                                                                                                       // 11453
var emptyFunction = _dereq_("./emptyFunction");                                                                        // 11454
var invariant = _dereq_("./invariant");                                                                                // 11455
var joinClasses = _dereq_("./joinClasses");                                                                            // 11456
var merge = _dereq_("./merge");                                                                                        // 11457
                                                                                                                       // 11458
/**                                                                                                                    // 11459
 * Creates a transfer strategy that will merge prop values using the supplied                                          // 11460
 * `mergeStrategy`. If a prop was previously unset, this just sets it.                                                 // 11461
 *                                                                                                                     // 11462
 * @param {function} mergeStrategy                                                                                     // 11463
 * @return {function}                                                                                                  // 11464
 */                                                                                                                    // 11465
function createTransferStrategy(mergeStrategy) {                                                                       // 11466
  return function(props, key, value) {                                                                                 // 11467
    if (!props.hasOwnProperty(key)) {                                                                                  // 11468
      props[key] = value;                                                                                              // 11469
    } else {                                                                                                           // 11470
      props[key] = mergeStrategy(props[key], value);                                                                   // 11471
    }                                                                                                                  // 11472
  };                                                                                                                   // 11473
}                                                                                                                      // 11474
                                                                                                                       // 11475
/**                                                                                                                    // 11476
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.                                         // 11477
 * NOTE: if you add any more exceptions to this list you should be sure to                                             // 11478
 * update `cloneWithProps()` accordingly.                                                                              // 11479
 */                                                                                                                    // 11480
var TransferStrategies = {                                                                                             // 11481
  /**                                                                                                                  // 11482
   * Never transfer `children`.                                                                                        // 11483
   */                                                                                                                  // 11484
  children: emptyFunction,                                                                                             // 11485
  /**                                                                                                                  // 11486
   * Transfer the `className` prop by merging them.                                                                    // 11487
   */                                                                                                                  // 11488
  className: createTransferStrategy(joinClasses),                                                                      // 11489
  /**                                                                                                                  // 11490
   * Never transfer the `key` prop.                                                                                    // 11491
   */                                                                                                                  // 11492
  key: emptyFunction,                                                                                                  // 11493
  /**                                                                                                                  // 11494
   * Never transfer the `ref` prop.                                                                                    // 11495
   */                                                                                                                  // 11496
  ref: emptyFunction,                                                                                                  // 11497
  /**                                                                                                                  // 11498
   * Transfer the `style` prop (which is an object) by merging them.                                                   // 11499
   */                                                                                                                  // 11500
  style: createTransferStrategy(merge)                                                                                 // 11501
};                                                                                                                     // 11502
                                                                                                                       // 11503
/**                                                                                                                    // 11504
 * ReactPropTransferer are capable of transferring props to another component                                          // 11505
 * using a `transferPropsTo` method.                                                                                   // 11506
 *                                                                                                                     // 11507
 * @class ReactPropTransferer                                                                                          // 11508
 */                                                                                                                    // 11509
var ReactPropTransferer = {                                                                                            // 11510
                                                                                                                       // 11511
  TransferStrategies: TransferStrategies,                                                                              // 11512
                                                                                                                       // 11513
  /**                                                                                                                  // 11514
   * Merge two props objects using TransferStrategies.                                                                 // 11515
   *                                                                                                                   // 11516
   * @param {object} oldProps original props (they take precedence)                                                    // 11517
   * @param {object} newProps new props to merge in                                                                    // 11518
   * @return {object} a new object containing both sets of props merged.                                               // 11519
   */                                                                                                                  // 11520
  mergeProps: function(oldProps, newProps) {                                                                           // 11521
    var props = merge(oldProps);                                                                                       // 11522
                                                                                                                       // 11523
    for (var thisKey in newProps) {                                                                                    // 11524
      if (!newProps.hasOwnProperty(thisKey)) {                                                                         // 11525
        continue;                                                                                                      // 11526
      }                                                                                                                // 11527
                                                                                                                       // 11528
      var transferStrategy = TransferStrategies[thisKey];                                                              // 11529
                                                                                                                       // 11530
      if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {                                            // 11531
        transferStrategy(props, thisKey, newProps[thisKey]);                                                           // 11532
      } else if (!props.hasOwnProperty(thisKey)) {                                                                     // 11533
        props[thisKey] = newProps[thisKey];                                                                            // 11534
      }                                                                                                                // 11535
    }                                                                                                                  // 11536
                                                                                                                       // 11537
    return props;                                                                                                      // 11538
  },                                                                                                                   // 11539
                                                                                                                       // 11540
  /**                                                                                                                  // 11541
   * @lends {ReactPropTransferer.prototype}                                                                            // 11542
   */                                                                                                                  // 11543
  Mixin: {                                                                                                             // 11544
                                                                                                                       // 11545
    /**                                                                                                                // 11546
     * Transfer props from this component to a target component.                                                       // 11547
     *                                                                                                                 // 11548
     * Props that do not have an explicit transfer strategy will be transferred                                        // 11549
     * only if the target component does not already have the prop set.                                                // 11550
     *                                                                                                                 // 11551
     * This is usually used to pass down props to a returned root component.                                           // 11552
     *                                                                                                                 // 11553
     * @param {ReactComponent} component Component receiving the properties.                                           // 11554
     * @return {ReactComponent} The supplied `component`.                                                              // 11555
     * @final                                                                                                          // 11556
     * @protected                                                                                                      // 11557
     */                                                                                                                // 11558
    transferPropsTo: function(component) {                                                                             // 11559
      ("production" !== "development" ? invariant(                                                                     // 11560
        component._owner === this,                                                                                     // 11561
        '%s: You can\'t call transferPropsTo() on a component that you ' +                                             // 11562
        'don\'t own, %s. This usually means you are calling ' +                                                        // 11563
        'transferPropsTo() on a component passed in as props or children.',                                            // 11564
        this.constructor.displayName,                                                                                  // 11565
        component.constructor.displayName                                                                              // 11566
      ) : invariant(component._owner === this));                                                                       // 11567
                                                                                                                       // 11568
      component.props = ReactPropTransferer.mergeProps(                                                                // 11569
        component.props,                                                                                               // 11570
        this.props                                                                                                     // 11571
      );                                                                                                               // 11572
                                                                                                                       // 11573
      return component;                                                                                                // 11574
    }                                                                                                                  // 11575
                                                                                                                       // 11576
  }                                                                                                                    // 11577
};                                                                                                                     // 11578
                                                                                                                       // 11579
module.exports = ReactPropTransferer;                                                                                  // 11580
                                                                                                                       // 11581
},{"./emptyFunction":96,"./invariant":112,"./joinClasses":117,"./merge":121}],62:[function(_dereq_,module,exports){    // 11582
/**                                                                                                                    // 11583
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 11584
 *                                                                                                                     // 11585
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11586
 * you may not use this file except in compliance with the License.                                                    // 11587
 * You may obtain a copy of the License at                                                                             // 11588
 *                                                                                                                     // 11589
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11590
 *                                                                                                                     // 11591
 * Unless required by applicable law or agreed to in writing, software                                                 // 11592
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11593
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11594
 * See the License for the specific language governing permissions and                                                 // 11595
 * limitations under the License.                                                                                      // 11596
 *                                                                                                                     // 11597
 * @providesModule ReactPropTypeLocationNames                                                                          // 11598
 */                                                                                                                    // 11599
                                                                                                                       // 11600
"use strict";                                                                                                          // 11601
                                                                                                                       // 11602
var ReactPropTypeLocationNames = {};                                                                                   // 11603
                                                                                                                       // 11604
if ("production" !== "development") {                                                                                  // 11605
  ReactPropTypeLocationNames = {                                                                                       // 11606
    prop: 'prop',                                                                                                      // 11607
    context: 'context',                                                                                                // 11608
    childContext: 'child context'                                                                                      // 11609
  };                                                                                                                   // 11610
}                                                                                                                      // 11611
                                                                                                                       // 11612
module.exports = ReactPropTypeLocationNames;                                                                           // 11613
                                                                                                                       // 11614
},{}],63:[function(_dereq_,module,exports){                                                                            // 11615
/**                                                                                                                    // 11616
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 11617
 *                                                                                                                     // 11618
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11619
 * you may not use this file except in compliance with the License.                                                    // 11620
 * You may obtain a copy of the License at                                                                             // 11621
 *                                                                                                                     // 11622
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11623
 *                                                                                                                     // 11624
 * Unless required by applicable law or agreed to in writing, software                                                 // 11625
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11626
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11627
 * See the License for the specific language governing permissions and                                                 // 11628
 * limitations under the License.                                                                                      // 11629
 *                                                                                                                     // 11630
 * @providesModule ReactPropTypeLocations                                                                              // 11631
 */                                                                                                                    // 11632
                                                                                                                       // 11633
"use strict";                                                                                                          // 11634
                                                                                                                       // 11635
var keyMirror = _dereq_("./keyMirror");                                                                                // 11636
                                                                                                                       // 11637
var ReactPropTypeLocations = keyMirror({                                                                               // 11638
  prop: null,                                                                                                          // 11639
  context: null,                                                                                                       // 11640
  childContext: null                                                                                                   // 11641
});                                                                                                                    // 11642
                                                                                                                       // 11643
module.exports = ReactPropTypeLocations;                                                                               // 11644
                                                                                                                       // 11645
},{"./keyMirror":118}],64:[function(_dereq_,module,exports){                                                           // 11646
/**                                                                                                                    // 11647
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 11648
 *                                                                                                                     // 11649
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11650
 * you may not use this file except in compliance with the License.                                                    // 11651
 * You may obtain a copy of the License at                                                                             // 11652
 *                                                                                                                     // 11653
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11654
 *                                                                                                                     // 11655
 * Unless required by applicable law or agreed to in writing, software                                                 // 11656
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11657
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11658
 * See the License for the specific language governing permissions and                                                 // 11659
 * limitations under the License.                                                                                      // 11660
 *                                                                                                                     // 11661
 * @providesModule ReactPropTypes                                                                                      // 11662
 */                                                                                                                    // 11663
                                                                                                                       // 11664
"use strict";                                                                                                          // 11665
                                                                                                                       // 11666
var ReactComponent = _dereq_("./ReactComponent");                                                                      // 11667
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");                                              // 11668
                                                                                                                       // 11669
var warning = _dereq_("./warning");                                                                                    // 11670
var createObjectFrom = _dereq_("./createObjectFrom");                                                                  // 11671
                                                                                                                       // 11672
/**                                                                                                                    // 11673
 * Collection of methods that allow declaration and validation of props that are                                       // 11674
 * supplied to React components. Example usage:                                                                        // 11675
 *                                                                                                                     // 11676
 *   var Props = require('ReactPropTypes');                                                                            // 11677
 *   var MyArticle = React.createClass({                                                                               // 11678
 *     propTypes: {                                                                                                    // 11679
 *       // An optional string prop named "description".                                                               // 11680
 *       description: Props.string,                                                                                    // 11681
 *                                                                                                                     // 11682
 *       // A required enum prop named "category".                                                                     // 11683
 *       category: Props.oneOf(['News','Photos']).isRequired,                                                          // 11684
 *                                                                                                                     // 11685
 *       // A prop named "dialog" that requires an instance of Dialog.                                                 // 11686
 *       dialog: Props.instanceOf(Dialog).isRequired                                                                   // 11687
 *     },                                                                                                              // 11688
 *     render: function() { ... }                                                                                      // 11689
 *   });                                                                                                               // 11690
 *                                                                                                                     // 11691
 * A more formal specification of how these methods are used:                                                          // 11692
 *                                                                                                                     // 11693
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                         // 11694
 *   decl := ReactPropTypes.{type}(.isRequired)?                                                                       // 11695
 *                                                                                                                     // 11696
 * Each and every declaration produces a function with the same signature. This                                        // 11697
 * allows the creation of custom validation functions. For example:                                                    // 11698
 *                                                                                                                     // 11699
 *   var Props = require('ReactPropTypes');                                                                            // 11700
 *   var MyLink = React.createClass({                                                                                  // 11701
 *     propTypes: {                                                                                                    // 11702
 *       // An optional string or URI prop named "href".                                                               // 11703
 *       href: function(props, propName, componentName) {                                                              // 11704
 *         var propValue = props[propName];                                                                            // 11705
 *         warning(                                                                                                    // 11706
 *           propValue == null ||                                                                                      // 11707
 *           typeof propValue === 'string' ||                                                                          // 11708
 *           propValue instanceof URI,                                                                                 // 11709
 *           'Invalid `%s` supplied to `%s`, expected string or URI.',                                                 // 11710
 *           propName,                                                                                                 // 11711
 *           componentName                                                                                             // 11712
 *         );                                                                                                          // 11713
 *       }                                                                                                             // 11714
 *     },                                                                                                              // 11715
 *     render: function() { ... }                                                                                      // 11716
 *   });                                                                                                               // 11717
 *                                                                                                                     // 11718
 * @internal                                                                                                           // 11719
 */                                                                                                                    // 11720
var Props = {                                                                                                          // 11721
                                                                                                                       // 11722
  array: createPrimitiveTypeChecker('array'),                                                                          // 11723
  bool: createPrimitiveTypeChecker('boolean'),                                                                         // 11724
  func: createPrimitiveTypeChecker('function'),                                                                        // 11725
  number: createPrimitiveTypeChecker('number'),                                                                        // 11726
  object: createPrimitiveTypeChecker('object'),                                                                        // 11727
  string: createPrimitiveTypeChecker('string'),                                                                        // 11728
                                                                                                                       // 11729
  shape: createShapeTypeChecker,                                                                                       // 11730
  oneOf: createEnumTypeChecker,                                                                                        // 11731
  oneOfType: createUnionTypeChecker,                                                                                   // 11732
  arrayOf: createArrayOfTypeChecker,                                                                                   // 11733
                                                                                                                       // 11734
  instanceOf: createInstanceTypeChecker,                                                                               // 11735
                                                                                                                       // 11736
  renderable: createRenderableTypeChecker(),                                                                           // 11737
                                                                                                                       // 11738
  component: createComponentTypeChecker(),                                                                             // 11739
                                                                                                                       // 11740
  any: createAnyTypeChecker()                                                                                          // 11741
};                                                                                                                     // 11742
                                                                                                                       // 11743
var ANONYMOUS = '<<anonymous>>';                                                                                       // 11744
                                                                                                                       // 11745
function isRenderable(propValue) {                                                                                     // 11746
  switch(typeof propValue) {                                                                                           // 11747
    case 'number':                                                                                                     // 11748
    case 'string':                                                                                                     // 11749
      return true;                                                                                                     // 11750
    case 'object':                                                                                                     // 11751
      if (Array.isArray(propValue)) {                                                                                  // 11752
        return propValue.every(isRenderable);                                                                          // 11753
      }                                                                                                                // 11754
      if (ReactComponent.isValidComponent(propValue)) {                                                                // 11755
        return true;                                                                                                   // 11756
      }                                                                                                                // 11757
      for (var k in propValue) {                                                                                       // 11758
        if (!isRenderable(propValue[k])) {                                                                             // 11759
          return false;                                                                                                // 11760
        }                                                                                                              // 11761
      }                                                                                                                // 11762
      return true;                                                                                                     // 11763
    default:                                                                                                           // 11764
      return false;                                                                                                    // 11765
  }                                                                                                                    // 11766
}                                                                                                                      // 11767
                                                                                                                       // 11768
// Equivalent of typeof but with special handling for arrays                                                           // 11769
function getPropType(propValue) {                                                                                      // 11770
  var propType = typeof propValue;                                                                                     // 11771
  if (propType === 'object' && Array.isArray(propValue)) {                                                             // 11772
    return 'array';                                                                                                    // 11773
  }                                                                                                                    // 11774
  return propType;                                                                                                     // 11775
}                                                                                                                      // 11776
                                                                                                                       // 11777
function createAnyTypeChecker() {                                                                                      // 11778
  function validateAnyType(                                                                                            // 11779
    shouldWarn, propValue, propName, componentName, location                                                           // 11780
  ) {                                                                                                                  // 11781
    return true; // is always valid                                                                                    // 11782
  }                                                                                                                    // 11783
  return createChainableTypeChecker(validateAnyType);                                                                  // 11784
}                                                                                                                      // 11785
                                                                                                                       // 11786
function createPrimitiveTypeChecker(expectedType) {                                                                    // 11787
  function validatePrimitiveType(                                                                                      // 11788
    shouldWarn, propValue, propName, componentName, location                                                           // 11789
  ) {                                                                                                                  // 11790
    var propType = getPropType(propValue);                                                                             // 11791
    var isValid = propType === expectedType;                                                                           // 11792
    if (shouldWarn) {                                                                                                  // 11793
      ("production" !== "development" ? warning(                                                                       // 11794
        isValid,                                                                                                       // 11795
        'Invalid %s `%s` of type `%s` supplied to `%s`, expected `%s`.',                                               // 11796
        ReactPropTypeLocationNames[location],                                                                          // 11797
        propName,                                                                                                      // 11798
        propType,                                                                                                      // 11799
        componentName,                                                                                                 // 11800
        expectedType                                                                                                   // 11801
      ) : null);                                                                                                       // 11802
    }                                                                                                                  // 11803
    return isValid;                                                                                                    // 11804
  }                                                                                                                    // 11805
  return createChainableTypeChecker(validatePrimitiveType);                                                            // 11806
}                                                                                                                      // 11807
                                                                                                                       // 11808
function createEnumTypeChecker(expectedValues) {                                                                       // 11809
  var expectedEnum = createObjectFrom(expectedValues);                                                                 // 11810
  function validateEnumType(                                                                                           // 11811
    shouldWarn, propValue, propName, componentName, location                                                           // 11812
  ) {                                                                                                                  // 11813
    var isValid = expectedEnum[propValue];                                                                             // 11814
    if (shouldWarn) {                                                                                                  // 11815
      ("production" !== "development" ? warning(                                                                       // 11816
        isValid,                                                                                                       // 11817
        'Invalid %s `%s` supplied to `%s`, expected one of %s.',                                                       // 11818
        ReactPropTypeLocationNames[location],                                                                          // 11819
        propName,                                                                                                      // 11820
        componentName,                                                                                                 // 11821
        JSON.stringify(Object.keys(expectedEnum))                                                                      // 11822
      ) : null);                                                                                                       // 11823
    }                                                                                                                  // 11824
    return isValid;                                                                                                    // 11825
  }                                                                                                                    // 11826
  return createChainableTypeChecker(validateEnumType);                                                                 // 11827
}                                                                                                                      // 11828
                                                                                                                       // 11829
function createShapeTypeChecker(shapeTypes) {                                                                          // 11830
  function validateShapeType(                                                                                          // 11831
    shouldWarn, propValue, propName, componentName, location                                                           // 11832
  ) {                                                                                                                  // 11833
    var propType = getPropType(propValue);                                                                             // 11834
    var isValid = propType === 'object';                                                                               // 11835
    if (isValid) {                                                                                                     // 11836
      for (var key in shapeTypes) {                                                                                    // 11837
        var checker = shapeTypes[key];                                                                                 // 11838
        if (checker && !checker(propValue, key, componentName, location)) {                                            // 11839
          return false;                                                                                                // 11840
        }                                                                                                              // 11841
      }                                                                                                                // 11842
    }                                                                                                                  // 11843
    if (shouldWarn) {                                                                                                  // 11844
      ("production" !== "development" ? warning(                                                                       // 11845
        isValid,                                                                                                       // 11846
        'Invalid %s `%s` of type `%s` supplied to `%s`, expected `object`.',                                           // 11847
        ReactPropTypeLocationNames[location],                                                                          // 11848
        propName,                                                                                                      // 11849
        propType,                                                                                                      // 11850
        componentName                                                                                                  // 11851
      ) : null);                                                                                                       // 11852
    }                                                                                                                  // 11853
    return isValid;                                                                                                    // 11854
  }                                                                                                                    // 11855
  return createChainableTypeChecker(validateShapeType);                                                                // 11856
}                                                                                                                      // 11857
                                                                                                                       // 11858
function createInstanceTypeChecker(expectedClass) {                                                                    // 11859
  function validateInstanceType(                                                                                       // 11860
    shouldWarn, propValue, propName, componentName, location                                                           // 11861
  ) {                                                                                                                  // 11862
    var isValid = propValue instanceof expectedClass;                                                                  // 11863
    if (shouldWarn) {                                                                                                  // 11864
      ("production" !== "development" ? warning(                                                                       // 11865
        isValid,                                                                                                       // 11866
        'Invalid %s `%s` supplied to `%s`, expected instance of `%s`.',                                                // 11867
        ReactPropTypeLocationNames[location],                                                                          // 11868
        propName,                                                                                                      // 11869
        componentName,                                                                                                 // 11870
        expectedClass.name || ANONYMOUS                                                                                // 11871
      ) : null);                                                                                                       // 11872
    }                                                                                                                  // 11873
    return isValid;                                                                                                    // 11874
  }                                                                                                                    // 11875
  return createChainableTypeChecker(validateInstanceType);                                                             // 11876
}                                                                                                                      // 11877
                                                                                                                       // 11878
function createArrayOfTypeChecker(propTypeChecker) {                                                                   // 11879
  function validateArrayType(                                                                                          // 11880
    shouldWarn, propValue, propName, componentName, location                                                           // 11881
  ) {                                                                                                                  // 11882
    var isValid = Array.isArray(propValue);                                                                            // 11883
    if (isValid) {                                                                                                     // 11884
      for (var i = 0; i < propValue.length; i++) {                                                                     // 11885
        if (!propTypeChecker(propValue, i, componentName, location)) {                                                 // 11886
          return false;                                                                                                // 11887
        }                                                                                                              // 11888
      }                                                                                                                // 11889
    }                                                                                                                  // 11890
    if (shouldWarn) {                                                                                                  // 11891
      ("production" !== "development" ? warning(                                                                       // 11892
        isValid,                                                                                                       // 11893
        'Invalid %s `%s` supplied to `%s`, expected an array.',                                                        // 11894
        ReactPropTypeLocationNames[location],                                                                          // 11895
        propName,                                                                                                      // 11896
        componentName                                                                                                  // 11897
      ) : null);                                                                                                       // 11898
    }                                                                                                                  // 11899
    return isValid;                                                                                                    // 11900
  }                                                                                                                    // 11901
  return createChainableTypeChecker(validateArrayType);                                                                // 11902
}                                                                                                                      // 11903
                                                                                                                       // 11904
function createRenderableTypeChecker() {                                                                               // 11905
  function validateRenderableType(                                                                                     // 11906
    shouldWarn, propValue, propName, componentName, location                                                           // 11907
  ) {                                                                                                                  // 11908
    var isValid = isRenderable(propValue);                                                                             // 11909
    if (shouldWarn) {                                                                                                  // 11910
      ("production" !== "development" ? warning(                                                                       // 11911
        isValid,                                                                                                       // 11912
        'Invalid %s `%s` supplied to `%s`, expected a renderable prop.',                                               // 11913
        ReactPropTypeLocationNames[location],                                                                          // 11914
        propName,                                                                                                      // 11915
        componentName                                                                                                  // 11916
      ) : null);                                                                                                       // 11917
    }                                                                                                                  // 11918
    return isValid;                                                                                                    // 11919
  }                                                                                                                    // 11920
  return createChainableTypeChecker(validateRenderableType);                                                           // 11921
}                                                                                                                      // 11922
                                                                                                                       // 11923
function createComponentTypeChecker() {                                                                                // 11924
  function validateComponentType(                                                                                      // 11925
    shouldWarn, propValue, propName, componentName, location                                                           // 11926
  ) {                                                                                                                  // 11927
    var isValid = ReactComponent.isValidComponent(propValue);                                                          // 11928
    if (shouldWarn) {                                                                                                  // 11929
      ("production" !== "development" ? warning(                                                                       // 11930
        isValid,                                                                                                       // 11931
        'Invalid %s `%s` supplied to `%s`, expected a React component.',                                               // 11932
        ReactPropTypeLocationNames[location],                                                                          // 11933
        propName,                                                                                                      // 11934
        componentName                                                                                                  // 11935
      ) : null);                                                                                                       // 11936
    }                                                                                                                  // 11937
    return isValid;                                                                                                    // 11938
  }                                                                                                                    // 11939
  return createChainableTypeChecker(validateComponentType);                                                            // 11940
}                                                                                                                      // 11941
                                                                                                                       // 11942
function createUnionTypeChecker(arrayOfValidators) {                                                                   // 11943
  return function(props, propName, componentName, location) {                                                          // 11944
    var isValid = false;                                                                                               // 11945
    for (var ii = 0; ii < arrayOfValidators.length; ii++) {                                                            // 11946
      var validate = arrayOfValidators[ii];                                                                            // 11947
      if (typeof validate.weak === 'function') {                                                                       // 11948
        validate = validate.weak;                                                                                      // 11949
      }                                                                                                                // 11950
      if (validate(props, propName, componentName, location)) {                                                        // 11951
        isValid = true;                                                                                                // 11952
        break;                                                                                                         // 11953
      }                                                                                                                // 11954
    }                                                                                                                  // 11955
    ("production" !== "development" ? warning(                                                                         // 11956
      isValid,                                                                                                         // 11957
      'Invalid %s `%s` supplied to `%s`.',                                                                             // 11958
      ReactPropTypeLocationNames[location],                                                                            // 11959
      propName,                                                                                                        // 11960
      componentName || ANONYMOUS                                                                                       // 11961
    ) : null);                                                                                                         // 11962
    return isValid;                                                                                                    // 11963
  };                                                                                                                   // 11964
}                                                                                                                      // 11965
                                                                                                                       // 11966
function createChainableTypeChecker(validate) {                                                                        // 11967
  function checkType(                                                                                                  // 11968
    isRequired, shouldWarn, props, propName, componentName, location                                                   // 11969
  ) {                                                                                                                  // 11970
    var propValue = props[propName];                                                                                   // 11971
    if (propValue != null) {                                                                                           // 11972
      // Only validate if there is a value to check.                                                                   // 11973
      return validate(                                                                                                 // 11974
        shouldWarn,                                                                                                    // 11975
        propValue,                                                                                                     // 11976
        propName,                                                                                                      // 11977
        componentName || ANONYMOUS,                                                                                    // 11978
        location                                                                                                       // 11979
      );                                                                                                               // 11980
    } else {                                                                                                           // 11981
      var isValid = !isRequired;                                                                                       // 11982
      if (shouldWarn) {                                                                                                // 11983
        ("production" !== "development" ? warning(                                                                     // 11984
          isValid,                                                                                                     // 11985
          'Required %s `%s` was not specified in `%s`.',                                                               // 11986
          ReactPropTypeLocationNames[location],                                                                        // 11987
          propName,                                                                                                    // 11988
          componentName || ANONYMOUS                                                                                   // 11989
        ) : null);                                                                                                     // 11990
      }                                                                                                                // 11991
      return isValid;                                                                                                  // 11992
    }                                                                                                                  // 11993
  }                                                                                                                    // 11994
                                                                                                                       // 11995
  var checker = checkType.bind(null, false, true);                                                                     // 11996
  checker.weak = checkType.bind(null, false, false);                                                                   // 11997
  checker.isRequired = checkType.bind(null, true, true);                                                               // 11998
  checker.weak.isRequired = checkType.bind(null, true, false);                                                         // 11999
  checker.isRequired.weak = checker.weak.isRequired;                                                                   // 12000
                                                                                                                       // 12001
  return checker;                                                                                                      // 12002
}                                                                                                                      // 12003
                                                                                                                       // 12004
module.exports = Props;                                                                                                // 12005
                                                                                                                       // 12006
},{"./ReactComponent":27,"./ReactPropTypeLocationNames":62,"./createObjectFrom":94,"./warning":134}],65:[function(_dereq_,module,exports){
/**                                                                                                                    // 12008
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 12009
 *                                                                                                                     // 12010
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12011
 * you may not use this file except in compliance with the License.                                                    // 12012
 * You may obtain a copy of the License at                                                                             // 12013
 *                                                                                                                     // 12014
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12015
 *                                                                                                                     // 12016
 * Unless required by applicable law or agreed to in writing, software                                                 // 12017
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12018
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12019
 * See the License for the specific language governing permissions and                                                 // 12020
 * limitations under the License.                                                                                      // 12021
 *                                                                                                                     // 12022
 * @providesModule ReactPutListenerQueue                                                                               // 12023
 */                                                                                                                    // 12024
                                                                                                                       // 12025
"use strict";                                                                                                          // 12026
                                                                                                                       // 12027
var PooledClass = _dereq_("./PooledClass");                                                                            // 12028
var ReactEventEmitter = _dereq_("./ReactEventEmitter");                                                                // 12029
                                                                                                                       // 12030
var mixInto = _dereq_("./mixInto");                                                                                    // 12031
                                                                                                                       // 12032
function ReactPutListenerQueue() {                                                                                     // 12033
  this.listenersToPut = [];                                                                                            // 12034
}                                                                                                                      // 12035
                                                                                                                       // 12036
mixInto(ReactPutListenerQueue, {                                                                                       // 12037
  enqueuePutListener: function(rootNodeID, propKey, propValue) {                                                       // 12038
    this.listenersToPut.push({                                                                                         // 12039
      rootNodeID: rootNodeID,                                                                                          // 12040
      propKey: propKey,                                                                                                // 12041
      propValue: propValue                                                                                             // 12042
    });                                                                                                                // 12043
  },                                                                                                                   // 12044
                                                                                                                       // 12045
  putListeners: function() {                                                                                           // 12046
    for (var i = 0; i < this.listenersToPut.length; i++) {                                                             // 12047
      var listenerToPut = this.listenersToPut[i];                                                                      // 12048
      ReactEventEmitter.putListener(                                                                                   // 12049
        listenerToPut.rootNodeID,                                                                                      // 12050
        listenerToPut.propKey,                                                                                         // 12051
        listenerToPut.propValue                                                                                        // 12052
      );                                                                                                               // 12053
    }                                                                                                                  // 12054
  },                                                                                                                   // 12055
                                                                                                                       // 12056
  reset: function() {                                                                                                  // 12057
    this.listenersToPut.length = 0;                                                                                    // 12058
  },                                                                                                                   // 12059
                                                                                                                       // 12060
  destructor: function() {                                                                                             // 12061
    this.reset();                                                                                                      // 12062
  }                                                                                                                    // 12063
});                                                                                                                    // 12064
                                                                                                                       // 12065
PooledClass.addPoolingTo(ReactPutListenerQueue);                                                                       // 12066
                                                                                                                       // 12067
module.exports = ReactPutListenerQueue;                                                                                // 12068
                                                                                                                       // 12069
},{"./PooledClass":23,"./ReactEventEmitter":48,"./mixInto":124}],66:[function(_dereq_,module,exports){                 // 12070
/**                                                                                                                    // 12071
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 12072
 *                                                                                                                     // 12073
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12074
 * you may not use this file except in compliance with the License.                                                    // 12075
 * You may obtain a copy of the License at                                                                             // 12076
 *                                                                                                                     // 12077
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12078
 *                                                                                                                     // 12079
 * Unless required by applicable law or agreed to in writing, software                                                 // 12080
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12081
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12082
 * See the License for the specific language governing permissions and                                                 // 12083
 * limitations under the License.                                                                                      // 12084
 *                                                                                                                     // 12085
 * @providesModule ReactReconcileTransaction                                                                           // 12086
 * @typechecks static-only                                                                                             // 12087
 */                                                                                                                    // 12088
                                                                                                                       // 12089
"use strict";                                                                                                          // 12090
                                                                                                                       // 12091
var PooledClass = _dereq_("./PooledClass");                                                                            // 12092
var ReactEventEmitter = _dereq_("./ReactEventEmitter");                                                                // 12093
var ReactInputSelection = _dereq_("./ReactInputSelection");                                                            // 12094
var ReactMountReady = _dereq_("./ReactMountReady");                                                                    // 12095
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");                                                        // 12096
var Transaction = _dereq_("./Transaction");                                                                            // 12097
                                                                                                                       // 12098
var mixInto = _dereq_("./mixInto");                                                                                    // 12099
                                                                                                                       // 12100
/**                                                                                                                    // 12101
 * Ensures that, when possible, the selection range (currently selected text                                           // 12102
 * input) is not disturbed by performing the transaction.                                                              // 12103
 */                                                                                                                    // 12104
var SELECTION_RESTORATION = {                                                                                          // 12105
  /**                                                                                                                  // 12106
   * @return {Selection} Selection information.                                                                        // 12107
   */                                                                                                                  // 12108
  initialize: ReactInputSelection.getSelectionInformation,                                                             // 12109
  /**                                                                                                                  // 12110
   * @param {Selection} sel Selection information returned from `initialize`.                                          // 12111
   */                                                                                                                  // 12112
  close: ReactInputSelection.restoreSelection                                                                          // 12113
};                                                                                                                     // 12114
                                                                                                                       // 12115
/**                                                                                                                    // 12116
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to                                        // 12117
 * high level DOM manipulations (like temporarily removing a text input from the                                       // 12118
 * DOM).                                                                                                               // 12119
 */                                                                                                                    // 12120
var EVENT_SUPPRESSION = {                                                                                              // 12121
  /**                                                                                                                  // 12122
   * @return {boolean} The enabled status of `ReactEventEmitter` before the                                            // 12123
   * reconciliation.                                                                                                   // 12124
   */                                                                                                                  // 12125
  initialize: function() {                                                                                             // 12126
    var currentlyEnabled = ReactEventEmitter.isEnabled();                                                              // 12127
    ReactEventEmitter.setEnabled(false);                                                                               // 12128
    return currentlyEnabled;                                                                                           // 12129
  },                                                                                                                   // 12130
                                                                                                                       // 12131
  /**                                                                                                                  // 12132
   * @param {boolean} previouslyEnabled Enabled status of `ReactEventEmitter`                                          // 12133
   *   before the reconciliation occured. `close` restores the previous value.                                         // 12134
   */                                                                                                                  // 12135
  close: function(previouslyEnabled) {                                                                                 // 12136
    ReactEventEmitter.setEnabled(previouslyEnabled);                                                                   // 12137
  }                                                                                                                    // 12138
};                                                                                                                     // 12139
                                                                                                                       // 12140
/**                                                                                                                    // 12141
 * Provides a `ReactMountReady` queue for collecting `onDOMReady` callbacks                                            // 12142
 * during the performing of the transaction.                                                                           // 12143
 */                                                                                                                    // 12144
var ON_DOM_READY_QUEUEING = {                                                                                          // 12145
  /**                                                                                                                  // 12146
   * Initializes the internal `onDOMReady` queue.                                                                      // 12147
   */                                                                                                                  // 12148
  initialize: function() {                                                                                             // 12149
    this.reactMountReady.reset();                                                                                      // 12150
  },                                                                                                                   // 12151
                                                                                                                       // 12152
  /**                                                                                                                  // 12153
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.                                               // 12154
   */                                                                                                                  // 12155
  close: function() {                                                                                                  // 12156
    this.reactMountReady.notifyAll();                                                                                  // 12157
  }                                                                                                                    // 12158
};                                                                                                                     // 12159
                                                                                                                       // 12160
var PUT_LISTENER_QUEUEING = {                                                                                          // 12161
  initialize: function() {                                                                                             // 12162
    this.putListenerQueue.reset();                                                                                     // 12163
  },                                                                                                                   // 12164
                                                                                                                       // 12165
  close: function() {                                                                                                  // 12166
    this.putListenerQueue.putListeners();                                                                              // 12167
  }                                                                                                                    // 12168
};                                                                                                                     // 12169
                                                                                                                       // 12170
/**                                                                                                                    // 12171
 * Executed within the scope of the `Transaction` instance. Consider these as                                          // 12172
 * being member methods, but with an implied ordering while being isolated from                                        // 12173
 * each other.                                                                                                         // 12174
 */                                                                                                                    // 12175
var TRANSACTION_WRAPPERS = [                                                                                           // 12176
  PUT_LISTENER_QUEUEING,                                                                                               // 12177
  SELECTION_RESTORATION,                                                                                               // 12178
  EVENT_SUPPRESSION,                                                                                                   // 12179
  ON_DOM_READY_QUEUEING                                                                                                // 12180
];                                                                                                                     // 12181
                                                                                                                       // 12182
/**                                                                                                                    // 12183
 * Currently:                                                                                                          // 12184
 * - The order that these are listed in the transaction is critical:                                                   // 12185
 * - Suppresses events.                                                                                                // 12186
 * - Restores selection range.                                                                                         // 12187
 *                                                                                                                     // 12188
 * Future:                                                                                                             // 12189
 * - Restore document/overflow scroll positions that were unintentionally                                              // 12190
 *   modified via DOM insertions above the top viewport boundary.                                                      // 12191
 * - Implement/integrate with customized constraint based layout system and keep                                       // 12192
 *   track of which dimensions must be remeasured.                                                                     // 12193
 *                                                                                                                     // 12194
 * @class ReactReconcileTransaction                                                                                    // 12195
 */                                                                                                                    // 12196
function ReactReconcileTransaction() {                                                                                 // 12197
  this.reinitializeTransaction();                                                                                      // 12198
  // Only server-side rendering really needs this option (see                                                          // 12199
  // `ReactServerRendering`), but server-side uses                                                                     // 12200
  // `ReactServerRenderingTransaction` instead. This option is here so that it's                                       // 12201
  // accessible and defaults to false when `ReactDOMComponent` and                                                     // 12202
  // `ReactTextComponent` checks it in `mountComponent`.`                                                              // 12203
  this.renderToStaticMarkup = false;                                                                                   // 12204
  this.reactMountReady = ReactMountReady.getPooled(null);                                                              // 12205
  this.putListenerQueue = ReactPutListenerQueue.getPooled();                                                           // 12206
}                                                                                                                      // 12207
                                                                                                                       // 12208
var Mixin = {                                                                                                          // 12209
  /**                                                                                                                  // 12210
   * @see Transaction                                                                                                  // 12211
   * @abstract                                                                                                         // 12212
   * @final                                                                                                            // 12213
   * @return {array<object>} List of operation wrap proceedures.                                                       // 12214
   *   TODO: convert to array<TransactionWrapper>                                                                      // 12215
   */                                                                                                                  // 12216
  getTransactionWrappers: function() {                                                                                 // 12217
    return TRANSACTION_WRAPPERS;                                                                                       // 12218
  },                                                                                                                   // 12219
                                                                                                                       // 12220
  /**                                                                                                                  // 12221
   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 12222
   *   TODO: convert to ReactMountReady                                                                                // 12223
   */                                                                                                                  // 12224
  getReactMountReady: function() {                                                                                     // 12225
    return this.reactMountReady;                                                                                       // 12226
  },                                                                                                                   // 12227
                                                                                                                       // 12228
  getPutListenerQueue: function() {                                                                                    // 12229
    return this.putListenerQueue;                                                                                      // 12230
  },                                                                                                                   // 12231
                                                                                                                       // 12232
  /**                                                                                                                  // 12233
   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 12234
   * instance to be resused.                                                                                           // 12235
   */                                                                                                                  // 12236
  destructor: function() {                                                                                             // 12237
    ReactMountReady.release(this.reactMountReady);                                                                     // 12238
    this.reactMountReady = null;                                                                                       // 12239
                                                                                                                       // 12240
    ReactPutListenerQueue.release(this.putListenerQueue);                                                              // 12241
    this.putListenerQueue = null;                                                                                      // 12242
  }                                                                                                                    // 12243
};                                                                                                                     // 12244
                                                                                                                       // 12245
                                                                                                                       // 12246
mixInto(ReactReconcileTransaction, Transaction.Mixin);                                                                 // 12247
mixInto(ReactReconcileTransaction, Mixin);                                                                             // 12248
                                                                                                                       // 12249
PooledClass.addPoolingTo(ReactReconcileTransaction);                                                                   // 12250
                                                                                                                       // 12251
module.exports = ReactReconcileTransaction;                                                                            // 12252
                                                                                                                       // 12253
},{"./PooledClass":23,"./ReactEventEmitter":48,"./ReactInputSelection":52,"./ReactMountReady":56,"./ReactPutListenerQueue":65,"./Transaction":85,"./mixInto":124}],67:[function(_dereq_,module,exports){
/**                                                                                                                    // 12255
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 12256
 *                                                                                                                     // 12257
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12258
 * you may not use this file except in compliance with the License.                                                    // 12259
 * You may obtain a copy of the License at                                                                             // 12260
 *                                                                                                                     // 12261
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12262
 *                                                                                                                     // 12263
 * Unless required by applicable law or agreed to in writing, software                                                 // 12264
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12265
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12266
 * See the License for the specific language governing permissions and                                                 // 12267
 * limitations under the License.                                                                                      // 12268
 *                                                                                                                     // 12269
 * @providesModule ReactRootIndex                                                                                      // 12270
 * @typechecks                                                                                                         // 12271
 */                                                                                                                    // 12272
                                                                                                                       // 12273
"use strict";                                                                                                          // 12274
                                                                                                                       // 12275
var ReactRootIndexInjection = {                                                                                        // 12276
  /**                                                                                                                  // 12277
   * @param {function} _createReactRootIndex                                                                           // 12278
   */                                                                                                                  // 12279
  injectCreateReactRootIndex: function(_createReactRootIndex) {                                                        // 12280
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;                                                       // 12281
  }                                                                                                                    // 12282
};                                                                                                                     // 12283
                                                                                                                       // 12284
var ReactRootIndex = {                                                                                                 // 12285
  createReactRootIndex: null,                                                                                          // 12286
  injection: ReactRootIndexInjection                                                                                   // 12287
};                                                                                                                     // 12288
                                                                                                                       // 12289
module.exports = ReactRootIndex;                                                                                       // 12290
                                                                                                                       // 12291
},{}],68:[function(_dereq_,module,exports){                                                                            // 12292
/**                                                                                                                    // 12293
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 12294
 *                                                                                                                     // 12295
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12296
 * you may not use this file except in compliance with the License.                                                    // 12297
 * You may obtain a copy of the License at                                                                             // 12298
 *                                                                                                                     // 12299
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12300
 *                                                                                                                     // 12301
 * Unless required by applicable law or agreed to in writing, software                                                 // 12302
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12303
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12304
 * See the License for the specific language governing permissions and                                                 // 12305
 * limitations under the License.                                                                                      // 12306
 *                                                                                                                     // 12307
 * @typechecks static-only                                                                                             // 12308
 * @providesModule ReactServerRendering                                                                                // 12309
 */                                                                                                                    // 12310
"use strict";                                                                                                          // 12311
                                                                                                                       // 12312
var ReactComponent = _dereq_("./ReactComponent");                                                                      // 12313
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");                                                          // 12314
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");                                                            // 12315
var ReactServerRenderingTransaction =                                                                                  // 12316
  _dereq_("./ReactServerRenderingTransaction");                                                                        // 12317
                                                                                                                       // 12318
var instantiateReactComponent = _dereq_("./instantiateReactComponent");                                                // 12319
var invariant = _dereq_("./invariant");                                                                                // 12320
                                                                                                                       // 12321
/**                                                                                                                    // 12322
 * @param {ReactComponent} component                                                                                   // 12323
 * @return {string} the HTML markup                                                                                    // 12324
 */                                                                                                                    // 12325
function renderComponentToString(component) {                                                                          // 12326
  ("production" !== "development" ? invariant(                                                                         // 12327
    ReactComponent.isValidComponent(component),                                                                        // 12328
    'renderComponentToString(): You must pass a valid ReactComponent.'                                                 // 12329
  ) : invariant(ReactComponent.isValidComponent(component)));                                                          // 12330
                                                                                                                       // 12331
  ("production" !== "development" ? invariant(                                                                         // 12332
    !(arguments.length === 2 && typeof arguments[1] === 'function'),                                                   // 12333
    'renderComponentToString(): This function became synchronous and now ' +                                           // 12334
    'returns the generated markup. Please remove the second parameter.'                                                // 12335
  ) : invariant(!(arguments.length === 2 && typeof arguments[1] === 'function')));                                     // 12336
                                                                                                                       // 12337
  var transaction;                                                                                                     // 12338
  try {                                                                                                                // 12339
    var id = ReactInstanceHandles.createReactRootID();                                                                 // 12340
    transaction = ReactServerRenderingTransaction.getPooled(false);                                                    // 12341
                                                                                                                       // 12342
    return transaction.perform(function() {                                                                            // 12343
      var componentInstance = instantiateReactComponent(component);                                                    // 12344
      var markup = componentInstance.mountComponent(id, transaction, 0);                                               // 12345
      return ReactMarkupChecksum.addChecksumToMarkup(markup);                                                          // 12346
    }, null);                                                                                                          // 12347
  } finally {                                                                                                          // 12348
    ReactServerRenderingTransaction.release(transaction);                                                              // 12349
  }                                                                                                                    // 12350
}                                                                                                                      // 12351
                                                                                                                       // 12352
/**                                                                                                                    // 12353
 * @param {ReactComponent} component                                                                                   // 12354
 * @return {string} the HTML markup, without the extra React ID and checksum                                           // 12355
* (for generating static pages)                                                                                        // 12356
 */                                                                                                                    // 12357
function renderComponentToStaticMarkup(component) {                                                                    // 12358
  ("production" !== "development" ? invariant(                                                                         // 12359
    ReactComponent.isValidComponent(component),                                                                        // 12360
    'renderComponentToStaticMarkup(): You must pass a valid ReactComponent.'                                           // 12361
  ) : invariant(ReactComponent.isValidComponent(component)));                                                          // 12362
                                                                                                                       // 12363
  var transaction;                                                                                                     // 12364
  try {                                                                                                                // 12365
    var id = ReactInstanceHandles.createReactRootID();                                                                 // 12366
    transaction = ReactServerRenderingTransaction.getPooled(true);                                                     // 12367
                                                                                                                       // 12368
    return transaction.perform(function() {                                                                            // 12369
      var componentInstance = instantiateReactComponent(component);                                                    // 12370
      return componentInstance.mountComponent(id, transaction, 0);                                                     // 12371
    }, null);                                                                                                          // 12372
  } finally {                                                                                                          // 12373
    ReactServerRenderingTransaction.release(transaction);                                                              // 12374
  }                                                                                                                    // 12375
}                                                                                                                      // 12376
                                                                                                                       // 12377
module.exports = {                                                                                                     // 12378
  renderComponentToString: renderComponentToString,                                                                    // 12379
  renderComponentToStaticMarkup: renderComponentToStaticMarkup                                                         // 12380
};                                                                                                                     // 12381
                                                                                                                       // 12382
},{"./ReactComponent":27,"./ReactInstanceHandles":53,"./ReactMarkupChecksum":54,"./ReactServerRenderingTransaction":69,"./instantiateReactComponent":111,"./invariant":112}],69:[function(_dereq_,module,exports){
/**                                                                                                                    // 12384
 * Copyright 2014 Facebook, Inc.                                                                                       // 12385
 *                                                                                                                     // 12386
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12387
 * you may not use this file except in compliance with the License.                                                    // 12388
 * You may obtain a copy of the License at                                                                             // 12389
 *                                                                                                                     // 12390
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12391
 *                                                                                                                     // 12392
 * Unless required by applicable law or agreed to in writing, software                                                 // 12393
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12394
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12395
 * See the License for the specific language governing permissions and                                                 // 12396
 * limitations under the License.                                                                                      // 12397
 *                                                                                                                     // 12398
 * @providesModule ReactServerRenderingTransaction                                                                     // 12399
 * @typechecks                                                                                                         // 12400
 */                                                                                                                    // 12401
                                                                                                                       // 12402
"use strict";                                                                                                          // 12403
                                                                                                                       // 12404
var PooledClass = _dereq_("./PooledClass");                                                                            // 12405
var ReactMountReady = _dereq_("./ReactMountReady");                                                                    // 12406
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");                                                        // 12407
var Transaction = _dereq_("./Transaction");                                                                            // 12408
                                                                                                                       // 12409
var emptyFunction = _dereq_("./emptyFunction");                                                                        // 12410
var mixInto = _dereq_("./mixInto");                                                                                    // 12411
                                                                                                                       // 12412
/**                                                                                                                    // 12413
 * Provides a `ReactMountReady` queue for collecting `onDOMReady` callbacks                                            // 12414
 * during the performing of the transaction.                                                                           // 12415
 */                                                                                                                    // 12416
var ON_DOM_READY_QUEUEING = {                                                                                          // 12417
  /**                                                                                                                  // 12418
   * Initializes the internal `onDOMReady` queue.                                                                      // 12419
   */                                                                                                                  // 12420
  initialize: function() {                                                                                             // 12421
    this.reactMountReady.reset();                                                                                      // 12422
  },                                                                                                                   // 12423
                                                                                                                       // 12424
  close: emptyFunction                                                                                                 // 12425
};                                                                                                                     // 12426
                                                                                                                       // 12427
var PUT_LISTENER_QUEUEING = {                                                                                          // 12428
  initialize: function() {                                                                                             // 12429
    this.putListenerQueue.reset();                                                                                     // 12430
  },                                                                                                                   // 12431
                                                                                                                       // 12432
  close: emptyFunction                                                                                                 // 12433
};                                                                                                                     // 12434
                                                                                                                       // 12435
/**                                                                                                                    // 12436
 * Executed within the scope of the `Transaction` instance. Consider these as                                          // 12437
 * being member methods, but with an implied ordering while being isolated from                                        // 12438
 * each other.                                                                                                         // 12439
 */                                                                                                                    // 12440
var TRANSACTION_WRAPPERS = [                                                                                           // 12441
  PUT_LISTENER_QUEUEING,                                                                                               // 12442
  ON_DOM_READY_QUEUEING                                                                                                // 12443
];                                                                                                                     // 12444
                                                                                                                       // 12445
/**                                                                                                                    // 12446
 * @class ReactServerRenderingTransaction                                                                              // 12447
 * @param {boolean} renderToStaticMarkup                                                                               // 12448
 */                                                                                                                    // 12449
function ReactServerRenderingTransaction(renderToStaticMarkup) {                                                       // 12450
  this.reinitializeTransaction();                                                                                      // 12451
  this.renderToStaticMarkup = renderToStaticMarkup;                                                                    // 12452
  this.reactMountReady = ReactMountReady.getPooled(null);                                                              // 12453
  this.putListenerQueue = ReactPutListenerQueue.getPooled();                                                           // 12454
}                                                                                                                      // 12455
                                                                                                                       // 12456
var Mixin = {                                                                                                          // 12457
  /**                                                                                                                  // 12458
   * @see Transaction                                                                                                  // 12459
   * @abstract                                                                                                         // 12460
   * @final                                                                                                            // 12461
   * @return {array} Empty list of operation wrap proceedures.                                                         // 12462
   */                                                                                                                  // 12463
  getTransactionWrappers: function() {                                                                                 // 12464
    return TRANSACTION_WRAPPERS;                                                                                       // 12465
  },                                                                                                                   // 12466
                                                                                                                       // 12467
  /**                                                                                                                  // 12468
   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 12469
   *   TODO: convert to ReactMountReady                                                                                // 12470
   */                                                                                                                  // 12471
  getReactMountReady: function() {                                                                                     // 12472
    return this.reactMountReady;                                                                                       // 12473
  },                                                                                                                   // 12474
                                                                                                                       // 12475
  getPutListenerQueue: function() {                                                                                    // 12476
    return this.putListenerQueue;                                                                                      // 12477
  },                                                                                                                   // 12478
                                                                                                                       // 12479
  /**                                                                                                                  // 12480
   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 12481
   * instance to be resused.                                                                                           // 12482
   */                                                                                                                  // 12483
  destructor: function() {                                                                                             // 12484
    ReactMountReady.release(this.reactMountReady);                                                                     // 12485
    this.reactMountReady = null;                                                                                       // 12486
                                                                                                                       // 12487
    ReactPutListenerQueue.release(this.putListenerQueue);                                                              // 12488
    this.putListenerQueue = null;                                                                                      // 12489
  }                                                                                                                    // 12490
};                                                                                                                     // 12491
                                                                                                                       // 12492
                                                                                                                       // 12493
mixInto(ReactServerRenderingTransaction, Transaction.Mixin);                                                           // 12494
mixInto(ReactServerRenderingTransaction, Mixin);                                                                       // 12495
                                                                                                                       // 12496
PooledClass.addPoolingTo(ReactServerRenderingTransaction);                                                             // 12497
                                                                                                                       // 12498
module.exports = ReactServerRenderingTransaction;                                                                      // 12499
                                                                                                                       // 12500
},{"./PooledClass":23,"./ReactMountReady":56,"./ReactPutListenerQueue":65,"./Transaction":85,"./emptyFunction":96,"./mixInto":124}],70:[function(_dereq_,module,exports){
/**                                                                                                                    // 12502
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 12503
 *                                                                                                                     // 12504
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12505
 * you may not use this file except in compliance with the License.                                                    // 12506
 * You may obtain a copy of the License at                                                                             // 12507
 *                                                                                                                     // 12508
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12509
 *                                                                                                                     // 12510
 * Unless required by applicable law or agreed to in writing, software                                                 // 12511
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12512
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12513
 * See the License for the specific language governing permissions and                                                 // 12514
 * limitations under the License.                                                                                      // 12515
 *                                                                                                                     // 12516
 * @providesModule ReactTextComponent                                                                                  // 12517
 * @typechecks static-only                                                                                             // 12518
 */                                                                                                                    // 12519
                                                                                                                       // 12520
"use strict";                                                                                                          // 12521
                                                                                                                       // 12522
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");                                                        // 12523
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");                                              // 12524
var ReactComponent = _dereq_("./ReactComponent");                                                                      // 12525
                                                                                                                       // 12526
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");                                                          // 12527
var mixInto = _dereq_("./mixInto");                                                                                    // 12528
                                                                                                                       // 12529
/**                                                                                                                    // 12530
 * Text nodes violate a couple assumptions that React makes about components:                                          // 12531
 *                                                                                                                     // 12532
 *  - When mounting text into the DOM, adjacent text nodes are merged.                                                 // 12533
 *  - Text nodes cannot be assigned a React root ID.                                                                   // 12534
 *                                                                                                                     // 12535
 * This component is used to wrap strings in elements so that they can undergo                                         // 12536
 * the same reconciliation that is applied to elements.                                                                // 12537
 *                                                                                                                     // 12538
 * TODO: Investigate representing React components in the DOM with text nodes.                                         // 12539
 *                                                                                                                     // 12540
 * @class ReactTextComponent                                                                                           // 12541
 * @extends ReactComponent                                                                                             // 12542
 * @internal                                                                                                           // 12543
 */                                                                                                                    // 12544
var ReactTextComponent = function(initialText) {                                                                       // 12545
  this.construct({text: initialText});                                                                                 // 12546
};                                                                                                                     // 12547
                                                                                                                       // 12548
/**                                                                                                                    // 12549
 * Used to clone the text descriptor object before it's mounted.                                                       // 12550
 *                                                                                                                     // 12551
 * @param {object} props                                                                                               // 12552
 * @return {object} A new ReactTextComponent instance                                                                  // 12553
 */                                                                                                                    // 12554
ReactTextComponent.ConvenienceConstructor = function(props) {                                                          // 12555
  return new ReactTextComponent(props.text);                                                                           // 12556
};                                                                                                                     // 12557
                                                                                                                       // 12558
mixInto(ReactTextComponent, ReactComponent.Mixin);                                                                     // 12559
mixInto(ReactTextComponent, ReactBrowserComponentMixin);                                                               // 12560
mixInto(ReactTextComponent, {                                                                                          // 12561
                                                                                                                       // 12562
  /**                                                                                                                  // 12563
   * Creates the markup for this text node. This node is not intended to have                                          // 12564
   * any features besides containing text content.                                                                     // 12565
   *                                                                                                                   // 12566
   * @param {string} rootID DOM ID of the root node.                                                                   // 12567
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 12568
   * @param {number} mountDepth number of components in the owner hierarchy                                            // 12569
   * @return {string} Markup for this text node.                                                                       // 12570
   * @internal                                                                                                         // 12571
   */                                                                                                                  // 12572
  mountComponent: function(rootID, transaction, mountDepth) {                                                          // 12573
    ReactComponent.Mixin.mountComponent.call(                                                                          // 12574
      this,                                                                                                            // 12575
      rootID,                                                                                                          // 12576
      transaction,                                                                                                     // 12577
      mountDepth                                                                                                       // 12578
    );                                                                                                                 // 12579
                                                                                                                       // 12580
    var escapedText = escapeTextForBrowser(this.props.text);                                                           // 12581
                                                                                                                       // 12582
    if (transaction.renderToStaticMarkup) {                                                                            // 12583
      // Normally we'd wrap this in a `span` for the reasons stated above, but                                         // 12584
      // since this is a situation where React won't take over (static pages),                                         // 12585
      // we can simply return the text as it is.                                                                       // 12586
      return escapedText;                                                                                              // 12587
    }                                                                                                                  // 12588
                                                                                                                       // 12589
    return (                                                                                                           // 12590
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +                                               // 12591
        escapedText +                                                                                                  // 12592
      '</span>'                                                                                                        // 12593
    );                                                                                                                 // 12594
  },                                                                                                                   // 12595
                                                                                                                       // 12596
  /**                                                                                                                  // 12597
   * Updates this component by updating the text content.                                                              // 12598
   *                                                                                                                   // 12599
   * @param {object} nextComponent Contains the next text content.                                                     // 12600
   * @param {ReactReconcileTransaction} transaction                                                                    // 12601
   * @internal                                                                                                         // 12602
   */                                                                                                                  // 12603
  receiveComponent: function(nextComponent, transaction) {                                                             // 12604
    var nextProps = nextComponent.props;                                                                               // 12605
    if (nextProps.text !== this.props.text) {                                                                          // 12606
      this.props.text = nextProps.text;                                                                                // 12607
      ReactComponent.BackendIDOperations.updateTextContentByID(                                                        // 12608
        this._rootNodeID,                                                                                              // 12609
        nextProps.text                                                                                                 // 12610
      );                                                                                                               // 12611
    }                                                                                                                  // 12612
  }                                                                                                                    // 12613
                                                                                                                       // 12614
});                                                                                                                    // 12615
                                                                                                                       // 12616
// Expose the constructor on itself and the prototype for consistency with other                                       // 12617
// descriptors.                                                                                                        // 12618
ReactTextComponent.type = ReactTextComponent;                                                                          // 12619
ReactTextComponent.prototype.type = ReactTextComponent;                                                                // 12620
                                                                                                                       // 12621
module.exports = ReactTextComponent;                                                                                   // 12622
                                                                                                                       // 12623
},{"./DOMPropertyOperations":9,"./ReactBrowserComponentMixin":25,"./ReactComponent":27,"./escapeTextForBrowser":98,"./mixInto":124}],71:[function(_dereq_,module,exports){
/**                                                                                                                    // 12625
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 12626
 *                                                                                                                     // 12627
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12628
 * you may not use this file except in compliance with the License.                                                    // 12629
 * You may obtain a copy of the License at                                                                             // 12630
 *                                                                                                                     // 12631
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12632
 *                                                                                                                     // 12633
 * Unless required by applicable law or agreed to in writing, software                                                 // 12634
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12635
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12636
 * See the License for the specific language governing permissions and                                                 // 12637
 * limitations under the License.                                                                                      // 12638
 *                                                                                                                     // 12639
 * @providesModule ReactUpdates                                                                                        // 12640
 */                                                                                                                    // 12641
                                                                                                                       // 12642
"use strict";                                                                                                          // 12643
                                                                                                                       // 12644
var ReactPerf = _dereq_("./ReactPerf");                                                                                // 12645
                                                                                                                       // 12646
var invariant = _dereq_("./invariant");                                                                                // 12647
                                                                                                                       // 12648
var dirtyComponents = [];                                                                                              // 12649
                                                                                                                       // 12650
var batchingStrategy = null;                                                                                           // 12651
                                                                                                                       // 12652
function ensureBatchingStrategy() {                                                                                    // 12653
  ("production" !== "development" ? invariant(batchingStrategy, 'ReactUpdates: must inject a batching strategy') : invariant(batchingStrategy));
}                                                                                                                      // 12655
                                                                                                                       // 12656
function batchedUpdates(callback, param) {                                                                             // 12657
  ensureBatchingStrategy();                                                                                            // 12658
  batchingStrategy.batchedUpdates(callback, param);                                                                    // 12659
}                                                                                                                      // 12660
                                                                                                                       // 12661
/**                                                                                                                    // 12662
 * Array comparator for ReactComponents by owner depth                                                                 // 12663
 *                                                                                                                     // 12664
 * @param {ReactComponent} c1 first component you're comparing                                                         // 12665
 * @param {ReactComponent} c2 second component you're comparing                                                        // 12666
 * @return {number} Return value usable by Array.prototype.sort().                                                     // 12667
 */                                                                                                                    // 12668
function mountDepthComparator(c1, c2) {                                                                                // 12669
  return c1._mountDepth - c2._mountDepth;                                                                              // 12670
}                                                                                                                      // 12671
                                                                                                                       // 12672
function runBatchedUpdates() {                                                                                         // 12673
  // Since reconciling a component higher in the owner hierarchy usually (not                                          // 12674
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile                                         // 12675
  // them before their children by sorting the array.                                                                  // 12676
                                                                                                                       // 12677
  dirtyComponents.sort(mountDepthComparator);                                                                          // 12678
                                                                                                                       // 12679
  for (var i = 0; i < dirtyComponents.length; i++) {                                                                   // 12680
    // If a component is unmounted before pending changes apply, ignore them                                           // 12681
    // TODO: Queue unmounts in the same list to avoid this happening at all                                            // 12682
    var component = dirtyComponents[i];                                                                                // 12683
    if (component.isMounted()) {                                                                                       // 12684
      // If performUpdateIfNecessary happens to enqueue any new updates, we                                            // 12685
      // shouldn't execute the callbacks until the next render happens, so                                             // 12686
      // stash the callbacks first                                                                                     // 12687
      var callbacks = component._pendingCallbacks;                                                                     // 12688
      component._pendingCallbacks = null;                                                                              // 12689
      component.performUpdateIfNecessary();                                                                            // 12690
      if (callbacks) {                                                                                                 // 12691
        for (var j = 0; j < callbacks.length; j++) {                                                                   // 12692
          callbacks[j].call(component);                                                                                // 12693
        }                                                                                                              // 12694
      }                                                                                                                // 12695
    }                                                                                                                  // 12696
  }                                                                                                                    // 12697
}                                                                                                                      // 12698
                                                                                                                       // 12699
function clearDirtyComponents() {                                                                                      // 12700
  dirtyComponents.length = 0;                                                                                          // 12701
}                                                                                                                      // 12702
                                                                                                                       // 12703
var flushBatchedUpdates = ReactPerf.measure(                                                                           // 12704
  'ReactUpdates',                                                                                                      // 12705
  'flushBatchedUpdates',                                                                                               // 12706
  function() {                                                                                                         // 12707
    // Run these in separate functions so the JIT can optimize                                                         // 12708
    try {                                                                                                              // 12709
      runBatchedUpdates();                                                                                             // 12710
    } finally {                                                                                                        // 12711
      clearDirtyComponents();                                                                                          // 12712
    }                                                                                                                  // 12713
  }                                                                                                                    // 12714
);                                                                                                                     // 12715
                                                                                                                       // 12716
/**                                                                                                                    // 12717
 * Mark a component as needing a rerender, adding an optional callback to a                                            // 12718
 * list of functions which will be executed once the rerender occurs.                                                  // 12719
 */                                                                                                                    // 12720
function enqueueUpdate(component, callback) {                                                                          // 12721
  ("production" !== "development" ? invariant(                                                                         // 12722
    !callback || typeof callback === "function",                                                                       // 12723
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +                                                    // 12724
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +                                             // 12725
    'isn\'t callable.'                                                                                                 // 12726
  ) : invariant(!callback || typeof callback === "function"));                                                         // 12727
  ensureBatchingStrategy();                                                                                            // 12728
                                                                                                                       // 12729
  if (!batchingStrategy.isBatchingUpdates) {                                                                           // 12730
    component.performUpdateIfNecessary();                                                                              // 12731
    callback && callback.call(component);                                                                              // 12732
    return;                                                                                                            // 12733
  }                                                                                                                    // 12734
                                                                                                                       // 12735
  dirtyComponents.push(component);                                                                                     // 12736
                                                                                                                       // 12737
  if (callback) {                                                                                                      // 12738
    if (component._pendingCallbacks) {                                                                                 // 12739
      component._pendingCallbacks.push(callback);                                                                      // 12740
    } else {                                                                                                           // 12741
      component._pendingCallbacks = [callback];                                                                        // 12742
    }                                                                                                                  // 12743
  }                                                                                                                    // 12744
}                                                                                                                      // 12745
                                                                                                                       // 12746
var ReactUpdatesInjection = {                                                                                          // 12747
  injectBatchingStrategy: function(_batchingStrategy) {                                                                // 12748
    ("production" !== "development" ? invariant(                                                                       // 12749
      _batchingStrategy,                                                                                               // 12750
      'ReactUpdates: must provide a batching strategy'                                                                 // 12751
    ) : invariant(_batchingStrategy));                                                                                 // 12752
    ("production" !== "development" ? invariant(                                                                       // 12753
      typeof _batchingStrategy.batchedUpdates === 'function',                                                          // 12754
      'ReactUpdates: must provide a batchedUpdates() function'                                                         // 12755
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));                                            // 12756
    ("production" !== "development" ? invariant(                                                                       // 12757
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',                                                        // 12758
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'                                              // 12759
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));                                          // 12760
    batchingStrategy = _batchingStrategy;                                                                              // 12761
  }                                                                                                                    // 12762
};                                                                                                                     // 12763
                                                                                                                       // 12764
var ReactUpdates = {                                                                                                   // 12765
  batchedUpdates: batchedUpdates,                                                                                      // 12766
  enqueueUpdate: enqueueUpdate,                                                                                        // 12767
  flushBatchedUpdates: flushBatchedUpdates,                                                                            // 12768
  injection: ReactUpdatesInjection                                                                                     // 12769
};                                                                                                                     // 12770
                                                                                                                       // 12771
module.exports = ReactUpdates;                                                                                         // 12772
                                                                                                                       // 12773
},{"./ReactPerf":60,"./invariant":112}],72:[function(_dereq_,module,exports){                                          // 12774
/**                                                                                                                    // 12775
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 12776
 *                                                                                                                     // 12777
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12778
 * you may not use this file except in compliance with the License.                                                    // 12779
 * You may obtain a copy of the License at                                                                             // 12780
 *                                                                                                                     // 12781
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12782
 *                                                                                                                     // 12783
 * Unless required by applicable law or agreed to in writing, software                                                 // 12784
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12785
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12786
 * See the License for the specific language governing permissions and                                                 // 12787
 * limitations under the License.                                                                                      // 12788
 *                                                                                                                     // 12789
 * @providesModule SelectEventPlugin                                                                                   // 12790
 */                                                                                                                    // 12791
                                                                                                                       // 12792
"use strict";                                                                                                          // 12793
                                                                                                                       // 12794
var EventConstants = _dereq_("./EventConstants");                                                                      // 12795
var EventPropagators = _dereq_("./EventPropagators");                                                                  // 12796
var ReactInputSelection = _dereq_("./ReactInputSelection");                                                            // 12797
var SyntheticEvent = _dereq_("./SyntheticEvent");                                                                      // 12798
                                                                                                                       // 12799
var getActiveElement = _dereq_("./getActiveElement");                                                                  // 12800
var isTextInputElement = _dereq_("./isTextInputElement");                                                              // 12801
var keyOf = _dereq_("./keyOf");                                                                                        // 12802
var shallowEqual = _dereq_("./shallowEqual");                                                                          // 12803
                                                                                                                       // 12804
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 12805
                                                                                                                       // 12806
var eventTypes = {                                                                                                     // 12807
  select: {                                                                                                            // 12808
    phasedRegistrationNames: {                                                                                         // 12809
      bubbled: keyOf({onSelect: null}),                                                                                // 12810
      captured: keyOf({onSelectCapture: null})                                                                         // 12811
    },                                                                                                                 // 12812
    dependencies: [                                                                                                    // 12813
      topLevelTypes.topBlur,                                                                                           // 12814
      topLevelTypes.topContextMenu,                                                                                    // 12815
      topLevelTypes.topFocus,                                                                                          // 12816
      topLevelTypes.topKeyDown,                                                                                        // 12817
      topLevelTypes.topMouseDown,                                                                                      // 12818
      topLevelTypes.topMouseUp,                                                                                        // 12819
      topLevelTypes.topSelectionChange                                                                                 // 12820
    ]                                                                                                                  // 12821
  }                                                                                                                    // 12822
};                                                                                                                     // 12823
                                                                                                                       // 12824
var activeElement = null;                                                                                              // 12825
var activeElementID = null;                                                                                            // 12826
var lastSelection = null;                                                                                              // 12827
var mouseDown = false;                                                                                                 // 12828
                                                                                                                       // 12829
/**                                                                                                                    // 12830
 * Get an object which is a unique representation of the current selection.                                            // 12831
 *                                                                                                                     // 12832
 * The return value will not be consistent across nodes or browsers, but                                               // 12833
 * two identical selections on the same node will return identical objects.                                            // 12834
 *                                                                                                                     // 12835
 * @param {DOMElement} node                                                                                            // 12836
 * @param {object}                                                                                                     // 12837
 */                                                                                                                    // 12838
function getSelection(node) {                                                                                          // 12839
  if ('selectionStart' in node &&                                                                                      // 12840
      ReactInputSelection.hasSelectionCapabilities(node)) {                                                            // 12841
    return {                                                                                                           // 12842
      start: node.selectionStart,                                                                                      // 12843
      end: node.selectionEnd                                                                                           // 12844
    };                                                                                                                 // 12845
  } else if (document.selection) {                                                                                     // 12846
    var range = document.selection.createRange();                                                                      // 12847
    return {                                                                                                           // 12848
      parentElement: range.parentElement(),                                                                            // 12849
      text: range.text,                                                                                                // 12850
      top: range.boundingTop,                                                                                          // 12851
      left: range.boundingLeft                                                                                         // 12852
    };                                                                                                                 // 12853
  } else {                                                                                                             // 12854
    var selection = window.getSelection();                                                                             // 12855
    return {                                                                                                           // 12856
      anchorNode: selection.anchorNode,                                                                                // 12857
      anchorOffset: selection.anchorOffset,                                                                            // 12858
      focusNode: selection.focusNode,                                                                                  // 12859
      focusOffset: selection.focusOffset                                                                               // 12860
    };                                                                                                                 // 12861
  }                                                                                                                    // 12862
}                                                                                                                      // 12863
                                                                                                                       // 12864
/**                                                                                                                    // 12865
 * Poll selection to see whether it's changed.                                                                         // 12866
 *                                                                                                                     // 12867
 * @param {object} nativeEvent                                                                                         // 12868
 * @return {?SyntheticEvent}                                                                                           // 12869
 */                                                                                                                    // 12870
function constructSelectEvent(nativeEvent) {                                                                           // 12871
  // Ensure we have the right element, and that the user is not dragging a                                             // 12872
  // selection (this matches native `select` event behavior). In HTML5, select                                         // 12873
  // fires only on input and textarea thus if there's no focused element we                                            // 12874
  // won't dispatch.                                                                                                   // 12875
  if (mouseDown ||                                                                                                     // 12876
      activeElement == null ||                                                                                         // 12877
      activeElement != getActiveElement()) {                                                                           // 12878
    return;                                                                                                            // 12879
  }                                                                                                                    // 12880
                                                                                                                       // 12881
  // Only fire when selection has actually changed.                                                                    // 12882
  var currentSelection = getSelection(activeElement);                                                                  // 12883
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {                                              // 12884
    lastSelection = currentSelection;                                                                                  // 12885
                                                                                                                       // 12886
    var syntheticEvent = SyntheticEvent.getPooled(                                                                     // 12887
      eventTypes.select,                                                                                               // 12888
      activeElementID,                                                                                                 // 12889
      nativeEvent                                                                                                      // 12890
    );                                                                                                                 // 12891
                                                                                                                       // 12892
    syntheticEvent.type = 'select';                                                                                    // 12893
    syntheticEvent.target = activeElement;                                                                             // 12894
                                                                                                                       // 12895
    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);                                                     // 12896
                                                                                                                       // 12897
    return syntheticEvent;                                                                                             // 12898
  }                                                                                                                    // 12899
}                                                                                                                      // 12900
                                                                                                                       // 12901
/**                                                                                                                    // 12902
 * This plugin creates an `onSelect` event that normalizes select events                                               // 12903
 * across form elements.                                                                                               // 12904
 *                                                                                                                     // 12905
 * Supported elements are:                                                                                             // 12906
 * - input (see `isTextInputElement`)                                                                                  // 12907
 * - textarea                                                                                                          // 12908
 * - contentEditable                                                                                                   // 12909
 *                                                                                                                     // 12910
 * This differs from native browser implementations in the following ways:                                             // 12911
 * - Fires on contentEditable fields as well as inputs.                                                                // 12912
 * - Fires for collapsed selection.                                                                                    // 12913
 * - Fires after user input.                                                                                           // 12914
 */                                                                                                                    // 12915
var SelectEventPlugin = {                                                                                              // 12916
                                                                                                                       // 12917
  eventTypes: eventTypes,                                                                                              // 12918
                                                                                                                       // 12919
  /**                                                                                                                  // 12920
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 12921
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 12922
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 12923
   * @param {object} nativeEvent Native browser event.                                                                 // 12924
   * @return {*} An accumulation of synthetic events.                                                                  // 12925
   * @see {EventPluginHub.extractEvents}                                                                               // 12926
   */                                                                                                                  // 12927
  extractEvents: function(                                                                                             // 12928
      topLevelType,                                                                                                    // 12929
      topLevelTarget,                                                                                                  // 12930
      topLevelTargetID,                                                                                                // 12931
      nativeEvent) {                                                                                                   // 12932
                                                                                                                       // 12933
    switch (topLevelType) {                                                                                            // 12934
      // Track the input node that has focus.                                                                          // 12935
      case topLevelTypes.topFocus:                                                                                     // 12936
        if (isTextInputElement(topLevelTarget) ||                                                                      // 12937
            topLevelTarget.contentEditable === 'true') {                                                               // 12938
          activeElement = topLevelTarget;                                                                              // 12939
          activeElementID = topLevelTargetID;                                                                          // 12940
          lastSelection = null;                                                                                        // 12941
        }                                                                                                              // 12942
        break;                                                                                                         // 12943
      case topLevelTypes.topBlur:                                                                                      // 12944
        activeElement = null;                                                                                          // 12945
        activeElementID = null;                                                                                        // 12946
        lastSelection = null;                                                                                          // 12947
        break;                                                                                                         // 12948
                                                                                                                       // 12949
      // Don't fire the event while the user is dragging. This matches the                                             // 12950
      // semantics of the native select event.                                                                         // 12951
      case topLevelTypes.topMouseDown:                                                                                 // 12952
        mouseDown = true;                                                                                              // 12953
        break;                                                                                                         // 12954
      case topLevelTypes.topContextMenu:                                                                               // 12955
      case topLevelTypes.topMouseUp:                                                                                   // 12956
        mouseDown = false;                                                                                             // 12957
        return constructSelectEvent(nativeEvent);                                                                      // 12958
                                                                                                                       // 12959
      // Chrome and IE fire non-standard event when selection is changed (and                                          // 12960
      // sometimes when it hasn't).                                                                                    // 12961
      // Firefox doesn't support selectionchange, so check selection status                                            // 12962
      // after each key entry. The selection changes after keydown and before                                          // 12963
      // keyup, but we check on keydown as well in the case of holding down a                                          // 12964
      // key, when multiple keydown events are fired but only one keyup is.                                            // 12965
      case topLevelTypes.topSelectionChange:                                                                           // 12966
      case topLevelTypes.topKeyDown:                                                                                   // 12967
      case topLevelTypes.topKeyUp:                                                                                     // 12968
        return constructSelectEvent(nativeEvent);                                                                      // 12969
    }                                                                                                                  // 12970
  }                                                                                                                    // 12971
};                                                                                                                     // 12972
                                                                                                                       // 12973
module.exports = SelectEventPlugin;                                                                                    // 12974
                                                                                                                       // 12975
},{"./EventConstants":14,"./EventPropagators":19,"./ReactInputSelection":52,"./SyntheticEvent":78,"./getActiveElement":102,"./isTextInputElement":115,"./keyOf":119,"./shallowEqual":130}],73:[function(_dereq_,module,exports){
/**                                                                                                                    // 12977
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 12978
 *                                                                                                                     // 12979
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12980
 * you may not use this file except in compliance with the License.                                                    // 12981
 * You may obtain a copy of the License at                                                                             // 12982
 *                                                                                                                     // 12983
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12984
 *                                                                                                                     // 12985
 * Unless required by applicable law or agreed to in writing, software                                                 // 12986
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12987
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12988
 * See the License for the specific language governing permissions and                                                 // 12989
 * limitations under the License.                                                                                      // 12990
 *                                                                                                                     // 12991
 * @providesModule ServerReactRootIndex                                                                                // 12992
 * @typechecks                                                                                                         // 12993
 */                                                                                                                    // 12994
                                                                                                                       // 12995
"use strict";                                                                                                          // 12996
                                                                                                                       // 12997
/**                                                                                                                    // 12998
 * Size of the reactRoot ID space. We generate random numbers for React root                                           // 12999
 * IDs and if there's a collision the events and DOM update system will                                                // 13000
 * get confused. In the future we need a way to generate GUIDs but for                                                 // 13001
 * now this will work on a smaller scale.                                                                              // 13002
 */                                                                                                                    // 13003
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);                                                                          // 13004
                                                                                                                       // 13005
var ServerReactRootIndex = {                                                                                           // 13006
  createReactRootIndex: function() {                                                                                   // 13007
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);                                                          // 13008
  }                                                                                                                    // 13009
};                                                                                                                     // 13010
                                                                                                                       // 13011
module.exports = ServerReactRootIndex;                                                                                 // 13012
                                                                                                                       // 13013
},{}],74:[function(_dereq_,module,exports){                                                                            // 13014
/**                                                                                                                    // 13015
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 13016
 *                                                                                                                     // 13017
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13018
 * you may not use this file except in compliance with the License.                                                    // 13019
 * You may obtain a copy of the License at                                                                             // 13020
 *                                                                                                                     // 13021
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13022
 *                                                                                                                     // 13023
 * Unless required by applicable law or agreed to in writing, software                                                 // 13024
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13025
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13026
 * See the License for the specific language governing permissions and                                                 // 13027
 * limitations under the License.                                                                                      // 13028
 *                                                                                                                     // 13029
 * @providesModule SimpleEventPlugin                                                                                   // 13030
 */                                                                                                                    // 13031
                                                                                                                       // 13032
"use strict";                                                                                                          // 13033
                                                                                                                       // 13034
var EventConstants = _dereq_("./EventConstants");                                                                      // 13035
var EventPluginUtils = _dereq_("./EventPluginUtils");                                                                  // 13036
var EventPropagators = _dereq_("./EventPropagators");                                                                  // 13037
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");                                                    // 13038
var SyntheticEvent = _dereq_("./SyntheticEvent");                                                                      // 13039
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");                                                            // 13040
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");                                                      // 13041
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");                                                            // 13042
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");                                                              // 13043
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");                                                            // 13044
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");                                                                  // 13045
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");                                                            // 13046
                                                                                                                       // 13047
var invariant = _dereq_("./invariant");                                                                                // 13048
var keyOf = _dereq_("./keyOf");                                                                                        // 13049
                                                                                                                       // 13050
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 13051
                                                                                                                       // 13052
var eventTypes = {                                                                                                     // 13053
  blur: {                                                                                                              // 13054
    phasedRegistrationNames: {                                                                                         // 13055
      bubbled: keyOf({onBlur: true}),                                                                                  // 13056
      captured: keyOf({onBlurCapture: true})                                                                           // 13057
    }                                                                                                                  // 13058
  },                                                                                                                   // 13059
  click: {                                                                                                             // 13060
    phasedRegistrationNames: {                                                                                         // 13061
      bubbled: keyOf({onClick: true}),                                                                                 // 13062
      captured: keyOf({onClickCapture: true})                                                                          // 13063
    }                                                                                                                  // 13064
  },                                                                                                                   // 13065
  contextMenu: {                                                                                                       // 13066
    phasedRegistrationNames: {                                                                                         // 13067
      bubbled: keyOf({onContextMenu: true}),                                                                           // 13068
      captured: keyOf({onContextMenuCapture: true})                                                                    // 13069
    }                                                                                                                  // 13070
  },                                                                                                                   // 13071
  copy: {                                                                                                              // 13072
    phasedRegistrationNames: {                                                                                         // 13073
      bubbled: keyOf({onCopy: true}),                                                                                  // 13074
      captured: keyOf({onCopyCapture: true})                                                                           // 13075
    }                                                                                                                  // 13076
  },                                                                                                                   // 13077
  cut: {                                                                                                               // 13078
    phasedRegistrationNames: {                                                                                         // 13079
      bubbled: keyOf({onCut: true}),                                                                                   // 13080
      captured: keyOf({onCutCapture: true})                                                                            // 13081
    }                                                                                                                  // 13082
  },                                                                                                                   // 13083
  doubleClick: {                                                                                                       // 13084
    phasedRegistrationNames: {                                                                                         // 13085
      bubbled: keyOf({onDoubleClick: true}),                                                                           // 13086
      captured: keyOf({onDoubleClickCapture: true})                                                                    // 13087
    }                                                                                                                  // 13088
  },                                                                                                                   // 13089
  drag: {                                                                                                              // 13090
    phasedRegistrationNames: {                                                                                         // 13091
      bubbled: keyOf({onDrag: true}),                                                                                  // 13092
      captured: keyOf({onDragCapture: true})                                                                           // 13093
    }                                                                                                                  // 13094
  },                                                                                                                   // 13095
  dragEnd: {                                                                                                           // 13096
    phasedRegistrationNames: {                                                                                         // 13097
      bubbled: keyOf({onDragEnd: true}),                                                                               // 13098
      captured: keyOf({onDragEndCapture: true})                                                                        // 13099
    }                                                                                                                  // 13100
  },                                                                                                                   // 13101
  dragEnter: {                                                                                                         // 13102
    phasedRegistrationNames: {                                                                                         // 13103
      bubbled: keyOf({onDragEnter: true}),                                                                             // 13104
      captured: keyOf({onDragEnterCapture: true})                                                                      // 13105
    }                                                                                                                  // 13106
  },                                                                                                                   // 13107
  dragExit: {                                                                                                          // 13108
    phasedRegistrationNames: {                                                                                         // 13109
      bubbled: keyOf({onDragExit: true}),                                                                              // 13110
      captured: keyOf({onDragExitCapture: true})                                                                       // 13111
    }                                                                                                                  // 13112
  },                                                                                                                   // 13113
  dragLeave: {                                                                                                         // 13114
    phasedRegistrationNames: {                                                                                         // 13115
      bubbled: keyOf({onDragLeave: true}),                                                                             // 13116
      captured: keyOf({onDragLeaveCapture: true})                                                                      // 13117
    }                                                                                                                  // 13118
  },                                                                                                                   // 13119
  dragOver: {                                                                                                          // 13120
    phasedRegistrationNames: {                                                                                         // 13121
      bubbled: keyOf({onDragOver: true}),                                                                              // 13122
      captured: keyOf({onDragOverCapture: true})                                                                       // 13123
    }                                                                                                                  // 13124
  },                                                                                                                   // 13125
  dragStart: {                                                                                                         // 13126
    phasedRegistrationNames: {                                                                                         // 13127
      bubbled: keyOf({onDragStart: true}),                                                                             // 13128
      captured: keyOf({onDragStartCapture: true})                                                                      // 13129
    }                                                                                                                  // 13130
  },                                                                                                                   // 13131
  drop: {                                                                                                              // 13132
    phasedRegistrationNames: {                                                                                         // 13133
      bubbled: keyOf({onDrop: true}),                                                                                  // 13134
      captured: keyOf({onDropCapture: true})                                                                           // 13135
    }                                                                                                                  // 13136
  },                                                                                                                   // 13137
  focus: {                                                                                                             // 13138
    phasedRegistrationNames: {                                                                                         // 13139
      bubbled: keyOf({onFocus: true}),                                                                                 // 13140
      captured: keyOf({onFocusCapture: true})                                                                          // 13141
    }                                                                                                                  // 13142
  },                                                                                                                   // 13143
  input: {                                                                                                             // 13144
    phasedRegistrationNames: {                                                                                         // 13145
      bubbled: keyOf({onInput: true}),                                                                                 // 13146
      captured: keyOf({onInputCapture: true})                                                                          // 13147
    }                                                                                                                  // 13148
  },                                                                                                                   // 13149
  keyDown: {                                                                                                           // 13150
    phasedRegistrationNames: {                                                                                         // 13151
      bubbled: keyOf({onKeyDown: true}),                                                                               // 13152
      captured: keyOf({onKeyDownCapture: true})                                                                        // 13153
    }                                                                                                                  // 13154
  },                                                                                                                   // 13155
  keyPress: {                                                                                                          // 13156
    phasedRegistrationNames: {                                                                                         // 13157
      bubbled: keyOf({onKeyPress: true}),                                                                              // 13158
      captured: keyOf({onKeyPressCapture: true})                                                                       // 13159
    }                                                                                                                  // 13160
  },                                                                                                                   // 13161
  keyUp: {                                                                                                             // 13162
    phasedRegistrationNames: {                                                                                         // 13163
      bubbled: keyOf({onKeyUp: true}),                                                                                 // 13164
      captured: keyOf({onKeyUpCapture: true})                                                                          // 13165
    }                                                                                                                  // 13166
  },                                                                                                                   // 13167
  load: {                                                                                                              // 13168
    phasedRegistrationNames: {                                                                                         // 13169
      bubbled: keyOf({onLoad: true}),                                                                                  // 13170
      captured: keyOf({onLoadCapture: true})                                                                           // 13171
    }                                                                                                                  // 13172
  },                                                                                                                   // 13173
  error: {                                                                                                             // 13174
    phasedRegistrationNames: {                                                                                         // 13175
      bubbled: keyOf({onError: true}),                                                                                 // 13176
      captured: keyOf({onErrorCapture: true})                                                                          // 13177
    }                                                                                                                  // 13178
  },                                                                                                                   // 13179
  // Note: We do not allow listening to mouseOver events. Instead, use the                                             // 13180
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.                                                     // 13181
  mouseDown: {                                                                                                         // 13182
    phasedRegistrationNames: {                                                                                         // 13183
      bubbled: keyOf({onMouseDown: true}),                                                                             // 13184
      captured: keyOf({onMouseDownCapture: true})                                                                      // 13185
    }                                                                                                                  // 13186
  },                                                                                                                   // 13187
  mouseMove: {                                                                                                         // 13188
    phasedRegistrationNames: {                                                                                         // 13189
      bubbled: keyOf({onMouseMove: true}),                                                                             // 13190
      captured: keyOf({onMouseMoveCapture: true})                                                                      // 13191
    }                                                                                                                  // 13192
  },                                                                                                                   // 13193
  mouseOut: {                                                                                                          // 13194
    phasedRegistrationNames: {                                                                                         // 13195
      bubbled: keyOf({onMouseOut: true}),                                                                              // 13196
      captured: keyOf({onMouseOutCapture: true})                                                                       // 13197
    }                                                                                                                  // 13198
  },                                                                                                                   // 13199
  mouseOver: {                                                                                                         // 13200
    phasedRegistrationNames: {                                                                                         // 13201
      bubbled: keyOf({onMouseOver: true}),                                                                             // 13202
      captured: keyOf({onMouseOverCapture: true})                                                                      // 13203
    }                                                                                                                  // 13204
  },                                                                                                                   // 13205
  mouseUp: {                                                                                                           // 13206
    phasedRegistrationNames: {                                                                                         // 13207
      bubbled: keyOf({onMouseUp: true}),                                                                               // 13208
      captured: keyOf({onMouseUpCapture: true})                                                                        // 13209
    }                                                                                                                  // 13210
  },                                                                                                                   // 13211
  paste: {                                                                                                             // 13212
    phasedRegistrationNames: {                                                                                         // 13213
      bubbled: keyOf({onPaste: true}),                                                                                 // 13214
      captured: keyOf({onPasteCapture: true})                                                                          // 13215
    }                                                                                                                  // 13216
  },                                                                                                                   // 13217
  reset: {                                                                                                             // 13218
    phasedRegistrationNames: {                                                                                         // 13219
      bubbled: keyOf({onReset: true}),                                                                                 // 13220
      captured: keyOf({onResetCapture: true})                                                                          // 13221
    }                                                                                                                  // 13222
  },                                                                                                                   // 13223
  scroll: {                                                                                                            // 13224
    phasedRegistrationNames: {                                                                                         // 13225
      bubbled: keyOf({onScroll: true}),                                                                                // 13226
      captured: keyOf({onScrollCapture: true})                                                                         // 13227
    }                                                                                                                  // 13228
  },                                                                                                                   // 13229
  submit: {                                                                                                            // 13230
    phasedRegistrationNames: {                                                                                         // 13231
      bubbled: keyOf({onSubmit: true}),                                                                                // 13232
      captured: keyOf({onSubmitCapture: true})                                                                         // 13233
    }                                                                                                                  // 13234
  },                                                                                                                   // 13235
  touchCancel: {                                                                                                       // 13236
    phasedRegistrationNames: {                                                                                         // 13237
      bubbled: keyOf({onTouchCancel: true}),                                                                           // 13238
      captured: keyOf({onTouchCancelCapture: true})                                                                    // 13239
    }                                                                                                                  // 13240
  },                                                                                                                   // 13241
  touchEnd: {                                                                                                          // 13242
    phasedRegistrationNames: {                                                                                         // 13243
      bubbled: keyOf({onTouchEnd: true}),                                                                              // 13244
      captured: keyOf({onTouchEndCapture: true})                                                                       // 13245
    }                                                                                                                  // 13246
  },                                                                                                                   // 13247
  touchMove: {                                                                                                         // 13248
    phasedRegistrationNames: {                                                                                         // 13249
      bubbled: keyOf({onTouchMove: true}),                                                                             // 13250
      captured: keyOf({onTouchMoveCapture: true})                                                                      // 13251
    }                                                                                                                  // 13252
  },                                                                                                                   // 13253
  touchStart: {                                                                                                        // 13254
    phasedRegistrationNames: {                                                                                         // 13255
      bubbled: keyOf({onTouchStart: true}),                                                                            // 13256
      captured: keyOf({onTouchStartCapture: true})                                                                     // 13257
    }                                                                                                                  // 13258
  },                                                                                                                   // 13259
  wheel: {                                                                                                             // 13260
    phasedRegistrationNames: {                                                                                         // 13261
      bubbled: keyOf({onWheel: true}),                                                                                 // 13262
      captured: keyOf({onWheelCapture: true})                                                                          // 13263
    }                                                                                                                  // 13264
  }                                                                                                                    // 13265
};                                                                                                                     // 13266
                                                                                                                       // 13267
var topLevelEventsToDispatchConfig = {                                                                                 // 13268
  topBlur:        eventTypes.blur,                                                                                     // 13269
  topClick:       eventTypes.click,                                                                                    // 13270
  topContextMenu: eventTypes.contextMenu,                                                                              // 13271
  topCopy:        eventTypes.copy,                                                                                     // 13272
  topCut:         eventTypes.cut,                                                                                      // 13273
  topDoubleClick: eventTypes.doubleClick,                                                                              // 13274
  topDrag:        eventTypes.drag,                                                                                     // 13275
  topDragEnd:     eventTypes.dragEnd,                                                                                  // 13276
  topDragEnter:   eventTypes.dragEnter,                                                                                // 13277
  topDragExit:    eventTypes.dragExit,                                                                                 // 13278
  topDragLeave:   eventTypes.dragLeave,                                                                                // 13279
  topDragOver:    eventTypes.dragOver,                                                                                 // 13280
  topDragStart:   eventTypes.dragStart,                                                                                // 13281
  topDrop:        eventTypes.drop,                                                                                     // 13282
  topError:       eventTypes.error,                                                                                    // 13283
  topFocus:       eventTypes.focus,                                                                                    // 13284
  topInput:       eventTypes.input,                                                                                    // 13285
  topKeyDown:     eventTypes.keyDown,                                                                                  // 13286
  topKeyPress:    eventTypes.keyPress,                                                                                 // 13287
  topKeyUp:       eventTypes.keyUp,                                                                                    // 13288
  topLoad:        eventTypes.load,                                                                                     // 13289
  topMouseDown:   eventTypes.mouseDown,                                                                                // 13290
  topMouseMove:   eventTypes.mouseMove,                                                                                // 13291
  topMouseOut:    eventTypes.mouseOut,                                                                                 // 13292
  topMouseOver:   eventTypes.mouseOver,                                                                                // 13293
  topMouseUp:     eventTypes.mouseUp,                                                                                  // 13294
  topPaste:       eventTypes.paste,                                                                                    // 13295
  topReset:       eventTypes.reset,                                                                                    // 13296
  topScroll:      eventTypes.scroll,                                                                                   // 13297
  topSubmit:      eventTypes.submit,                                                                                   // 13298
  topTouchCancel: eventTypes.touchCancel,                                                                              // 13299
  topTouchEnd:    eventTypes.touchEnd,                                                                                 // 13300
  topTouchMove:   eventTypes.touchMove,                                                                                // 13301
  topTouchStart:  eventTypes.touchStart,                                                                               // 13302
  topWheel:       eventTypes.wheel                                                                                     // 13303
};                                                                                                                     // 13304
                                                                                                                       // 13305
for (var topLevelType in topLevelEventsToDispatchConfig) {                                                             // 13306
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];                                          // 13307
}                                                                                                                      // 13308
                                                                                                                       // 13309
var SimpleEventPlugin = {                                                                                              // 13310
                                                                                                                       // 13311
  eventTypes: eventTypes,                                                                                              // 13312
                                                                                                                       // 13313
  /**                                                                                                                  // 13314
   * Same as the default implementation, except cancels the event when return                                          // 13315
   * value is false.                                                                                                   // 13316
   *                                                                                                                   // 13317
   * @param {object} Event to be dispatched.                                                                           // 13318
   * @param {function} Application-level callback.                                                                     // 13319
   * @param {string} domID DOM ID to pass to the callback.                                                             // 13320
   */                                                                                                                  // 13321
  executeDispatch: function(event, listener, domID) {                                                                  // 13322
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);                                        // 13323
    if (returnValue === false) {                                                                                       // 13324
      event.stopPropagation();                                                                                         // 13325
      event.preventDefault();                                                                                          // 13326
    }                                                                                                                  // 13327
  },                                                                                                                   // 13328
                                                                                                                       // 13329
  /**                                                                                                                  // 13330
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 13331
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 13332
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 13333
   * @param {object} nativeEvent Native browser event.                                                                 // 13334
   * @return {*} An accumulation of synthetic events.                                                                  // 13335
   * @see {EventPluginHub.extractEvents}                                                                               // 13336
   */                                                                                                                  // 13337
  extractEvents: function(                                                                                             // 13338
      topLevelType,                                                                                                    // 13339
      topLevelTarget,                                                                                                  // 13340
      topLevelTargetID,                                                                                                // 13341
      nativeEvent) {                                                                                                   // 13342
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];                                                 // 13343
    if (!dispatchConfig) {                                                                                             // 13344
      return null;                                                                                                     // 13345
    }                                                                                                                  // 13346
    var EventConstructor;                                                                                              // 13347
    switch (topLevelType) {                                                                                            // 13348
      case topLevelTypes.topInput:                                                                                     // 13349
      case topLevelTypes.topLoad:                                                                                      // 13350
      case topLevelTypes.topError:                                                                                     // 13351
      case topLevelTypes.topReset:                                                                                     // 13352
      case topLevelTypes.topSubmit:                                                                                    // 13353
        // HTML Events                                                                                                 // 13354
        // @see http://www.w3.org/TR/html5/index.html#events-0                                                         // 13355
        EventConstructor = SyntheticEvent;                                                                             // 13356
        break;                                                                                                         // 13357
      case topLevelTypes.topKeyDown:                                                                                   // 13358
      case topLevelTypes.topKeyPress:                                                                                  // 13359
      case topLevelTypes.topKeyUp:                                                                                     // 13360
        EventConstructor = SyntheticKeyboardEvent;                                                                     // 13361
        break;                                                                                                         // 13362
      case topLevelTypes.topBlur:                                                                                      // 13363
      case topLevelTypes.topFocus:                                                                                     // 13364
        EventConstructor = SyntheticFocusEvent;                                                                        // 13365
        break;                                                                                                         // 13366
      case topLevelTypes.topClick:                                                                                     // 13367
        // Firefox creates a click event on right mouse clicks. This removes the                                       // 13368
        // unwanted click events.                                                                                      // 13369
        if (nativeEvent.button === 2) {                                                                                // 13370
          return null;                                                                                                 // 13371
        }                                                                                                              // 13372
        /* falls through */                                                                                            // 13373
      case topLevelTypes.topContextMenu:                                                                               // 13374
      case topLevelTypes.topDoubleClick:                                                                               // 13375
      case topLevelTypes.topMouseDown:                                                                                 // 13376
      case topLevelTypes.topMouseMove:                                                                                 // 13377
      case topLevelTypes.topMouseOut:                                                                                  // 13378
      case topLevelTypes.topMouseOver:                                                                                 // 13379
      case topLevelTypes.topMouseUp:                                                                                   // 13380
        EventConstructor = SyntheticMouseEvent;                                                                        // 13381
        break;                                                                                                         // 13382
      case topLevelTypes.topDrag:                                                                                      // 13383
      case topLevelTypes.topDragEnd:                                                                                   // 13384
      case topLevelTypes.topDragEnter:                                                                                 // 13385
      case topLevelTypes.topDragExit:                                                                                  // 13386
      case topLevelTypes.topDragLeave:                                                                                 // 13387
      case topLevelTypes.topDragOver:                                                                                  // 13388
      case topLevelTypes.topDragStart:                                                                                 // 13389
      case topLevelTypes.topDrop:                                                                                      // 13390
        EventConstructor = SyntheticDragEvent;                                                                         // 13391
        break;                                                                                                         // 13392
      case topLevelTypes.topTouchCancel:                                                                               // 13393
      case topLevelTypes.topTouchEnd:                                                                                  // 13394
      case topLevelTypes.topTouchMove:                                                                                 // 13395
      case topLevelTypes.topTouchStart:                                                                                // 13396
        EventConstructor = SyntheticTouchEvent;                                                                        // 13397
        break;                                                                                                         // 13398
      case topLevelTypes.topScroll:                                                                                    // 13399
        EventConstructor = SyntheticUIEvent;                                                                           // 13400
        break;                                                                                                         // 13401
      case topLevelTypes.topWheel:                                                                                     // 13402
        EventConstructor = SyntheticWheelEvent;                                                                        // 13403
        break;                                                                                                         // 13404
      case topLevelTypes.topCopy:                                                                                      // 13405
      case topLevelTypes.topCut:                                                                                       // 13406
      case topLevelTypes.topPaste:                                                                                     // 13407
        EventConstructor = SyntheticClipboardEvent;                                                                    // 13408
        break;                                                                                                         // 13409
    }                                                                                                                  // 13410
    ("production" !== "development" ? invariant(                                                                       // 13411
      EventConstructor,                                                                                                // 13412
      'SimpleEventPlugin: Unhandled event type, `%s`.',                                                                // 13413
      topLevelType                                                                                                     // 13414
    ) : invariant(EventConstructor));                                                                                  // 13415
    var event = EventConstructor.getPooled(                                                                            // 13416
      dispatchConfig,                                                                                                  // 13417
      topLevelTargetID,                                                                                                // 13418
      nativeEvent                                                                                                      // 13419
    );                                                                                                                 // 13420
    EventPropagators.accumulateTwoPhaseDispatches(event);                                                              // 13421
    return event;                                                                                                      // 13422
  }                                                                                                                    // 13423
                                                                                                                       // 13424
};                                                                                                                     // 13425
                                                                                                                       // 13426
module.exports = SimpleEventPlugin;                                                                                    // 13427
                                                                                                                       // 13428
},{"./EventConstants":14,"./EventPluginUtils":18,"./EventPropagators":19,"./SyntheticClipboardEvent":75,"./SyntheticDragEvent":77,"./SyntheticEvent":78,"./SyntheticFocusEvent":79,"./SyntheticKeyboardEvent":80,"./SyntheticMouseEvent":81,"./SyntheticTouchEvent":82,"./SyntheticUIEvent":83,"./SyntheticWheelEvent":84,"./invariant":112,"./keyOf":119}],75:[function(_dereq_,module,exports){
/**                                                                                                                    // 13430
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 13431
 *                                                                                                                     // 13432
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13433
 * you may not use this file except in compliance with the License.                                                    // 13434
 * You may obtain a copy of the License at                                                                             // 13435
 *                                                                                                                     // 13436
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13437
 *                                                                                                                     // 13438
 * Unless required by applicable law or agreed to in writing, software                                                 // 13439
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13440
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13441
 * See the License for the specific language governing permissions and                                                 // 13442
 * limitations under the License.                                                                                      // 13443
 *                                                                                                                     // 13444
 * @providesModule SyntheticClipboardEvent                                                                             // 13445
 * @typechecks static-only                                                                                             // 13446
 */                                                                                                                    // 13447
                                                                                                                       // 13448
"use strict";                                                                                                          // 13449
                                                                                                                       // 13450
var SyntheticEvent = _dereq_("./SyntheticEvent");                                                                      // 13451
                                                                                                                       // 13452
/**                                                                                                                    // 13453
 * @interface Event                                                                                                    // 13454
 * @see http://www.w3.org/TR/clipboard-apis/                                                                           // 13455
 */                                                                                                                    // 13456
var ClipboardEventInterface = {                                                                                        // 13457
  clipboardData: function(event) {                                                                                     // 13458
    return (                                                                                                           // 13459
      'clipboardData' in event ?                                                                                       // 13460
        event.clipboardData :                                                                                          // 13461
        window.clipboardData                                                                                           // 13462
    );                                                                                                                 // 13463
  }                                                                                                                    // 13464
};                                                                                                                     // 13465
                                                                                                                       // 13466
/**                                                                                                                    // 13467
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 13468
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 13469
 * @param {object} nativeEvent Native browser event.                                                                   // 13470
 * @extends {SyntheticUIEvent}                                                                                         // 13471
 */                                                                                                                    // 13472
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                        // 13473
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 13474
}                                                                                                                      // 13475
                                                                                                                       // 13476
SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);                                         // 13477
                                                                                                                       // 13478
module.exports = SyntheticClipboardEvent;                                                                              // 13479
                                                                                                                       // 13480
                                                                                                                       // 13481
},{"./SyntheticEvent":78}],76:[function(_dereq_,module,exports){                                                       // 13482
/**                                                                                                                    // 13483
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 13484
 *                                                                                                                     // 13485
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13486
 * you may not use this file except in compliance with the License.                                                    // 13487
 * You may obtain a copy of the License at                                                                             // 13488
 *                                                                                                                     // 13489
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13490
 *                                                                                                                     // 13491
 * Unless required by applicable law or agreed to in writing, software                                                 // 13492
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13493
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13494
 * See the License for the specific language governing permissions and                                                 // 13495
 * limitations under the License.                                                                                      // 13496
 *                                                                                                                     // 13497
 * @providesModule SyntheticCompositionEvent                                                                           // 13498
 * @typechecks static-only                                                                                             // 13499
 */                                                                                                                    // 13500
                                                                                                                       // 13501
"use strict";                                                                                                          // 13502
                                                                                                                       // 13503
var SyntheticEvent = _dereq_("./SyntheticEvent");                                                                      // 13504
                                                                                                                       // 13505
/**                                                                                                                    // 13506
 * @interface Event                                                                                                    // 13507
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents                                              // 13508
 */                                                                                                                    // 13509
var CompositionEventInterface = {                                                                                      // 13510
  data: null                                                                                                           // 13511
};                                                                                                                     // 13512
                                                                                                                       // 13513
/**                                                                                                                    // 13514
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 13515
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 13516
 * @param {object} nativeEvent Native browser event.                                                                   // 13517
 * @extends {SyntheticUIEvent}                                                                                         // 13518
 */                                                                                                                    // 13519
function SyntheticCompositionEvent(                                                                                    // 13520
  dispatchConfig,                                                                                                      // 13521
  dispatchMarker,                                                                                                      // 13522
  nativeEvent) {                                                                                                       // 13523
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 13524
}                                                                                                                      // 13525
                                                                                                                       // 13526
SyntheticEvent.augmentClass(                                                                                           // 13527
  SyntheticCompositionEvent,                                                                                           // 13528
  CompositionEventInterface                                                                                            // 13529
);                                                                                                                     // 13530
                                                                                                                       // 13531
module.exports = SyntheticCompositionEvent;                                                                            // 13532
                                                                                                                       // 13533
                                                                                                                       // 13534
},{"./SyntheticEvent":78}],77:[function(_dereq_,module,exports){                                                       // 13535
/**                                                                                                                    // 13536
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 13537
 *                                                                                                                     // 13538
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13539
 * you may not use this file except in compliance with the License.                                                    // 13540
 * You may obtain a copy of the License at                                                                             // 13541
 *                                                                                                                     // 13542
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13543
 *                                                                                                                     // 13544
 * Unless required by applicable law or agreed to in writing, software                                                 // 13545
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13546
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13547
 * See the License for the specific language governing permissions and                                                 // 13548
 * limitations under the License.                                                                                      // 13549
 *                                                                                                                     // 13550
 * @providesModule SyntheticDragEvent                                                                                  // 13551
 * @typechecks static-only                                                                                             // 13552
 */                                                                                                                    // 13553
                                                                                                                       // 13554
"use strict";                                                                                                          // 13555
                                                                                                                       // 13556
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");                                                            // 13557
                                                                                                                       // 13558
/**                                                                                                                    // 13559
 * @interface DragEvent                                                                                                // 13560
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 13561
 */                                                                                                                    // 13562
var DragEventInterface = {                                                                                             // 13563
  dataTransfer: null                                                                                                   // 13564
};                                                                                                                     // 13565
                                                                                                                       // 13566
/**                                                                                                                    // 13567
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 13568
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 13569
 * @param {object} nativeEvent Native browser event.                                                                   // 13570
 * @extends {SyntheticUIEvent}                                                                                         // 13571
 */                                                                                                                    // 13572
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                             // 13573
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                         // 13574
}                                                                                                                      // 13575
                                                                                                                       // 13576
SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);                                              // 13577
                                                                                                                       // 13578
module.exports = SyntheticDragEvent;                                                                                   // 13579
                                                                                                                       // 13580
},{"./SyntheticMouseEvent":81}],78:[function(_dereq_,module,exports){                                                  // 13581
/**                                                                                                                    // 13582
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 13583
 *                                                                                                                     // 13584
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13585
 * you may not use this file except in compliance with the License.                                                    // 13586
 * You may obtain a copy of the License at                                                                             // 13587
 *                                                                                                                     // 13588
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13589
 *                                                                                                                     // 13590
 * Unless required by applicable law or agreed to in writing, software                                                 // 13591
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13592
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13593
 * See the License for the specific language governing permissions and                                                 // 13594
 * limitations under the License.                                                                                      // 13595
 *                                                                                                                     // 13596
 * @providesModule SyntheticEvent                                                                                      // 13597
 * @typechecks static-only                                                                                             // 13598
 */                                                                                                                    // 13599
                                                                                                                       // 13600
"use strict";                                                                                                          // 13601
                                                                                                                       // 13602
var PooledClass = _dereq_("./PooledClass");                                                                            // 13603
                                                                                                                       // 13604
var emptyFunction = _dereq_("./emptyFunction");                                                                        // 13605
var getEventTarget = _dereq_("./getEventTarget");                                                                      // 13606
var merge = _dereq_("./merge");                                                                                        // 13607
var mergeInto = _dereq_("./mergeInto");                                                                                // 13608
                                                                                                                       // 13609
/**                                                                                                                    // 13610
 * @interface Event                                                                                                    // 13611
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 13612
 */                                                                                                                    // 13613
var EventInterface = {                                                                                                 // 13614
  type: null,                                                                                                          // 13615
  target: getEventTarget,                                                                                              // 13616
  // currentTarget is set when dispatching; no use in copying it here                                                  // 13617
  currentTarget: emptyFunction.thatReturnsNull,                                                                        // 13618
  eventPhase: null,                                                                                                    // 13619
  bubbles: null,                                                                                                       // 13620
  cancelable: null,                                                                                                    // 13621
  timeStamp: function(event) {                                                                                         // 13622
    return event.timeStamp || Date.now();                                                                              // 13623
  },                                                                                                                   // 13624
  defaultPrevented: null,                                                                                              // 13625
  isTrusted: null                                                                                                      // 13626
};                                                                                                                     // 13627
                                                                                                                       // 13628
/**                                                                                                                    // 13629
 * Synthetic events are dispatched by event plugins, typically in response to a                                        // 13630
 * top-level event delegation handler.                                                                                 // 13631
 *                                                                                                                     // 13632
 * These systems should generally use pooling to reduce the frequency of garbage                                       // 13633
 * collection. The system should check `isPersistent` to determine whether the                                         // 13634
 * event should be released into the pool after being dispatched. Users that                                           // 13635
 * need a persisted event should invoke `persist`.                                                                     // 13636
 *                                                                                                                     // 13637
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by                                           // 13638
 * normalizing browser quirks. Subclasses do not necessarily have to implement a                                       // 13639
 * DOM interface; custom application-specific events can also subclass this.                                           // 13640
 *                                                                                                                     // 13641
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 13642
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 13643
 * @param {object} nativeEvent Native browser event.                                                                   // 13644
 */                                                                                                                    // 13645
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                                 // 13646
  this.dispatchConfig = dispatchConfig;                                                                                // 13647
  this.dispatchMarker = dispatchMarker;                                                                                // 13648
  this.nativeEvent = nativeEvent;                                                                                      // 13649
                                                                                                                       // 13650
  var Interface = this.constructor.Interface;                                                                          // 13651
  for (var propName in Interface) {                                                                                    // 13652
    if (!Interface.hasOwnProperty(propName)) {                                                                         // 13653
      continue;                                                                                                        // 13654
    }                                                                                                                  // 13655
    var normalize = Interface[propName];                                                                               // 13656
    if (normalize) {                                                                                                   // 13657
      this[propName] = normalize(nativeEvent);                                                                         // 13658
    } else {                                                                                                           // 13659
      this[propName] = nativeEvent[propName];                                                                          // 13660
    }                                                                                                                  // 13661
  }                                                                                                                    // 13662
                                                                                                                       // 13663
  var defaultPrevented = nativeEvent.defaultPrevented != null ?                                                        // 13664
    nativeEvent.defaultPrevented :                                                                                     // 13665
    nativeEvent.returnValue === false;                                                                                 // 13666
  if (defaultPrevented) {                                                                                              // 13667
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 13668
  } else {                                                                                                             // 13669
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;                                                          // 13670
  }                                                                                                                    // 13671
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;                                                          // 13672
}                                                                                                                      // 13673
                                                                                                                       // 13674
mergeInto(SyntheticEvent.prototype, {                                                                                  // 13675
                                                                                                                       // 13676
  preventDefault: function() {                                                                                         // 13677
    this.defaultPrevented = true;                                                                                      // 13678
    var event = this.nativeEvent;                                                                                      // 13679
    event.preventDefault ? event.preventDefault() : event.returnValue = false;                                         // 13680
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 13681
  },                                                                                                                   // 13682
                                                                                                                       // 13683
  stopPropagation: function() {                                                                                        // 13684
    var event = this.nativeEvent;                                                                                      // 13685
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;                                       // 13686
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;                                                         // 13687
  },                                                                                                                   // 13688
                                                                                                                       // 13689
  /**                                                                                                                  // 13690
   * We release all dispatched `SyntheticEvent`s after each event loop, adding                                         // 13691
   * them back into the pool. This allows a way to hold onto a reference that                                          // 13692
   * won't be added back into the pool.                                                                                // 13693
   */                                                                                                                  // 13694
  persist: function() {                                                                                                // 13695
    this.isPersistent = emptyFunction.thatReturnsTrue;                                                                 // 13696
  },                                                                                                                   // 13697
                                                                                                                       // 13698
  /**                                                                                                                  // 13699
   * Checks if this event should be released back into the pool.                                                       // 13700
   *                                                                                                                   // 13701
   * @return {boolean} True if this should not be released, false otherwise.                                           // 13702
   */                                                                                                                  // 13703
  isPersistent: emptyFunction.thatReturnsFalse,                                                                        // 13704
                                                                                                                       // 13705
  /**                                                                                                                  // 13706
   * `PooledClass` looks for `destructor` on each instance it releases.                                                // 13707
   */                                                                                                                  // 13708
  destructor: function() {                                                                                             // 13709
    var Interface = this.constructor.Interface;                                                                        // 13710
    for (var propName in Interface) {                                                                                  // 13711
      this[propName] = null;                                                                                           // 13712
    }                                                                                                                  // 13713
    this.dispatchConfig = null;                                                                                        // 13714
    this.dispatchMarker = null;                                                                                        // 13715
    this.nativeEvent = null;                                                                                           // 13716
  }                                                                                                                    // 13717
                                                                                                                       // 13718
});                                                                                                                    // 13719
                                                                                                                       // 13720
SyntheticEvent.Interface = EventInterface;                                                                             // 13721
                                                                                                                       // 13722
/**                                                                                                                    // 13723
 * Helper to reduce boilerplate when creating subclasses.                                                              // 13724
 *                                                                                                                     // 13725
 * @param {function} Class                                                                                             // 13726
 * @param {?object} Interface                                                                                          // 13727
 */                                                                                                                    // 13728
SyntheticEvent.augmentClass = function(Class, Interface) {                                                             // 13729
  var Super = this;                                                                                                    // 13730
                                                                                                                       // 13731
  var prototype = Object.create(Super.prototype);                                                                      // 13732
  mergeInto(prototype, Class.prototype);                                                                               // 13733
  Class.prototype = prototype;                                                                                         // 13734
  Class.prototype.constructor = Class;                                                                                 // 13735
                                                                                                                       // 13736
  Class.Interface = merge(Super.Interface, Interface);                                                                 // 13737
  Class.augmentClass = Super.augmentClass;                                                                             // 13738
                                                                                                                       // 13739
  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);                                                    // 13740
};                                                                                                                     // 13741
                                                                                                                       // 13742
PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);                                             // 13743
                                                                                                                       // 13744
module.exports = SyntheticEvent;                                                                                       // 13745
                                                                                                                       // 13746
},{"./PooledClass":23,"./emptyFunction":96,"./getEventTarget":104,"./merge":121,"./mergeInto":123}],79:[function(_dereq_,module,exports){
/**                                                                                                                    // 13748
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 13749
 *                                                                                                                     // 13750
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13751
 * you may not use this file except in compliance with the License.                                                    // 13752
 * You may obtain a copy of the License at                                                                             // 13753
 *                                                                                                                     // 13754
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13755
 *                                                                                                                     // 13756
 * Unless required by applicable law or agreed to in writing, software                                                 // 13757
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13758
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13759
 * See the License for the specific language governing permissions and                                                 // 13760
 * limitations under the License.                                                                                      // 13761
 *                                                                                                                     // 13762
 * @providesModule SyntheticFocusEvent                                                                                 // 13763
 * @typechecks static-only                                                                                             // 13764
 */                                                                                                                    // 13765
                                                                                                                       // 13766
"use strict";                                                                                                          // 13767
                                                                                                                       // 13768
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");                                                                  // 13769
                                                                                                                       // 13770
/**                                                                                                                    // 13771
 * @interface FocusEvent                                                                                               // 13772
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 13773
 */                                                                                                                    // 13774
var FocusEventInterface = {                                                                                            // 13775
  relatedTarget: null                                                                                                  // 13776
};                                                                                                                     // 13777
                                                                                                                       // 13778
/**                                                                                                                    // 13779
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 13780
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 13781
 * @param {object} nativeEvent Native browser event.                                                                   // 13782
 * @extends {SyntheticUIEvent}                                                                                         // 13783
 */                                                                                                                    // 13784
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 13785
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 13786
}                                                                                                                      // 13787
                                                                                                                       // 13788
SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);                                               // 13789
                                                                                                                       // 13790
module.exports = SyntheticFocusEvent;                                                                                  // 13791
                                                                                                                       // 13792
},{"./SyntheticUIEvent":83}],80:[function(_dereq_,module,exports){                                                     // 13793
/**                                                                                                                    // 13794
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 13795
 *                                                                                                                     // 13796
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13797
 * you may not use this file except in compliance with the License.                                                    // 13798
 * You may obtain a copy of the License at                                                                             // 13799
 *                                                                                                                     // 13800
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13801
 *                                                                                                                     // 13802
 * Unless required by applicable law or agreed to in writing, software                                                 // 13803
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13804
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13805
 * See the License for the specific language governing permissions and                                                 // 13806
 * limitations under the License.                                                                                      // 13807
 *                                                                                                                     // 13808
 * @providesModule SyntheticKeyboardEvent                                                                              // 13809
 * @typechecks static-only                                                                                             // 13810
 */                                                                                                                    // 13811
                                                                                                                       // 13812
"use strict";                                                                                                          // 13813
                                                                                                                       // 13814
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");                                                                  // 13815
                                                                                                                       // 13816
var getEventKey = _dereq_("./getEventKey");                                                                            // 13817
                                                                                                                       // 13818
/**                                                                                                                    // 13819
 * @interface KeyboardEvent                                                                                            // 13820
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 13821
 */                                                                                                                    // 13822
var KeyboardEventInterface = {                                                                                         // 13823
  key: getEventKey,                                                                                                    // 13824
  location: null,                                                                                                      // 13825
  ctrlKey: null,                                                                                                       // 13826
  shiftKey: null,                                                                                                      // 13827
  altKey: null,                                                                                                        // 13828
  metaKey: null,                                                                                                       // 13829
  repeat: null,                                                                                                        // 13830
  locale: null,                                                                                                        // 13831
  // Legacy Interface                                                                                                  // 13832
  'char': null,                                                                                                        // 13833
  charCode: null,                                                                                                      // 13834
  keyCode: null,                                                                                                       // 13835
  which: null                                                                                                          // 13836
};                                                                                                                     // 13837
                                                                                                                       // 13838
/**                                                                                                                    // 13839
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 13840
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 13841
 * @param {object} nativeEvent Native browser event.                                                                   // 13842
 * @extends {SyntheticUIEvent}                                                                                         // 13843
 */                                                                                                                    // 13844
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                         // 13845
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 13846
}                                                                                                                      // 13847
                                                                                                                       // 13848
SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);                                         // 13849
                                                                                                                       // 13850
module.exports = SyntheticKeyboardEvent;                                                                               // 13851
                                                                                                                       // 13852
},{"./SyntheticUIEvent":83,"./getEventKey":103}],81:[function(_dereq_,module,exports){                                 // 13853
/**                                                                                                                    // 13854
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 13855
 *                                                                                                                     // 13856
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13857
 * you may not use this file except in compliance with the License.                                                    // 13858
 * You may obtain a copy of the License at                                                                             // 13859
 *                                                                                                                     // 13860
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13861
 *                                                                                                                     // 13862
 * Unless required by applicable law or agreed to in writing, software                                                 // 13863
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13864
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13865
 * See the License for the specific language governing permissions and                                                 // 13866
 * limitations under the License.                                                                                      // 13867
 *                                                                                                                     // 13868
 * @providesModule SyntheticMouseEvent                                                                                 // 13869
 * @typechecks static-only                                                                                             // 13870
 */                                                                                                                    // 13871
                                                                                                                       // 13872
"use strict";                                                                                                          // 13873
                                                                                                                       // 13874
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");                                                                  // 13875
var ViewportMetrics = _dereq_("./ViewportMetrics");                                                                    // 13876
                                                                                                                       // 13877
/**                                                                                                                    // 13878
 * @interface MouseEvent                                                                                               // 13879
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 13880
 */                                                                                                                    // 13881
var MouseEventInterface = {                                                                                            // 13882
  screenX: null,                                                                                                       // 13883
  screenY: null,                                                                                                       // 13884
  clientX: null,                                                                                                       // 13885
  clientY: null,                                                                                                       // 13886
  ctrlKey: null,                                                                                                       // 13887
  shiftKey: null,                                                                                                      // 13888
  altKey: null,                                                                                                        // 13889
  metaKey: null,                                                                                                       // 13890
  button: function(event) {                                                                                            // 13891
    // Webkit, Firefox, IE9+                                                                                           // 13892
    // which:  1 2 3                                                                                                   // 13893
    // button: 0 1 2 (standard)                                                                                        // 13894
    var button = event.button;                                                                                         // 13895
    if ('which' in event) {                                                                                            // 13896
      return button;                                                                                                   // 13897
    }                                                                                                                  // 13898
    // IE<9                                                                                                            // 13899
    // which:  undefined                                                                                               // 13900
    // button: 0 0 0                                                                                                   // 13901
    // button: 1 4 2 (onmouseup)                                                                                       // 13902
    return button === 2 ? 2 : button === 4 ? 1 : 0;                                                                    // 13903
  },                                                                                                                   // 13904
  buttons: null,                                                                                                       // 13905
  relatedTarget: function(event) {                                                                                     // 13906
    return event.relatedTarget || (                                                                                    // 13907
      event.fromElement === event.srcElement ?                                                                         // 13908
        event.toElement :                                                                                              // 13909
        event.fromElement                                                                                              // 13910
    );                                                                                                                 // 13911
  },                                                                                                                   // 13912
  // "Proprietary" Interface.                                                                                          // 13913
  pageX: function(event) {                                                                                             // 13914
    return 'pageX' in event ?                                                                                          // 13915
      event.pageX :                                                                                                    // 13916
      event.clientX + ViewportMetrics.currentScrollLeft;                                                               // 13917
  },                                                                                                                   // 13918
  pageY: function(event) {                                                                                             // 13919
    return 'pageY' in event ?                                                                                          // 13920
      event.pageY :                                                                                                    // 13921
      event.clientY + ViewportMetrics.currentScrollTop;                                                                // 13922
  }                                                                                                                    // 13923
};                                                                                                                     // 13924
                                                                                                                       // 13925
/**                                                                                                                    // 13926
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 13927
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 13928
 * @param {object} nativeEvent Native browser event.                                                                   // 13929
 * @extends {SyntheticUIEvent}                                                                                         // 13930
 */                                                                                                                    // 13931
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 13932
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 13933
}                                                                                                                      // 13934
                                                                                                                       // 13935
SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);                                               // 13936
                                                                                                                       // 13937
module.exports = SyntheticMouseEvent;                                                                                  // 13938
                                                                                                                       // 13939
},{"./SyntheticUIEvent":83,"./ViewportMetrics":86}],82:[function(_dereq_,module,exports){                              // 13940
/**                                                                                                                    // 13941
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 13942
 *                                                                                                                     // 13943
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13944
 * you may not use this file except in compliance with the License.                                                    // 13945
 * You may obtain a copy of the License at                                                                             // 13946
 *                                                                                                                     // 13947
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13948
 *                                                                                                                     // 13949
 * Unless required by applicable law or agreed to in writing, software                                                 // 13950
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13951
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13952
 * See the License for the specific language governing permissions and                                                 // 13953
 * limitations under the License.                                                                                      // 13954
 *                                                                                                                     // 13955
 * @providesModule SyntheticTouchEvent                                                                                 // 13956
 * @typechecks static-only                                                                                             // 13957
 */                                                                                                                    // 13958
                                                                                                                       // 13959
"use strict";                                                                                                          // 13960
                                                                                                                       // 13961
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");                                                                  // 13962
                                                                                                                       // 13963
/**                                                                                                                    // 13964
 * @interface TouchEvent                                                                                               // 13965
 * @see http://www.w3.org/TR/touch-events/                                                                             // 13966
 */                                                                                                                    // 13967
var TouchEventInterface = {                                                                                            // 13968
  touches: null,                                                                                                       // 13969
  targetTouches: null,                                                                                                 // 13970
  changedTouches: null,                                                                                                // 13971
  altKey: null,                                                                                                        // 13972
  metaKey: null,                                                                                                       // 13973
  ctrlKey: null,                                                                                                       // 13974
  shiftKey: null                                                                                                       // 13975
};                                                                                                                     // 13976
                                                                                                                       // 13977
/**                                                                                                                    // 13978
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 13979
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 13980
 * @param {object} nativeEvent Native browser event.                                                                   // 13981
 * @extends {SyntheticUIEvent}                                                                                         // 13982
 */                                                                                                                    // 13983
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 13984
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 13985
}                                                                                                                      // 13986
                                                                                                                       // 13987
SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);                                               // 13988
                                                                                                                       // 13989
module.exports = SyntheticTouchEvent;                                                                                  // 13990
                                                                                                                       // 13991
},{"./SyntheticUIEvent":83}],83:[function(_dereq_,module,exports){                                                     // 13992
/**                                                                                                                    // 13993
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 13994
 *                                                                                                                     // 13995
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13996
 * you may not use this file except in compliance with the License.                                                    // 13997
 * You may obtain a copy of the License at                                                                             // 13998
 *                                                                                                                     // 13999
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14000
 *                                                                                                                     // 14001
 * Unless required by applicable law or agreed to in writing, software                                                 // 14002
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14003
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14004
 * See the License for the specific language governing permissions and                                                 // 14005
 * limitations under the License.                                                                                      // 14006
 *                                                                                                                     // 14007
 * @providesModule SyntheticUIEvent                                                                                    // 14008
 * @typechecks static-only                                                                                             // 14009
 */                                                                                                                    // 14010
                                                                                                                       // 14011
"use strict";                                                                                                          // 14012
                                                                                                                       // 14013
var SyntheticEvent = _dereq_("./SyntheticEvent");                                                                      // 14014
                                                                                                                       // 14015
/**                                                                                                                    // 14016
 * @interface UIEvent                                                                                                  // 14017
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 14018
 */                                                                                                                    // 14019
var UIEventInterface = {                                                                                               // 14020
  view: null,                                                                                                          // 14021
  detail: null                                                                                                         // 14022
};                                                                                                                     // 14023
                                                                                                                       // 14024
/**                                                                                                                    // 14025
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 14026
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 14027
 * @param {object} nativeEvent Native browser event.                                                                   // 14028
 * @extends {SyntheticEvent}                                                                                           // 14029
 */                                                                                                                    // 14030
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                               // 14031
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 14032
}                                                                                                                      // 14033
                                                                                                                       // 14034
SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);                                                       // 14035
                                                                                                                       // 14036
module.exports = SyntheticUIEvent;                                                                                     // 14037
                                                                                                                       // 14038
},{"./SyntheticEvent":78}],84:[function(_dereq_,module,exports){                                                       // 14039
/**                                                                                                                    // 14040
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14041
 *                                                                                                                     // 14042
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14043
 * you may not use this file except in compliance with the License.                                                    // 14044
 * You may obtain a copy of the License at                                                                             // 14045
 *                                                                                                                     // 14046
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14047
 *                                                                                                                     // 14048
 * Unless required by applicable law or agreed to in writing, software                                                 // 14049
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14050
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14051
 * See the License for the specific language governing permissions and                                                 // 14052
 * limitations under the License.                                                                                      // 14053
 *                                                                                                                     // 14054
 * @providesModule SyntheticWheelEvent                                                                                 // 14055
 * @typechecks static-only                                                                                             // 14056
 */                                                                                                                    // 14057
                                                                                                                       // 14058
"use strict";                                                                                                          // 14059
                                                                                                                       // 14060
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");                                                            // 14061
                                                                                                                       // 14062
/**                                                                                                                    // 14063
 * @interface WheelEvent                                                                                               // 14064
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 14065
 */                                                                                                                    // 14066
var WheelEventInterface = {                                                                                            // 14067
  deltaX: function(event) {                                                                                            // 14068
    return (                                                                                                           // 14069
      'deltaX' in event ? event.deltaX :                                                                               // 14070
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).                                       // 14071
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0                                                                  // 14072
    );                                                                                                                 // 14073
  },                                                                                                                   // 14074
  deltaY: function(event) {                                                                                            // 14075
    return (                                                                                                           // 14076
      'deltaY' in event ? event.deltaY :                                                                               // 14077
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).                                        // 14078
      'wheelDeltaY' in event ? -event.wheelDeltaY :                                                                    // 14079
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).                                           // 14080
      'wheelDelta' in event ? -event.wheelDelta : 0                                                                    // 14081
    );                                                                                                                 // 14082
  },                                                                                                                   // 14083
  deltaZ: null,                                                                                                        // 14084
                                                                                                                       // 14085
  // Browsers without "deltaMode" is reporting in raw wheel delta where one                                            // 14086
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.                                              // 14087
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or                                              // 14088
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.                                                // 14089
  deltaMode: null                                                                                                      // 14090
};                                                                                                                     // 14091
                                                                                                                       // 14092
/**                                                                                                                    // 14093
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 14094
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 14095
 * @param {object} nativeEvent Native browser event.                                                                   // 14096
 * @extends {SyntheticMouseEvent}                                                                                      // 14097
 */                                                                                                                    // 14098
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 14099
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                         // 14100
}                                                                                                                      // 14101
                                                                                                                       // 14102
SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);                                            // 14103
                                                                                                                       // 14104
module.exports = SyntheticWheelEvent;                                                                                  // 14105
                                                                                                                       // 14106
},{"./SyntheticMouseEvent":81}],85:[function(_dereq_,module,exports){                                                  // 14107
/**                                                                                                                    // 14108
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14109
 *                                                                                                                     // 14110
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14111
 * you may not use this file except in compliance with the License.                                                    // 14112
 * You may obtain a copy of the License at                                                                             // 14113
 *                                                                                                                     // 14114
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14115
 *                                                                                                                     // 14116
 * Unless required by applicable law or agreed to in writing, software                                                 // 14117
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14118
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14119
 * See the License for the specific language governing permissions and                                                 // 14120
 * limitations under the License.                                                                                      // 14121
 *                                                                                                                     // 14122
 * @providesModule Transaction                                                                                         // 14123
 */                                                                                                                    // 14124
                                                                                                                       // 14125
"use strict";                                                                                                          // 14126
                                                                                                                       // 14127
var invariant = _dereq_("./invariant");                                                                                // 14128
                                                                                                                       // 14129
/**                                                                                                                    // 14130
 * `Transaction` creates a black box that is able to wrap any method such that                                         // 14131
 * certain invariants are maintained before and after the method is invoked                                            // 14132
 * (Even if an exception is thrown while invoking the wrapped method). Whoever                                         // 14133
 * instantiates a transaction can provide enforcers of the invariants at                                               // 14134
 * creation time. The `Transaction` class itself will supply one additional                                            // 14135
 * automatic invariant for you - the invariant that any transaction instance                                           // 14136
 * should not be run while it is already being run. You would typically create a                                       // 14137
 * single instance of a `Transaction` for reuse multiple times, that potentially                                       // 14138
 * is used to wrap several different methods. Wrappers are extremely simple -                                          // 14139
 * they only require implementing two methods.                                                                         // 14140
 *                                                                                                                     // 14141
 * <pre>                                                                                                               // 14142
 *                       wrappers (injected at creation time)                                                          // 14143
 *                                      +        +                                                                     // 14144
 *                                      |        |                                                                     // 14145
 *                    +-----------------|--------|--------------+                                                      // 14146
 *                    |                 v        |              |                                                      // 14147
 *                    |      +---------------+   |              |                                                      // 14148
 *                    |   +--|    wrapper1   |---|----+         |                                                      // 14149
 *                    |   |  +---------------+   v    |         |                                                      // 14150
 *                    |   |          +-------------+  |         |                                                      // 14151
 *                    |   |     +----|   wrapper2  |--------+   |                                                      // 14152
 *                    |   |     |    +-------------+  |     |   |                                                      // 14153
 *                    |   |     |                     |     |   |                                                      // 14154
 *                    |   v     v                     v     v   | wrapper                                              // 14155
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants                                           // 14156
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained                                           // 14157
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->                                             // 14158
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 14159
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 14160
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 14161
 *                    | +---+ +---+   +---------+   +---+ +---+ |                                                      // 14162
 *                    |  initialize                    close    |                                                      // 14163
 *                    +-----------------------------------------+                                                      // 14164
 * </pre>                                                                                                              // 14165
 *                                                                                                                     // 14166
 * Bonus:                                                                                                              // 14167
 * - Reports timing metrics by method name and wrapper index.                                                          // 14168
 *                                                                                                                     // 14169
 * Use cases:                                                                                                          // 14170
 * - Preserving the input selection ranges before/after reconciliation.                                                // 14171
 *   Restoring selection even in the event of an unexpected error.                                                     // 14172
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,                                          // 14173
 *   while guaranteeing that afterwards, the event system is reactivated.                                              // 14174
 * - Flushing a queue of collected DOM mutations to the main UI thread after a                                         // 14175
 *   reconciliation takes place in a worker thread.                                                                    // 14176
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new                                         // 14177
 *   content.                                                                                                          // 14178
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue                                         // 14179
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).                                                      // 14180
 * - (Future use case): Layout calculations before and after DOM upates.                                               // 14181
 *                                                                                                                     // 14182
 * Transactional plugin API:                                                                                           // 14183
 * - A module that has an `initialize` method that returns any precomputation.                                         // 14184
 * - and a `close` method that accepts the precomputation. `close` is invoked                                          // 14185
 *   when the wrapped process is completed, or has failed.                                                             // 14186
 *                                                                                                                     // 14187
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules                                             // 14188
 * that implement `initialize` and `close`.                                                                            // 14189
 * @return {Transaction} Single transaction for reuse in thread.                                                       // 14190
 *                                                                                                                     // 14191
 * @class Transaction                                                                                                  // 14192
 */                                                                                                                    // 14193
var Mixin = {                                                                                                          // 14194
  /**                                                                                                                  // 14195
   * Sets up this instance so that it is prepared for collecting metrics. Does                                         // 14196
   * so such that this setup method may be used on an instance that is already                                         // 14197
   * initialized, in a way that does not consume additional memory upon reuse.                                         // 14198
   * That can be useful if you decide to make your subclass of this mixin a                                            // 14199
   * "PooledClass".                                                                                                    // 14200
   */                                                                                                                  // 14201
  reinitializeTransaction: function() {                                                                                // 14202
    this.transactionWrappers = this.getTransactionWrappers();                                                          // 14203
    if (!this.wrapperInitData) {                                                                                       // 14204
      this.wrapperInitData = [];                                                                                       // 14205
    } else {                                                                                                           // 14206
      this.wrapperInitData.length = 0;                                                                                 // 14207
    }                                                                                                                  // 14208
    if (!this.timingMetrics) {                                                                                         // 14209
      this.timingMetrics = {};                                                                                         // 14210
    }                                                                                                                  // 14211
    this.timingMetrics.methodInvocationTime = 0;                                                                       // 14212
    if (!this.timingMetrics.wrapperInitTimes) {                                                                        // 14213
      this.timingMetrics.wrapperInitTimes = [];                                                                        // 14214
    } else {                                                                                                           // 14215
      this.timingMetrics.wrapperInitTimes.length = 0;                                                                  // 14216
    }                                                                                                                  // 14217
    if (!this.timingMetrics.wrapperCloseTimes) {                                                                       // 14218
      this.timingMetrics.wrapperCloseTimes = [];                                                                       // 14219
    } else {                                                                                                           // 14220
      this.timingMetrics.wrapperCloseTimes.length = 0;                                                                 // 14221
    }                                                                                                                  // 14222
    this._isInTransaction = false;                                                                                     // 14223
  },                                                                                                                   // 14224
                                                                                                                       // 14225
  _isInTransaction: false,                                                                                             // 14226
                                                                                                                       // 14227
  /**                                                                                                                  // 14228
   * @abstract                                                                                                         // 14229
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.                                                // 14230
   */                                                                                                                  // 14231
  getTransactionWrappers: null,                                                                                        // 14232
                                                                                                                       // 14233
  isInTransaction: function() {                                                                                        // 14234
    return !!this._isInTransaction;                                                                                    // 14235
  },                                                                                                                   // 14236
                                                                                                                       // 14237
  /**                                                                                                                  // 14238
   * Executes the function within a safety window. Use this for the top level                                          // 14239
   * methods that result in large amounts of computation/mutations that would                                          // 14240
   * need to be safety checked.                                                                                        // 14241
   *                                                                                                                   // 14242
   * @param {function} method Member of scope to call.                                                                 // 14243
   * @param {Object} scope Scope to invoke from.                                                                       // 14244
   * @param {Object?=} args... Arguments to pass to the method (optional).                                             // 14245
   *                           Helps prevent need to bind in many cases.                                               // 14246
   * @return Return value from `method`.                                                                               // 14247
   */                                                                                                                  // 14248
  perform: function(method, scope, a, b, c, d, e, f) {                                                                 // 14249
    ("production" !== "development" ? invariant(                                                                       // 14250
      !this.isInTransaction(),                                                                                         // 14251
      'Transaction.perform(...): Cannot initialize a transaction when there ' +                                        // 14252
      'is already an outstanding transaction.'                                                                         // 14253
    ) : invariant(!this.isInTransaction()));                                                                           // 14254
    var memberStart = Date.now();                                                                                      // 14255
    var errorThrown;                                                                                                   // 14256
    var ret;                                                                                                           // 14257
    try {                                                                                                              // 14258
      this._isInTransaction = true;                                                                                    // 14259
      // Catching errors makes debugging more difficult, so we start with                                              // 14260
      // errorThrown set to true before setting it to false after calling                                              // 14261
      // close -- if it's still set to true in the finally block, it means                                             // 14262
      // one of these calls threw.                                                                                     // 14263
      errorThrown = true;                                                                                              // 14264
      this.initializeAll(0);                                                                                           // 14265
      ret = method.call(scope, a, b, c, d, e, f);                                                                      // 14266
      errorThrown = false;                                                                                             // 14267
    } finally {                                                                                                        // 14268
      var memberEnd = Date.now();                                                                                      // 14269
      this.methodInvocationTime += (memberEnd - memberStart);                                                          // 14270
      try {                                                                                                            // 14271
        if (errorThrown) {                                                                                             // 14272
          // If `method` throws, prefer to show that stack trace over any thrown                                       // 14273
          // by invoking `closeAll`.                                                                                   // 14274
          try {                                                                                                        // 14275
            this.closeAll(0);                                                                                          // 14276
          } catch (err) {                                                                                              // 14277
          }                                                                                                            // 14278
        } else {                                                                                                       // 14279
          // Since `method` didn't throw, we don't want to silence the exception                                       // 14280
          // here.                                                                                                     // 14281
          this.closeAll(0);                                                                                            // 14282
        }                                                                                                              // 14283
      } finally {                                                                                                      // 14284
        this._isInTransaction = false;                                                                                 // 14285
      }                                                                                                                // 14286
    }                                                                                                                  // 14287
    return ret;                                                                                                        // 14288
  },                                                                                                                   // 14289
                                                                                                                       // 14290
  initializeAll: function(startIndex) {                                                                                // 14291
    var transactionWrappers = this.transactionWrappers;                                                                // 14292
    var wrapperInitTimes = this.timingMetrics.wrapperInitTimes;                                                        // 14293
    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 14294
      var initStart = Date.now();                                                                                      // 14295
      var wrapper = transactionWrappers[i];                                                                            // 14296
      try {                                                                                                            // 14297
        // Catching errors makes debugging more difficult, so we start with the                                        // 14298
        // OBSERVED_ERROR state before overwriting it with the real return value                                       // 14299
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally                                         // 14300
        // block, it means wrapper.initialize threw.                                                                   // 14301
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;                                                          // 14302
        this.wrapperInitData[i] = wrapper.initialize ?                                                                 // 14303
          wrapper.initialize.call(this) :                                                                              // 14304
          null;                                                                                                        // 14305
      } finally {                                                                                                      // 14306
        var curInitTime = wrapperInitTimes[i];                                                                         // 14307
        var initEnd = Date.now();                                                                                      // 14308
        wrapperInitTimes[i] = (curInitTime || 0) + (initEnd - initStart);                                              // 14309
                                                                                                                       // 14310
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {                                                  // 14311
          // The initializer for wrapper i threw an error; initialize the                                              // 14312
          // remaining wrappers but silence any exceptions from them to ensure                                         // 14313
          // that the first error is the one to bubble up.                                                             // 14314
          try {                                                                                                        // 14315
            this.initializeAll(i + 1);                                                                                 // 14316
          } catch (err) {                                                                                              // 14317
          }                                                                                                            // 14318
        }                                                                                                              // 14319
      }                                                                                                                // 14320
    }                                                                                                                  // 14321
  },                                                                                                                   // 14322
                                                                                                                       // 14323
  /**                                                                                                                  // 14324
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into                                       // 14325
   * them the respective return values of `this.transactionWrappers.init[i]`                                           // 14326
   * (`close`rs that correspond to initializers that failed will not be                                                // 14327
   * invoked).                                                                                                         // 14328
   */                                                                                                                  // 14329
  closeAll: function(startIndex) {                                                                                     // 14330
    ("production" !== "development" ? invariant(                                                                       // 14331
      this.isInTransaction(),                                                                                          // 14332
      'Transaction.closeAll(): Cannot close transaction when none are open.'                                           // 14333
    ) : invariant(this.isInTransaction()));                                                                            // 14334
    var transactionWrappers = this.transactionWrappers;                                                                // 14335
    var wrapperCloseTimes = this.timingMetrics.wrapperCloseTimes;                                                      // 14336
    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 14337
      var wrapper = transactionWrappers[i];                                                                            // 14338
      var closeStart = Date.now();                                                                                     // 14339
      var initData = this.wrapperInitData[i];                                                                          // 14340
      var errorThrown;                                                                                                 // 14341
      try {                                                                                                            // 14342
        // Catching errors makes debugging more difficult, so we start with                                            // 14343
        // errorThrown set to true before setting it to false after calling                                            // 14344
        // close -- if it's still set to true in the finally block, it means                                           // 14345
        // wrapper.close threw.                                                                                        // 14346
        errorThrown = true;                                                                                            // 14347
        if (initData !== Transaction.OBSERVED_ERROR) {                                                                 // 14348
          wrapper.close && wrapper.close.call(this, initData);                                                         // 14349
        }                                                                                                              // 14350
        errorThrown = false;                                                                                           // 14351
      } finally {                                                                                                      // 14352
        var closeEnd = Date.now();                                                                                     // 14353
        var curCloseTime = wrapperCloseTimes[i];                                                                       // 14354
        wrapperCloseTimes[i] = (curCloseTime || 0) + (closeEnd - closeStart);                                          // 14355
                                                                                                                       // 14356
        if (errorThrown) {                                                                                             // 14357
          // The closer for wrapper i threw an error; close the remaining                                              // 14358
          // wrappers but silence any exceptions from them to ensure that the                                          // 14359
          // first error is the one to bubble up.                                                                      // 14360
          try {                                                                                                        // 14361
            this.closeAll(i + 1);                                                                                      // 14362
          } catch (e) {                                                                                                // 14363
          }                                                                                                            // 14364
        }                                                                                                              // 14365
      }                                                                                                                // 14366
    }                                                                                                                  // 14367
    this.wrapperInitData.length = 0;                                                                                   // 14368
  }                                                                                                                    // 14369
};                                                                                                                     // 14370
                                                                                                                       // 14371
var Transaction = {                                                                                                    // 14372
                                                                                                                       // 14373
  Mixin: Mixin,                                                                                                        // 14374
                                                                                                                       // 14375
  /**                                                                                                                  // 14376
   * Token to look for to determine if an error occured.                                                               // 14377
   */                                                                                                                  // 14378
  OBSERVED_ERROR: {}                                                                                                   // 14379
                                                                                                                       // 14380
};                                                                                                                     // 14381
                                                                                                                       // 14382
module.exports = Transaction;                                                                                          // 14383
                                                                                                                       // 14384
},{"./invariant":112}],86:[function(_dereq_,module,exports){                                                           // 14385
/**                                                                                                                    // 14386
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14387
 *                                                                                                                     // 14388
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14389
 * you may not use this file except in compliance with the License.                                                    // 14390
 * You may obtain a copy of the License at                                                                             // 14391
 *                                                                                                                     // 14392
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14393
 *                                                                                                                     // 14394
 * Unless required by applicable law or agreed to in writing, software                                                 // 14395
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14396
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14397
 * See the License for the specific language governing permissions and                                                 // 14398
 * limitations under the License.                                                                                      // 14399
 *                                                                                                                     // 14400
 * @providesModule ViewportMetrics                                                                                     // 14401
 */                                                                                                                    // 14402
                                                                                                                       // 14403
"use strict";                                                                                                          // 14404
                                                                                                                       // 14405
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");                                              // 14406
                                                                                                                       // 14407
var ViewportMetrics = {                                                                                                // 14408
                                                                                                                       // 14409
  currentScrollLeft: 0,                                                                                                // 14410
                                                                                                                       // 14411
  currentScrollTop: 0,                                                                                                 // 14412
                                                                                                                       // 14413
  refreshScrollValues: function() {                                                                                    // 14414
    var scrollPosition = getUnboundedScrollPosition(window);                                                           // 14415
    ViewportMetrics.currentScrollLeft = scrollPosition.x;                                                              // 14416
    ViewportMetrics.currentScrollTop = scrollPosition.y;                                                               // 14417
  }                                                                                                                    // 14418
                                                                                                                       // 14419
};                                                                                                                     // 14420
                                                                                                                       // 14421
module.exports = ViewportMetrics;                                                                                      // 14422
                                                                                                                       // 14423
},{"./getUnboundedScrollPosition":109}],87:[function(_dereq_,module,exports){                                          // 14424
/**                                                                                                                    // 14425
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14426
 *                                                                                                                     // 14427
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14428
 * you may not use this file except in compliance with the License.                                                    // 14429
 * You may obtain a copy of the License at                                                                             // 14430
 *                                                                                                                     // 14431
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14432
 *                                                                                                                     // 14433
 * Unless required by applicable law or agreed to in writing, software                                                 // 14434
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14435
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14436
 * See the License for the specific language governing permissions and                                                 // 14437
 * limitations under the License.                                                                                      // 14438
 *                                                                                                                     // 14439
 * @providesModule accumulate                                                                                          // 14440
 */                                                                                                                    // 14441
                                                                                                                       // 14442
"use strict";                                                                                                          // 14443
                                                                                                                       // 14444
var invariant = _dereq_("./invariant");                                                                                // 14445
                                                                                                                       // 14446
/**                                                                                                                    // 14447
 * Accumulates items that must not be null or undefined.                                                               // 14448
 *                                                                                                                     // 14449
 * This is used to conserve memory by avoiding array allocations.                                                      // 14450
 *                                                                                                                     // 14451
 * @return {*|array<*>} An accumulation of items.                                                                      // 14452
 */                                                                                                                    // 14453
function accumulate(current, next) {                                                                                   // 14454
  ("production" !== "development" ? invariant(                                                                         // 14455
    next != null,                                                                                                      // 14456
    'accumulate(...): Accumulated items must be not be null or undefined.'                                             // 14457
  ) : invariant(next != null));                                                                                        // 14458
  if (current == null) {                                                                                               // 14459
    return next;                                                                                                       // 14460
  } else {                                                                                                             // 14461
    // Both are not empty. Warning: Never call x.concat(y) when you are not                                            // 14462
    // certain that x is an Array (x could be a string with concat method).                                            // 14463
    var currentIsArray = Array.isArray(current);                                                                       // 14464
    var nextIsArray = Array.isArray(next);                                                                             // 14465
    if (currentIsArray) {                                                                                              // 14466
      return current.concat(next);                                                                                     // 14467
    } else {                                                                                                           // 14468
      if (nextIsArray) {                                                                                               // 14469
        return [current].concat(next);                                                                                 // 14470
      } else {                                                                                                         // 14471
        return [current, next];                                                                                        // 14472
      }                                                                                                                // 14473
    }                                                                                                                  // 14474
  }                                                                                                                    // 14475
}                                                                                                                      // 14476
                                                                                                                       // 14477
module.exports = accumulate;                                                                                           // 14478
                                                                                                                       // 14479
},{"./invariant":112}],88:[function(_dereq_,module,exports){                                                           // 14480
/**                                                                                                                    // 14481
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14482
 *                                                                                                                     // 14483
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14484
 * you may not use this file except in compliance with the License.                                                    // 14485
 * You may obtain a copy of the License at                                                                             // 14486
 *                                                                                                                     // 14487
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14488
 *                                                                                                                     // 14489
 * Unless required by applicable law or agreed to in writing, software                                                 // 14490
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14491
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14492
 * See the License for the specific language governing permissions and                                                 // 14493
 * limitations under the License.                                                                                      // 14494
 *                                                                                                                     // 14495
 * @providesModule adler32                                                                                             // 14496
 */                                                                                                                    // 14497
                                                                                                                       // 14498
/* jslint bitwise:true */                                                                                              // 14499
                                                                                                                       // 14500
"use strict";                                                                                                          // 14501
                                                                                                                       // 14502
var MOD = 65521;                                                                                                       // 14503
                                                                                                                       // 14504
// This is a clean-room implementation of adler32 designed for detecting                                               // 14505
// if markup is not what we expect it to be. It does not need to be                                                    // 14506
// cryptographically strong, only reasonable good at detecting if markup                                               // 14507
// generated on the server is different than that on the client.                                                       // 14508
function adler32(data) {                                                                                               // 14509
  var a = 1;                                                                                                           // 14510
  var b = 0;                                                                                                           // 14511
  for (var i = 0; i < data.length; i++) {                                                                              // 14512
    a = (a + data.charCodeAt(i)) % MOD;                                                                                // 14513
    b = (b + a) % MOD;                                                                                                 // 14514
  }                                                                                                                    // 14515
  return a | (b << 16);                                                                                                // 14516
}                                                                                                                      // 14517
                                                                                                                       // 14518
module.exports = adler32;                                                                                              // 14519
                                                                                                                       // 14520
},{}],89:[function(_dereq_,module,exports){                                                                            // 14521
/**                                                                                                                    // 14522
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14523
 *                                                                                                                     // 14524
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14525
 * you may not use this file except in compliance with the License.                                                    // 14526
 * You may obtain a copy of the License at                                                                             // 14527
 *                                                                                                                     // 14528
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14529
 *                                                                                                                     // 14530
 * Unless required by applicable law or agreed to in writing, software                                                 // 14531
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14532
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14533
 * See the License for the specific language governing permissions and                                                 // 14534
 * limitations under the License.                                                                                      // 14535
 *                                                                                                                     // 14536
 * @providesModule containsNode                                                                                        // 14537
 * @typechecks                                                                                                         // 14538
 */                                                                                                                    // 14539
                                                                                                                       // 14540
var isTextNode = _dereq_("./isTextNode");                                                                              // 14541
                                                                                                                       // 14542
/*jslint bitwise:true */                                                                                               // 14543
                                                                                                                       // 14544
/**                                                                                                                    // 14545
 * Checks if a given DOM node contains or is another DOM node.                                                         // 14546
 *                                                                                                                     // 14547
 * @param {?DOMNode} outerNode Outer DOM node.                                                                         // 14548
 * @param {?DOMNode} innerNode Inner DOM node.                                                                         // 14549
 * @return {boolean} True if `outerNode` contains or is `innerNode`.                                                   // 14550
 */                                                                                                                    // 14551
function containsNode(outerNode, innerNode) {                                                                          // 14552
  if (!outerNode || !innerNode) {                                                                                      // 14553
    return false;                                                                                                      // 14554
  } else if (outerNode === innerNode) {                                                                                // 14555
    return true;                                                                                                       // 14556
  } else if (isTextNode(outerNode)) {                                                                                  // 14557
    return false;                                                                                                      // 14558
  } else if (isTextNode(innerNode)) {                                                                                  // 14559
    return containsNode(outerNode, innerNode.parentNode);                                                              // 14560
  } else if (outerNode.contains) {                                                                                     // 14561
    return outerNode.contains(innerNode);                                                                              // 14562
  } else if (outerNode.compareDocumentPosition) {                                                                      // 14563
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);                                                      // 14564
  } else {                                                                                                             // 14565
    return false;                                                                                                      // 14566
  }                                                                                                                    // 14567
}                                                                                                                      // 14568
                                                                                                                       // 14569
module.exports = containsNode;                                                                                         // 14570
                                                                                                                       // 14571
},{"./isTextNode":116}],90:[function(_dereq_,module,exports){                                                          // 14572
/**                                                                                                                    // 14573
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14574
 *                                                                                                                     // 14575
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14576
 * you may not use this file except in compliance with the License.                                                    // 14577
 * You may obtain a copy of the License at                                                                             // 14578
 *                                                                                                                     // 14579
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14580
 *                                                                                                                     // 14581
 * Unless required by applicable law or agreed to in writing, software                                                 // 14582
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14583
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14584
 * See the License for the specific language governing permissions and                                                 // 14585
 * limitations under the License.                                                                                      // 14586
 *                                                                                                                     // 14587
 * @providesModule copyProperties                                                                                      // 14588
 */                                                                                                                    // 14589
                                                                                                                       // 14590
/**                                                                                                                    // 14591
 * Copy properties from one or more objects (up to 5) into the first object.                                           // 14592
 * This is a shallow copy. It mutates the first object and also returns it.                                            // 14593
 *                                                                                                                     // 14594
 * NOTE: `arguments` has a very significant performance penalty, which is why                                          // 14595
 * we don't support unlimited arguments.                                                                               // 14596
 */                                                                                                                    // 14597
function copyProperties(obj, a, b, c, d, e, f) {                                                                       // 14598
  obj = obj || {};                                                                                                     // 14599
                                                                                                                       // 14600
  if ("production" !== "development") {                                                                                // 14601
    if (f) {                                                                                                           // 14602
      throw new Error('Too many arguments passed to copyProperties');                                                  // 14603
    }                                                                                                                  // 14604
  }                                                                                                                    // 14605
                                                                                                                       // 14606
  var args = [a, b, c, d, e];                                                                                          // 14607
  var ii = 0, v;                                                                                                       // 14608
  while (args[ii]) {                                                                                                   // 14609
    v = args[ii++];                                                                                                    // 14610
    for (var k in v) {                                                                                                 // 14611
      obj[k] = v[k];                                                                                                   // 14612
    }                                                                                                                  // 14613
                                                                                                                       // 14614
    // IE ignores toString in object iteration.. See:                                                                  // 14615
    // webreflection.blogspot.com/2007/07/quick-fix-internet-explorer-and.html                                         // 14616
    if (v.hasOwnProperty && v.hasOwnProperty('toString') &&                                                            // 14617
        (typeof v.toString != 'undefined') && (obj.toString !== v.toString)) {                                         // 14618
      obj.toString = v.toString;                                                                                       // 14619
    }                                                                                                                  // 14620
  }                                                                                                                    // 14621
                                                                                                                       // 14622
  return obj;                                                                                                          // 14623
}                                                                                                                      // 14624
                                                                                                                       // 14625
module.exports = copyProperties;                                                                                       // 14626
                                                                                                                       // 14627
},{}],91:[function(_dereq_,module,exports){                                                                            // 14628
/**                                                                                                                    // 14629
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14630
 *                                                                                                                     // 14631
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14632
 * you may not use this file except in compliance with the License.                                                    // 14633
 * You may obtain a copy of the License at                                                                             // 14634
 *                                                                                                                     // 14635
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14636
 *                                                                                                                     // 14637
 * Unless required by applicable law or agreed to in writing, software                                                 // 14638
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14639
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14640
 * See the License for the specific language governing permissions and                                                 // 14641
 * limitations under the License.                                                                                      // 14642
 *                                                                                                                     // 14643
 * @providesModule createArrayFrom                                                                                     // 14644
 * @typechecks                                                                                                         // 14645
 */                                                                                                                    // 14646
                                                                                                                       // 14647
var toArray = _dereq_("./toArray");                                                                                    // 14648
                                                                                                                       // 14649
/**                                                                                                                    // 14650
 * Perform a heuristic test to determine if an object is "array-like".                                                 // 14651
 *                                                                                                                     // 14652
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"                                                      // 14653
 *   Joshu replied: "Mu."                                                                                              // 14654
 *                                                                                                                     // 14655
 * This function determines if its argument has "array nature": it returns                                             // 14656
 * true if the argument is an actual array, an `arguments' object, or an                                               // 14657
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).                                               // 14658
 *                                                                                                                     // 14659
 * It will return false for other array-like objects like Filelist.                                                    // 14660
 *                                                                                                                     // 14661
 * @param {*} obj                                                                                                      // 14662
 * @return {boolean}                                                                                                   // 14663
 */                                                                                                                    // 14664
function hasArrayNature(obj) {                                                                                         // 14665
  return (                                                                                                             // 14666
    // not null/false                                                                                                  // 14667
    !!obj &&                                                                                                           // 14668
    // arrays are objects, NodeLists are functions in Safari                                                           // 14669
    (typeof obj == 'object' || typeof obj == 'function') &&                                                            // 14670
    // quacks like an array                                                                                            // 14671
    ('length' in obj) &&                                                                                               // 14672
    // not window                                                                                                      // 14673
    !('setInterval' in obj) &&                                                                                         // 14674
    // no DOM node should be considered an array-like                                                                  // 14675
    // a 'select' element has 'length' and 'item' properties on IE8                                                    // 14676
    (typeof obj.nodeType != 'number') &&                                                                               // 14677
    (                                                                                                                  // 14678
      // a real array                                                                                                  // 14679
      (// HTMLCollection/NodeList                                                                                      // 14680
      (Array.isArray(obj) ||                                                                                           // 14681
      // arguments                                                                                                     // 14682
      ('callee' in obj) || 'item' in obj))                                                                             // 14683
    )                                                                                                                  // 14684
  );                                                                                                                   // 14685
}                                                                                                                      // 14686
                                                                                                                       // 14687
/**                                                                                                                    // 14688
 * Ensure that the argument is an array by wrapping it in an array if it is not.                                       // 14689
 * Creates a copy of the argument if it is already an array.                                                           // 14690
 *                                                                                                                     // 14691
 * This is mostly useful idiomatically:                                                                                // 14692
 *                                                                                                                     // 14693
 *   var createArrayFrom = require('createArrayFrom');                                                                 // 14694
 *                                                                                                                     // 14695
 *   function takesOneOrMoreThings(things) {                                                                           // 14696
 *     things = createArrayFrom(things);                                                                               // 14697
 *     ...                                                                                                             // 14698
 *   }                                                                                                                 // 14699
 *                                                                                                                     // 14700
 * This allows you to treat `things' as an array, but accept scalars in the API.                                       // 14701
 *                                                                                                                     // 14702
 * If you need to convert an array-like object, like `arguments`, into an array                                        // 14703
 * use toArray instead.                                                                                                // 14704
 *                                                                                                                     // 14705
 * @param {*} obj                                                                                                      // 14706
 * @return {array}                                                                                                     // 14707
 */                                                                                                                    // 14708
function createArrayFrom(obj) {                                                                                        // 14709
  if (!hasArrayNature(obj)) {                                                                                          // 14710
    return [obj];                                                                                                      // 14711
  } else if (Array.isArray(obj)) {                                                                                     // 14712
    return obj.slice();                                                                                                // 14713
  } else {                                                                                                             // 14714
    return toArray(obj);                                                                                               // 14715
  }                                                                                                                    // 14716
}                                                                                                                      // 14717
                                                                                                                       // 14718
module.exports = createArrayFrom;                                                                                      // 14719
                                                                                                                       // 14720
},{"./toArray":132}],92:[function(_dereq_,module,exports){                                                             // 14721
/**                                                                                                                    // 14722
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14723
 *                                                                                                                     // 14724
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14725
 * you may not use this file except in compliance with the License.                                                    // 14726
 * You may obtain a copy of the License at                                                                             // 14727
 *                                                                                                                     // 14728
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14729
 *                                                                                                                     // 14730
 * Unless required by applicable law or agreed to in writing, software                                                 // 14731
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14732
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14733
 * See the License for the specific language governing permissions and                                                 // 14734
 * limitations under the License.                                                                                      // 14735
 *                                                                                                                     // 14736
 * @providesModule createFullPageComponent                                                                             // 14737
 * @typechecks                                                                                                         // 14738
 */                                                                                                                    // 14739
                                                                                                                       // 14740
"use strict";                                                                                                          // 14741
                                                                                                                       // 14742
// Defeat circular references by requiring this directly.                                                              // 14743
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");                                                    // 14744
                                                                                                                       // 14745
var invariant = _dereq_("./invariant");                                                                                // 14746
                                                                                                                       // 14747
/**                                                                                                                    // 14748
 * Create a component that will throw an exception when unmounted.                                                     // 14749
 *                                                                                                                     // 14750
 * Components like <html> <head> and <body> can't be removed or added                                                  // 14751
 * easily in a cross-browser way, however it's valuable to be able to                                                  // 14752
 * take advantage of React's reconciliation for styling and <title>                                                    // 14753
 * management. So we just document it and throw in dangerous cases.                                                    // 14754
 *                                                                                                                     // 14755
 * @param {function} componentClass convenience constructor to wrap                                                    // 14756
 * @return {function} convenience constructor of new component                                                         // 14757
 */                                                                                                                    // 14758
function createFullPageComponent(componentClass) {                                                                     // 14759
  var FullPageComponent = ReactCompositeComponent.createClass({                                                        // 14760
    displayName: 'ReactFullPageComponent' + (                                                                          // 14761
      componentClass.componentConstructor.displayName || ''                                                            // 14762
    ),                                                                                                                 // 14763
                                                                                                                       // 14764
    componentWillUnmount: function() {                                                                                 // 14765
      ("production" !== "development" ? invariant(                                                                     // 14766
        false,                                                                                                         // 14767
        '%s tried to unmount. Because of cross-browser quirks it is ' +                                                // 14768
        'impossible to unmount some top-level components (eg <html>, <head>, ' +                                       // 14769
        'and <body>) reliably and efficiently. To fix this, have a single ' +                                          // 14770
        'top-level component that never unmounts render these elements.',                                              // 14771
        this.constructor.displayName                                                                                   // 14772
      ) : invariant(false));                                                                                           // 14773
    },                                                                                                                 // 14774
                                                                                                                       // 14775
    render: function() {                                                                                               // 14776
      return this.transferPropsTo(componentClass(null, this.props.children));                                          // 14777
    }                                                                                                                  // 14778
  });                                                                                                                  // 14779
                                                                                                                       // 14780
  return FullPageComponent;                                                                                            // 14781
}                                                                                                                      // 14782
                                                                                                                       // 14783
module.exports = createFullPageComponent;                                                                              // 14784
                                                                                                                       // 14785
},{"./ReactCompositeComponent":29,"./invariant":112}],93:[function(_dereq_,module,exports){                            // 14786
/**                                                                                                                    // 14787
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14788
 *                                                                                                                     // 14789
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14790
 * you may not use this file except in compliance with the License.                                                    // 14791
 * You may obtain a copy of the License at                                                                             // 14792
 *                                                                                                                     // 14793
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14794
 *                                                                                                                     // 14795
 * Unless required by applicable law or agreed to in writing, software                                                 // 14796
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14797
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14798
 * See the License for the specific language governing permissions and                                                 // 14799
 * limitations under the License.                                                                                      // 14800
 *                                                                                                                     // 14801
 * @providesModule createNodesFromMarkup                                                                               // 14802
 * @typechecks                                                                                                         // 14803
 */                                                                                                                    // 14804
                                                                                                                       // 14805
/*jslint evil: true, sub: true */                                                                                      // 14806
                                                                                                                       // 14807
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 14808
                                                                                                                       // 14809
var createArrayFrom = _dereq_("./createArrayFrom");                                                                    // 14810
var getMarkupWrap = _dereq_("./getMarkupWrap");                                                                        // 14811
var invariant = _dereq_("./invariant");                                                                                // 14812
                                                                                                                       // 14813
/**                                                                                                                    // 14814
 * Dummy container used to render all markup.                                                                          // 14815
 */                                                                                                                    // 14816
var dummyNode =                                                                                                        // 14817
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                               // 14818
                                                                                                                       // 14819
/**                                                                                                                    // 14820
 * Pattern used by `getNodeName`.                                                                                      // 14821
 */                                                                                                                    // 14822
var nodeNamePattern = /^\s*<(\w+)/;                                                                                    // 14823
                                                                                                                       // 14824
/**                                                                                                                    // 14825
 * Extracts the `nodeName` of the first element in a string of markup.                                                 // 14826
 *                                                                                                                     // 14827
 * @param {string} markup String of markup.                                                                            // 14828
 * @return {?string} Node name of the supplied markup.                                                                 // 14829
 */                                                                                                                    // 14830
function getNodeName(markup) {                                                                                         // 14831
  var nodeNameMatch = markup.match(nodeNamePattern);                                                                   // 14832
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();                                                              // 14833
}                                                                                                                      // 14834
                                                                                                                       // 14835
/**                                                                                                                    // 14836
 * Creates an array containing the nodes rendered from the supplied markup. The                                        // 14837
 * optionally supplied `handleScript` function will be invoked once for each                                           // 14838
 * <script> element that is rendered. If no `handleScript` function is supplied,                                       // 14839
 * an exception is thrown if any <script> elements are rendered.                                                       // 14840
 *                                                                                                                     // 14841
 * @param {string} markup A string of valid HTML markup.                                                               // 14842
 * @param {?function} handleScript Invoked once for each rendered <script>.                                            // 14843
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.                                                 // 14844
 */                                                                                                                    // 14845
function createNodesFromMarkup(markup, handleScript) {                                                                 // 14846
  var node = dummyNode;                                                                                                // 14847
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);                                                                                  // 14849
                                                                                                                       // 14850
  var wrap = nodeName && getMarkupWrap(nodeName);                                                                      // 14851
  if (wrap) {                                                                                                          // 14852
    node.innerHTML = wrap[1] + markup + wrap[2];                                                                       // 14853
                                                                                                                       // 14854
    var wrapDepth = wrap[0];                                                                                           // 14855
    while (wrapDepth--) {                                                                                              // 14856
      node = node.lastChild;                                                                                           // 14857
    }                                                                                                                  // 14858
  } else {                                                                                                             // 14859
    node.innerHTML = markup;                                                                                           // 14860
  }                                                                                                                    // 14861
                                                                                                                       // 14862
  var scripts = node.getElementsByTagName('script');                                                                   // 14863
  if (scripts.length) {                                                                                                // 14864
    ("production" !== "development" ? invariant(                                                                       // 14865
      handleScript,                                                                                                    // 14866
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'                                              // 14867
    ) : invariant(handleScript));                                                                                      // 14868
    createArrayFrom(scripts).forEach(handleScript);                                                                    // 14869
  }                                                                                                                    // 14870
                                                                                                                       // 14871
  var nodes = createArrayFrom(node.childNodes);                                                                        // 14872
  while (node.lastChild) {                                                                                             // 14873
    node.removeChild(node.lastChild);                                                                                  // 14874
  }                                                                                                                    // 14875
  return nodes;                                                                                                        // 14876
}                                                                                                                      // 14877
                                                                                                                       // 14878
module.exports = createNodesFromMarkup;                                                                                // 14879
                                                                                                                       // 14880
},{"./ExecutionEnvironment":20,"./createArrayFrom":91,"./getMarkupWrap":105,"./invariant":112}],94:[function(_dereq_,module,exports){
/**                                                                                                                    // 14882
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14883
 *                                                                                                                     // 14884
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14885
 * you may not use this file except in compliance with the License.                                                    // 14886
 * You may obtain a copy of the License at                                                                             // 14887
 *                                                                                                                     // 14888
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14889
 *                                                                                                                     // 14890
 * Unless required by applicable law or agreed to in writing, software                                                 // 14891
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14892
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14893
 * See the License for the specific language governing permissions and                                                 // 14894
 * limitations under the License.                                                                                      // 14895
 *                                                                                                                     // 14896
 * @providesModule createObjectFrom                                                                                    // 14897
 */                                                                                                                    // 14898
                                                                                                                       // 14899
/**                                                                                                                    // 14900
 * Construct an object from an array of keys                                                                           // 14901
 * and optionally specified value or list of values.                                                                   // 14902
 *                                                                                                                     // 14903
 *  >>> createObjectFrom(['a','b','c']);                                                                               // 14904
 *  {a: true, b: true, c: true}                                                                                        // 14905
 *                                                                                                                     // 14906
 *  >>> createObjectFrom(['a','b','c'], false);                                                                        // 14907
 *  {a: false, b: false, c: false}                                                                                     // 14908
 *                                                                                                                     // 14909
 *  >>> createObjectFrom(['a','b','c'], 'monkey');                                                                     // 14910
 *  {c:'monkey', b:'monkey' c:'monkey'}                                                                                // 14911
 *                                                                                                                     // 14912
 *  >>> createObjectFrom(['a','b','c'], [1,2,3]);                                                                      // 14913
 *  {a: 1, b: 2, c: 3}                                                                                                 // 14914
 *                                                                                                                     // 14915
 *  >>> createObjectFrom(['women', 'men'], [true, false]);                                                             // 14916
 *  {women: true, men: false}                                                                                          // 14917
 *                                                                                                                     // 14918
 * @param   Array   list of keys                                                                                       // 14919
 * @param   mixed   optional value or value array.  defaults true.                                                     // 14920
 * @returns object                                                                                                     // 14921
 */                                                                                                                    // 14922
function createObjectFrom(keys, values /* = true */) {                                                                 // 14923
  if ("production" !== "development") {                                                                                // 14924
    if (!Array.isArray(keys)) {                                                                                        // 14925
      throw new TypeError('Must pass an array of keys.');                                                              // 14926
    }                                                                                                                  // 14927
  }                                                                                                                    // 14928
                                                                                                                       // 14929
  var object = {};                                                                                                     // 14930
  var isArray = Array.isArray(values);                                                                                 // 14931
  if (typeof values == 'undefined') {                                                                                  // 14932
    values = true;                                                                                                     // 14933
  }                                                                                                                    // 14934
                                                                                                                       // 14935
  for (var ii = keys.length; ii--;) {                                                                                  // 14936
    object[keys[ii]] = isArray ? values[ii] : values;                                                                  // 14937
  }                                                                                                                    // 14938
  return object;                                                                                                       // 14939
}                                                                                                                      // 14940
                                                                                                                       // 14941
module.exports = createObjectFrom;                                                                                     // 14942
                                                                                                                       // 14943
},{}],95:[function(_dereq_,module,exports){                                                                            // 14944
/**                                                                                                                    // 14945
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 14946
 *                                                                                                                     // 14947
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14948
 * you may not use this file except in compliance with the License.                                                    // 14949
 * You may obtain a copy of the License at                                                                             // 14950
 *                                                                                                                     // 14951
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14952
 *                                                                                                                     // 14953
 * Unless required by applicable law or agreed to in writing, software                                                 // 14954
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14955
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14956
 * See the License for the specific language governing permissions and                                                 // 14957
 * limitations under the License.                                                                                      // 14958
 *                                                                                                                     // 14959
 * @providesModule dangerousStyleValue                                                                                 // 14960
 * @typechecks static-only                                                                                             // 14961
 */                                                                                                                    // 14962
                                                                                                                       // 14963
"use strict";                                                                                                          // 14964
                                                                                                                       // 14965
var CSSProperty = _dereq_("./CSSProperty");                                                                            // 14966
                                                                                                                       // 14967
/**                                                                                                                    // 14968
 * Convert a value into the proper css writable value. The `styleName` name                                            // 14969
 * name should be logical (no hyphens), as specified                                                                   // 14970
 * in `CSSProperty.isUnitlessNumber`.                                                                                  // 14971
 *                                                                                                                     // 14972
 * @param {string} styleName CSS property name such as `topMargin`.                                                    // 14973
 * @param {*} value CSS property value such as `10px`.                                                                 // 14974
 * @return {string} Normalized style value with dimensions applied.                                                    // 14975
 */                                                                                                                    // 14976
function dangerousStyleValue(styleName, value) {                                                                       // 14977
  // Note that we've removed escapeTextForBrowser() calls here since the                                               // 14978
  // whole string will be escaped when the attribute is injected into                                                  // 14979
  // the markup. If you provide unsafe user data here they can inject                                                  // 14980
  // arbitrary CSS which may be problematic (I couldn't repro this):                                                   // 14981
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet                                                    // 14982
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/                                                // 14983
  // This is not an XSS hole but instead a potential CSS injection issue                                               // 14984
  // which has lead to a greater discussion about how we're going to                                                   // 14985
  // trust URLs moving forward. See #2115901                                                                           // 14986
                                                                                                                       // 14987
  var isEmpty = value == null || typeof value === 'boolean' || value === '';                                           // 14988
  if (isEmpty) {                                                                                                       // 14989
    return '';                                                                                                         // 14990
  }                                                                                                                    // 14991
                                                                                                                       // 14992
  var isNonNumeric = isNaN(value);                                                                                     // 14993
  if (isNonNumeric || value === 0 || CSSProperty.isUnitlessNumber[styleName]) {                                        // 14994
    return '' + value; // cast to string                                                                               // 14995
  }                                                                                                                    // 14996
                                                                                                                       // 14997
  return value + 'px';                                                                                                 // 14998
}                                                                                                                      // 14999
                                                                                                                       // 15000
module.exports = dangerousStyleValue;                                                                                  // 15001
                                                                                                                       // 15002
},{"./CSSProperty":2}],96:[function(_dereq_,module,exports){                                                           // 15003
/**                                                                                                                    // 15004
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15005
 *                                                                                                                     // 15006
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15007
 * you may not use this file except in compliance with the License.                                                    // 15008
 * You may obtain a copy of the License at                                                                             // 15009
 *                                                                                                                     // 15010
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15011
 *                                                                                                                     // 15012
 * Unless required by applicable law or agreed to in writing, software                                                 // 15013
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15014
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15015
 * See the License for the specific language governing permissions and                                                 // 15016
 * limitations under the License.                                                                                      // 15017
 *                                                                                                                     // 15018
 * @providesModule emptyFunction                                                                                       // 15019
 */                                                                                                                    // 15020
                                                                                                                       // 15021
var copyProperties = _dereq_("./copyProperties");                                                                      // 15022
                                                                                                                       // 15023
function makeEmptyFunction(arg) {                                                                                      // 15024
  return function() {                                                                                                  // 15025
    return arg;                                                                                                        // 15026
  };                                                                                                                   // 15027
}                                                                                                                      // 15028
                                                                                                                       // 15029
/**                                                                                                                    // 15030
 * This function accepts and discards inputs; it has no side effects. This is                                          // 15031
 * primarily useful idiomatically for overridable function endpoints which                                             // 15032
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 15033
 */                                                                                                                    // 15034
function emptyFunction() {}                                                                                            // 15035
                                                                                                                       // 15036
copyProperties(emptyFunction, {                                                                                        // 15037
  thatReturns: makeEmptyFunction,                                                                                      // 15038
  thatReturnsFalse: makeEmptyFunction(false),                                                                          // 15039
  thatReturnsTrue: makeEmptyFunction(true),                                                                            // 15040
  thatReturnsNull: makeEmptyFunction(null),                                                                            // 15041
  thatReturnsThis: function() { return this; },                                                                        // 15042
  thatReturnsArgument: function(arg) { return arg; }                                                                   // 15043
});                                                                                                                    // 15044
                                                                                                                       // 15045
module.exports = emptyFunction;                                                                                        // 15046
                                                                                                                       // 15047
},{"./copyProperties":90}],97:[function(_dereq_,module,exports){                                                       // 15048
/**                                                                                                                    // 15049
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15050
 *                                                                                                                     // 15051
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15052
 * you may not use this file except in compliance with the License.                                                    // 15053
 * You may obtain a copy of the License at                                                                             // 15054
 *                                                                                                                     // 15055
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15056
 *                                                                                                                     // 15057
 * Unless required by applicable law or agreed to in writing, software                                                 // 15058
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15059
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15060
 * See the License for the specific language governing permissions and                                                 // 15061
 * limitations under the License.                                                                                      // 15062
 *                                                                                                                     // 15063
 * @providesModule emptyObject                                                                                         // 15064
 */                                                                                                                    // 15065
                                                                                                                       // 15066
"use strict";                                                                                                          // 15067
                                                                                                                       // 15068
var emptyObject = {};                                                                                                  // 15069
                                                                                                                       // 15070
if ("production" !== "development") {                                                                                  // 15071
  Object.freeze(emptyObject);                                                                                          // 15072
}                                                                                                                      // 15073
                                                                                                                       // 15074
module.exports = emptyObject;                                                                                          // 15075
                                                                                                                       // 15076
},{}],98:[function(_dereq_,module,exports){                                                                            // 15077
/**                                                                                                                    // 15078
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15079
 *                                                                                                                     // 15080
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15081
 * you may not use this file except in compliance with the License.                                                    // 15082
 * You may obtain a copy of the License at                                                                             // 15083
 *                                                                                                                     // 15084
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15085
 *                                                                                                                     // 15086
 * Unless required by applicable law or agreed to in writing, software                                                 // 15087
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15088
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15089
 * See the License for the specific language governing permissions and                                                 // 15090
 * limitations under the License.                                                                                      // 15091
 *                                                                                                                     // 15092
 * @providesModule escapeTextForBrowser                                                                                // 15093
 * @typechecks static-only                                                                                             // 15094
 */                                                                                                                    // 15095
                                                                                                                       // 15096
"use strict";                                                                                                          // 15097
                                                                                                                       // 15098
var ESCAPE_LOOKUP = {                                                                                                  // 15099
  "&": "&amp;",                                                                                                        // 15100
  ">": "&gt;",                                                                                                         // 15101
  "<": "&lt;",                                                                                                         // 15102
  "\"": "&quot;",                                                                                                      // 15103
  "'": "&#x27;",                                                                                                       // 15104
  "/": "&#x2f;"                                                                                                        // 15105
};                                                                                                                     // 15106
                                                                                                                       // 15107
var ESCAPE_REGEX = /[&><"'\/]/g;                                                                                       // 15108
                                                                                                                       // 15109
function escaper(match) {                                                                                              // 15110
  return ESCAPE_LOOKUP[match];                                                                                         // 15111
}                                                                                                                      // 15112
                                                                                                                       // 15113
/**                                                                                                                    // 15114
 * Escapes text to prevent scripting attacks.                                                                          // 15115
 *                                                                                                                     // 15116
 * @param {*} text Text value to escape.                                                                               // 15117
 * @return {string} An escaped string.                                                                                 // 15118
 */                                                                                                                    // 15119
function escapeTextForBrowser(text) {                                                                                  // 15120
  return ('' + text).replace(ESCAPE_REGEX, escaper);                                                                   // 15121
}                                                                                                                      // 15122
                                                                                                                       // 15123
module.exports = escapeTextForBrowser;                                                                                 // 15124
                                                                                                                       // 15125
},{}],99:[function(_dereq_,module,exports){                                                                            // 15126
/**                                                                                                                    // 15127
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15128
 *                                                                                                                     // 15129
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15130
 * you may not use this file except in compliance with the License.                                                    // 15131
 * You may obtain a copy of the License at                                                                             // 15132
 *                                                                                                                     // 15133
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15134
 *                                                                                                                     // 15135
 * Unless required by applicable law or agreed to in writing, software                                                 // 15136
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15137
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15138
 * See the License for the specific language governing permissions and                                                 // 15139
 * limitations under the License.                                                                                      // 15140
 *                                                                                                                     // 15141
 * @providesModule flattenChildren                                                                                     // 15142
 */                                                                                                                    // 15143
                                                                                                                       // 15144
"use strict";                                                                                                          // 15145
                                                                                                                       // 15146
var invariant = _dereq_("./invariant");                                                                                // 15147
var traverseAllChildren = _dereq_("./traverseAllChildren");                                                            // 15148
                                                                                                                       // 15149
/**                                                                                                                    // 15150
 * @param {function} traverseContext Context passed through traversal.                                                 // 15151
 * @param {?ReactComponent} child React child component.                                                               // 15152
 * @param {!string} name String name of key path to child.                                                             // 15153
 */                                                                                                                    // 15154
function flattenSingleChildIntoContext(traverseContext, child, name) {                                                 // 15155
  // We found a component instance.                                                                                    // 15156
  var result = traverseContext;                                                                                        // 15157
  ("production" !== "development" ? invariant(                                                                         // 15158
    !result.hasOwnProperty(name),                                                                                      // 15159
    'flattenChildren(...): Encountered two children with the same key, `%s`. ' +                                       // 15160
    'Children keys must be unique.',                                                                                   // 15161
    name                                                                                                               // 15162
  ) : invariant(!result.hasOwnProperty(name)));                                                                        // 15163
  if (child != null) {                                                                                                 // 15164
    result[name] = child;                                                                                              // 15165
  }                                                                                                                    // 15166
}                                                                                                                      // 15167
                                                                                                                       // 15168
/**                                                                                                                    // 15169
 * Flattens children that are typically specified as `props.children`. Any null                                        // 15170
 * children will not be included in the resulting object.                                                              // 15171
 * @return {!object} flattened children keyed by name.                                                                 // 15172
 */                                                                                                                    // 15173
function flattenChildren(children) {                                                                                   // 15174
  if (children == null) {                                                                                              // 15175
    return children;                                                                                                   // 15176
  }                                                                                                                    // 15177
  var result = {};                                                                                                     // 15178
  traverseAllChildren(children, flattenSingleChildIntoContext, result);                                                // 15179
  return result;                                                                                                       // 15180
}                                                                                                                      // 15181
                                                                                                                       // 15182
module.exports = flattenChildren;                                                                                      // 15183
                                                                                                                       // 15184
},{"./invariant":112,"./traverseAllChildren":133}],100:[function(_dereq_,module,exports){                              // 15185
/**                                                                                                                    // 15186
 * Copyright 2014 Facebook, Inc.                                                                                       // 15187
 *                                                                                                                     // 15188
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15189
 * you may not use this file except in compliance with the License.                                                    // 15190
 * You may obtain a copy of the License at                                                                             // 15191
 *                                                                                                                     // 15192
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15193
 *                                                                                                                     // 15194
 * Unless required by applicable law or agreed to in writing, software                                                 // 15195
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15196
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15197
 * See the License for the specific language governing permissions and                                                 // 15198
 * limitations under the License.                                                                                      // 15199
 *                                                                                                                     // 15200
 * @providesModule focusNode                                                                                           // 15201
 */                                                                                                                    // 15202
                                                                                                                       // 15203
"use strict";                                                                                                          // 15204
                                                                                                                       // 15205
/**                                                                                                                    // 15206
 * IE8 throws if an input/textarea is disabled and we try to focus it.                                                 // 15207
 * Focus only when necessary.                                                                                          // 15208
 *                                                                                                                     // 15209
 * @param {DOMElement} node input/textarea to focus                                                                    // 15210
 */                                                                                                                    // 15211
function focusNode(node) {                                                                                             // 15212
  if (!node.disabled) {                                                                                                // 15213
    node.focus();                                                                                                      // 15214
  }                                                                                                                    // 15215
}                                                                                                                      // 15216
                                                                                                                       // 15217
module.exports = focusNode;                                                                                            // 15218
                                                                                                                       // 15219
},{}],101:[function(_dereq_,module,exports){                                                                           // 15220
/**                                                                                                                    // 15221
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15222
 *                                                                                                                     // 15223
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15224
 * you may not use this file except in compliance with the License.                                                    // 15225
 * You may obtain a copy of the License at                                                                             // 15226
 *                                                                                                                     // 15227
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15228
 *                                                                                                                     // 15229
 * Unless required by applicable law or agreed to in writing, software                                                 // 15230
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15231
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15232
 * See the License for the specific language governing permissions and                                                 // 15233
 * limitations under the License.                                                                                      // 15234
 *                                                                                                                     // 15235
 * @providesModule forEachAccumulated                                                                                  // 15236
 */                                                                                                                    // 15237
                                                                                                                       // 15238
"use strict";                                                                                                          // 15239
                                                                                                                       // 15240
/**                                                                                                                    // 15241
 * @param {array} an "accumulation" of items which is either an Array or                                               // 15242
 * a single item. Useful when paired with the `accumulate` module. This is a                                           // 15243
 * simple utility that allows us to reason about a collection of items, but                                            // 15244
 * handling the case when there is exactly one item (and we do not need to                                             // 15245
 * allocate an array).                                                                                                 // 15246
 */                                                                                                                    // 15247
var forEachAccumulated = function(arr, cb, scope) {                                                                    // 15248
  if (Array.isArray(arr)) {                                                                                            // 15249
    arr.forEach(cb, scope);                                                                                            // 15250
  } else if (arr) {                                                                                                    // 15251
    cb.call(scope, arr);                                                                                               // 15252
  }                                                                                                                    // 15253
};                                                                                                                     // 15254
                                                                                                                       // 15255
module.exports = forEachAccumulated;                                                                                   // 15256
                                                                                                                       // 15257
},{}],102:[function(_dereq_,module,exports){                                                                           // 15258
/**                                                                                                                    // 15259
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15260
 *                                                                                                                     // 15261
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15262
 * you may not use this file except in compliance with the License.                                                    // 15263
 * You may obtain a copy of the License at                                                                             // 15264
 *                                                                                                                     // 15265
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15266
 *                                                                                                                     // 15267
 * Unless required by applicable law or agreed to in writing, software                                                 // 15268
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15269
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15270
 * See the License for the specific language governing permissions and                                                 // 15271
 * limitations under the License.                                                                                      // 15272
 *                                                                                                                     // 15273
 * @providesModule getActiveElement                                                                                    // 15274
 * @typechecks                                                                                                         // 15275
 */                                                                                                                    // 15276
                                                                                                                       // 15277
/**                                                                                                                    // 15278
 * Same as document.activeElement but wraps in a try-catch block. In IE it is                                          // 15279
 * not safe to call document.activeElement if there is nothing focused.                                                // 15280
 *                                                                                                                     // 15281
 * The activeElement will be null only if the document body is not yet defined.                                        // 15282
 */                                                                                                                    // 15283
function getActiveElement() /*?DOMElement*/ {                                                                          // 15284
  try {                                                                                                                // 15285
    return document.activeElement || document.body;                                                                    // 15286
  } catch (e) {                                                                                                        // 15287
    return document.body;                                                                                              // 15288
  }                                                                                                                    // 15289
}                                                                                                                      // 15290
                                                                                                                       // 15291
module.exports = getActiveElement;                                                                                     // 15292
                                                                                                                       // 15293
},{}],103:[function(_dereq_,module,exports){                                                                           // 15294
/**                                                                                                                    // 15295
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15296
 *                                                                                                                     // 15297
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15298
 * you may not use this file except in compliance with the License.                                                    // 15299
 * You may obtain a copy of the License at                                                                             // 15300
 *                                                                                                                     // 15301
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15302
 *                                                                                                                     // 15303
 * Unless required by applicable law or agreed to in writing, software                                                 // 15304
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15305
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15306
 * See the License for the specific language governing permissions and                                                 // 15307
 * limitations under the License.                                                                                      // 15308
 *                                                                                                                     // 15309
 * @providesModule getEventKey                                                                                         // 15310
 * @typechecks static-only                                                                                             // 15311
 */                                                                                                                    // 15312
                                                                                                                       // 15313
"use strict";                                                                                                          // 15314
                                                                                                                       // 15315
/**                                                                                                                    // 15316
 * Normalization of deprecated HTML5 "key" values                                                                      // 15317
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 15318
 */                                                                                                                    // 15319
var normalizeKey = {                                                                                                   // 15320
  'Esc': 'Escape',                                                                                                     // 15321
  'Spacebar': ' ',                                                                                                     // 15322
  'Left': 'ArrowLeft',                                                                                                 // 15323
  'Up': 'ArrowUp',                                                                                                     // 15324
  'Right': 'ArrowRight',                                                                                               // 15325
  'Down': 'ArrowDown',                                                                                                 // 15326
  'Del': 'Delete',                                                                                                     // 15327
  'Win': 'OS',                                                                                                         // 15328
  'Menu': 'ContextMenu',                                                                                               // 15329
  'Apps': 'ContextMenu',                                                                                               // 15330
  'Scroll': 'ScrollLock',                                                                                              // 15331
  'MozPrintableKey': 'Unidentified'                                                                                    // 15332
};                                                                                                                     // 15333
                                                                                                                       // 15334
/**                                                                                                                    // 15335
 * Translation from legacy "which/keyCode" to HTML5 "key"                                                              // 15336
 * Only special keys supported, all others depend on keyboard layout or browser                                        // 15337
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 15338
 */                                                                                                                    // 15339
var translateToKey = {                                                                                                 // 15340
  8: 'Backspace',                                                                                                      // 15341
  9: 'Tab',                                                                                                            // 15342
  12: 'Clear',                                                                                                         // 15343
  13: 'Enter',                                                                                                         // 15344
  16: 'Shift',                                                                                                         // 15345
  17: 'Control',                                                                                                       // 15346
  18: 'Alt',                                                                                                           // 15347
  19: 'Pause',                                                                                                         // 15348
  20: 'CapsLock',                                                                                                      // 15349
  27: 'Escape',                                                                                                        // 15350
  32: ' ',                                                                                                             // 15351
  33: 'PageUp',                                                                                                        // 15352
  34: 'PageDown',                                                                                                      // 15353
  35: 'End',                                                                                                           // 15354
  36: 'Home',                                                                                                          // 15355
  37: 'ArrowLeft',                                                                                                     // 15356
  38: 'ArrowUp',                                                                                                       // 15357
  39: 'ArrowRight',                                                                                                    // 15358
  40: 'ArrowDown',                                                                                                     // 15359
  45: 'Insert',                                                                                                        // 15360
  46: 'Delete',                                                                                                        // 15361
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',                                                    // 15362
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',                                                 // 15363
  144: 'NumLock',                                                                                                      // 15364
  145: 'ScrollLock',                                                                                                   // 15365
  224: 'Meta'                                                                                                          // 15366
};                                                                                                                     // 15367
                                                                                                                       // 15368
/**                                                                                                                    // 15369
 * @param {object} nativeEvent Native browser event.                                                                   // 15370
 * @return {string} Normalized `key` property.                                                                         // 15371
 */                                                                                                                    // 15372
function getEventKey(nativeEvent) {                                                                                    // 15373
  return 'key' in nativeEvent ?                                                                                        // 15374
    normalizeKey[nativeEvent.key] || nativeEvent.key :                                                                 // 15375
    translateToKey[nativeEvent.which || nativeEvent.keyCode] || 'Unidentified';                                        // 15376
}                                                                                                                      // 15377
                                                                                                                       // 15378
module.exports = getEventKey;                                                                                          // 15379
                                                                                                                       // 15380
},{}],104:[function(_dereq_,module,exports){                                                                           // 15381
/**                                                                                                                    // 15382
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15383
 *                                                                                                                     // 15384
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15385
 * you may not use this file except in compliance with the License.                                                    // 15386
 * You may obtain a copy of the License at                                                                             // 15387
 *                                                                                                                     // 15388
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15389
 *                                                                                                                     // 15390
 * Unless required by applicable law or agreed to in writing, software                                                 // 15391
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15392
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15393
 * See the License for the specific language governing permissions and                                                 // 15394
 * limitations under the License.                                                                                      // 15395
 *                                                                                                                     // 15396
 * @providesModule getEventTarget                                                                                      // 15397
 * @typechecks static-only                                                                                             // 15398
 */                                                                                                                    // 15399
                                                                                                                       // 15400
"use strict";                                                                                                          // 15401
                                                                                                                       // 15402
/**                                                                                                                    // 15403
 * Gets the target node from a native browser event by accounting for                                                  // 15404
 * inconsistencies in browser DOM APIs.                                                                                // 15405
 *                                                                                                                     // 15406
 * @param {object} nativeEvent Native browser event.                                                                   // 15407
 * @return {DOMEventTarget} Target node.                                                                               // 15408
 */                                                                                                                    // 15409
function getEventTarget(nativeEvent) {                                                                                 // 15410
  var target = nativeEvent.target || nativeEvent.srcElement || window;                                                 // 15411
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).                                                       // 15412
  // @see http://www.quirksmode.org/js/events_properties.html                                                          // 15413
  return target.nodeType === 3 ? target.parentNode : target;                                                           // 15414
}                                                                                                                      // 15415
                                                                                                                       // 15416
module.exports = getEventTarget;                                                                                       // 15417
                                                                                                                       // 15418
},{}],105:[function(_dereq_,module,exports){                                                                           // 15419
/**                                                                                                                    // 15420
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15421
 *                                                                                                                     // 15422
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15423
 * you may not use this file except in compliance with the License.                                                    // 15424
 * You may obtain a copy of the License at                                                                             // 15425
 *                                                                                                                     // 15426
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15427
 *                                                                                                                     // 15428
 * Unless required by applicable law or agreed to in writing, software                                                 // 15429
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15430
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15431
 * See the License for the specific language governing permissions and                                                 // 15432
 * limitations under the License.                                                                                      // 15433
 *                                                                                                                     // 15434
 * @providesModule getMarkupWrap                                                                                       // 15435
 */                                                                                                                    // 15436
                                                                                                                       // 15437
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 15438
                                                                                                                       // 15439
var invariant = _dereq_("./invariant");                                                                                // 15440
                                                                                                                       // 15441
/**                                                                                                                    // 15442
 * Dummy container used to detect which wraps are necessary.                                                           // 15443
 */                                                                                                                    // 15444
var dummyNode =                                                                                                        // 15445
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                               // 15446
                                                                                                                       // 15447
/**                                                                                                                    // 15448
 * Some browsers cannot use `innerHTML` to render certain elements standalone,                                         // 15449
 * so we wrap them, render the wrapped nodes, then extract the desired node.                                           // 15450
 *                                                                                                                     // 15451
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').                                           // 15452
 */                                                                                                                    // 15453
var shouldWrap = {                                                                                                     // 15454
  // Force wrapping for SVG elements because if they get created inside a <div>,                                       // 15455
  // they will be initialized in the wrong namespace (and will not display).                                           // 15456
  'circle': true,                                                                                                      // 15457
  'defs': true,                                                                                                        // 15458
  'g': true,                                                                                                           // 15459
  'line': true,                                                                                                        // 15460
  'linearGradient': true,                                                                                              // 15461
  'path': true,                                                                                                        // 15462
  'polygon': true,                                                                                                     // 15463
  'polyline': true,                                                                                                    // 15464
  'radialGradient': true,                                                                                              // 15465
  'rect': true,                                                                                                        // 15466
  'stop': true,                                                                                                        // 15467
  'text': true                                                                                                         // 15468
};                                                                                                                     // 15469
                                                                                                                       // 15470
var selectWrap = [1, '<select multiple="true">', '</select>'];                                                         // 15471
var tableWrap = [1, '<table>', '</table>'];                                                                            // 15472
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];                                                       // 15473
                                                                                                                       // 15474
var svgWrap = [1, '<svg>', '</svg>'];                                                                                  // 15475
                                                                                                                       // 15476
var markupWrap = {                                                                                                     // 15477
  '*': [1, '?<div>', '</div>'],                                                                                        // 15478
                                                                                                                       // 15479
  'area': [1, '<map>', '</map>'],                                                                                      // 15480
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],                                               // 15481
  'legend': [1, '<fieldset>', '</fieldset>'],                                                                          // 15482
  'param': [1, '<object>', '</object>'],                                                                               // 15483
  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 15484
                                                                                                                       // 15485
  'optgroup': selectWrap,                                                                                              // 15486
  'option': selectWrap,                                                                                                // 15487
                                                                                                                       // 15488
  'caption': tableWrap,                                                                                                // 15489
  'colgroup': tableWrap,                                                                                               // 15490
  'tbody': tableWrap,                                                                                                  // 15491
  'tfoot': tableWrap,                                                                                                  // 15492
  'thead': tableWrap,                                                                                                  // 15493
                                                                                                                       // 15494
  'td': trWrap,                                                                                                        // 15495
  'th': trWrap,                                                                                                        // 15496
                                                                                                                       // 15497
  'circle': svgWrap,                                                                                                   // 15498
  'defs': svgWrap,                                                                                                     // 15499
  'g': svgWrap,                                                                                                        // 15500
  'line': svgWrap,                                                                                                     // 15501
  'linearGradient': svgWrap,                                                                                           // 15502
  'path': svgWrap,                                                                                                     // 15503
  'polygon': svgWrap,                                                                                                  // 15504
  'polyline': svgWrap,                                                                                                 // 15505
  'radialGradient': svgWrap,                                                                                           // 15506
  'rect': svgWrap,                                                                                                     // 15507
  'stop': svgWrap,                                                                                                     // 15508
  'text': svgWrap                                                                                                      // 15509
};                                                                                                                     // 15510
                                                                                                                       // 15511
/**                                                                                                                    // 15512
 * Gets the markup wrap configuration for the supplied `nodeName`.                                                     // 15513
 *                                                                                                                     // 15514
 * NOTE: This lazily detects which wraps are necessary for the current browser.                                        // 15515
 *                                                                                                                     // 15516
 * @param {string} nodeName Lowercase `nodeName`.                                                                      // 15517
 * @return {?array} Markup wrap configuration, if applicable.                                                          // 15518
 */                                                                                                                    // 15519
function getMarkupWrap(nodeName) {                                                                                     // 15520
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {                                                                          // 15522
    nodeName = '*';                                                                                                    // 15523
  }                                                                                                                    // 15524
  if (!shouldWrap.hasOwnProperty(nodeName)) {                                                                          // 15525
    if (nodeName === '*') {                                                                                            // 15526
      dummyNode.innerHTML = '<link />';                                                                                // 15527
    } else {                                                                                                           // 15528
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';                                                   // 15529
    }                                                                                                                  // 15530
    shouldWrap[nodeName] = !dummyNode.firstChild;                                                                      // 15531
  }                                                                                                                    // 15532
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;                                                           // 15533
}                                                                                                                      // 15534
                                                                                                                       // 15535
                                                                                                                       // 15536
module.exports = getMarkupWrap;                                                                                        // 15537
                                                                                                                       // 15538
},{"./ExecutionEnvironment":20,"./invariant":112}],106:[function(_dereq_,module,exports){                              // 15539
/**                                                                                                                    // 15540
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15541
 *                                                                                                                     // 15542
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15543
 * you may not use this file except in compliance with the License.                                                    // 15544
 * You may obtain a copy of the License at                                                                             // 15545
 *                                                                                                                     // 15546
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15547
 *                                                                                                                     // 15548
 * Unless required by applicable law or agreed to in writing, software                                                 // 15549
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15550
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15551
 * See the License for the specific language governing permissions and                                                 // 15552
 * limitations under the License.                                                                                      // 15553
 *                                                                                                                     // 15554
 * @providesModule getNodeForCharacterOffset                                                                           // 15555
 */                                                                                                                    // 15556
                                                                                                                       // 15557
"use strict";                                                                                                          // 15558
                                                                                                                       // 15559
/**                                                                                                                    // 15560
 * Given any node return the first leaf node without children.                                                         // 15561
 *                                                                                                                     // 15562
 * @param {DOMElement|DOMTextNode} node                                                                                // 15563
 * @return {DOMElement|DOMTextNode}                                                                                    // 15564
 */                                                                                                                    // 15565
function getLeafNode(node) {                                                                                           // 15566
  while (node && node.firstChild) {                                                                                    // 15567
    node = node.firstChild;                                                                                            // 15568
  }                                                                                                                    // 15569
  return node;                                                                                                         // 15570
}                                                                                                                      // 15571
                                                                                                                       // 15572
/**                                                                                                                    // 15573
 * Get the next sibling within a container. This will walk up the                                                      // 15574
 * DOM if a node's siblings have been exhausted.                                                                       // 15575
 *                                                                                                                     // 15576
 * @param {DOMElement|DOMTextNode} node                                                                                // 15577
 * @return {?DOMElement|DOMTextNode}                                                                                   // 15578
 */                                                                                                                    // 15579
function getSiblingNode(node) {                                                                                        // 15580
  while (node) {                                                                                                       // 15581
    if (node.nextSibling) {                                                                                            // 15582
      return node.nextSibling;                                                                                         // 15583
    }                                                                                                                  // 15584
    node = node.parentNode;                                                                                            // 15585
  }                                                                                                                    // 15586
}                                                                                                                      // 15587
                                                                                                                       // 15588
/**                                                                                                                    // 15589
 * Get object describing the nodes which contain characters at offset.                                                 // 15590
 *                                                                                                                     // 15591
 * @param {DOMElement|DOMTextNode} root                                                                                // 15592
 * @param {number} offset                                                                                              // 15593
 * @return {?object}                                                                                                   // 15594
 */                                                                                                                    // 15595
function getNodeForCharacterOffset(root, offset) {                                                                     // 15596
  var node = getLeafNode(root);                                                                                        // 15597
  var nodeStart = 0;                                                                                                   // 15598
  var nodeEnd = 0;                                                                                                     // 15599
                                                                                                                       // 15600
  while (node) {                                                                                                       // 15601
    if (node.nodeType == 3) {                                                                                          // 15602
      nodeEnd = nodeStart + node.textContent.length;                                                                   // 15603
                                                                                                                       // 15604
      if (nodeStart <= offset && nodeEnd >= offset) {                                                                  // 15605
        return {                                                                                                       // 15606
          node: node,                                                                                                  // 15607
          offset: offset - nodeStart                                                                                   // 15608
        };                                                                                                             // 15609
      }                                                                                                                // 15610
                                                                                                                       // 15611
      nodeStart = nodeEnd;                                                                                             // 15612
    }                                                                                                                  // 15613
                                                                                                                       // 15614
    node = getLeafNode(getSiblingNode(node));                                                                          // 15615
  }                                                                                                                    // 15616
}                                                                                                                      // 15617
                                                                                                                       // 15618
module.exports = getNodeForCharacterOffset;                                                                            // 15619
                                                                                                                       // 15620
},{}],107:[function(_dereq_,module,exports){                                                                           // 15621
/**                                                                                                                    // 15622
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15623
 *                                                                                                                     // 15624
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15625
 * you may not use this file except in compliance with the License.                                                    // 15626
 * You may obtain a copy of the License at                                                                             // 15627
 *                                                                                                                     // 15628
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15629
 *                                                                                                                     // 15630
 * Unless required by applicable law or agreed to in writing, software                                                 // 15631
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15632
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15633
 * See the License for the specific language governing permissions and                                                 // 15634
 * limitations under the License.                                                                                      // 15635
 *                                                                                                                     // 15636
 * @providesModule getReactRootElementInContainer                                                                      // 15637
 */                                                                                                                    // 15638
                                                                                                                       // 15639
"use strict";                                                                                                          // 15640
                                                                                                                       // 15641
var DOC_NODE_TYPE = 9;                                                                                                 // 15642
                                                                                                                       // 15643
/**                                                                                                                    // 15644
 * @param {DOMElement|DOMDocument} container DOM element that may contain                                              // 15645
 *                                           a React component                                                         // 15646
 * @return {?*} DOM element that may have the reactRoot ID, or null.                                                   // 15647
 */                                                                                                                    // 15648
function getReactRootElementInContainer(container) {                                                                   // 15649
  if (!container) {                                                                                                    // 15650
    return null;                                                                                                       // 15651
  }                                                                                                                    // 15652
                                                                                                                       // 15653
  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 15654
    return container.documentElement;                                                                                  // 15655
  } else {                                                                                                             // 15656
    return container.firstChild;                                                                                       // 15657
  }                                                                                                                    // 15658
}                                                                                                                      // 15659
                                                                                                                       // 15660
module.exports = getReactRootElementInContainer;                                                                       // 15661
                                                                                                                       // 15662
},{}],108:[function(_dereq_,module,exports){                                                                           // 15663
/**                                                                                                                    // 15664
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15665
 *                                                                                                                     // 15666
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15667
 * you may not use this file except in compliance with the License.                                                    // 15668
 * You may obtain a copy of the License at                                                                             // 15669
 *                                                                                                                     // 15670
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15671
 *                                                                                                                     // 15672
 * Unless required by applicable law or agreed to in writing, software                                                 // 15673
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15674
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15675
 * See the License for the specific language governing permissions and                                                 // 15676
 * limitations under the License.                                                                                      // 15677
 *                                                                                                                     // 15678
 * @providesModule getTextContentAccessor                                                                              // 15679
 */                                                                                                                    // 15680
                                                                                                                       // 15681
"use strict";                                                                                                          // 15682
                                                                                                                       // 15683
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 15684
                                                                                                                       // 15685
var contentKey = null;                                                                                                 // 15686
                                                                                                                       // 15687
/**                                                                                                                    // 15688
 * Gets the key used to access text content on a DOM node.                                                             // 15689
 *                                                                                                                     // 15690
 * @return {?string} Key used to access text content.                                                                  // 15691
 * @internal                                                                                                           // 15692
 */                                                                                                                    // 15693
function getTextContentAccessor() {                                                                                    // 15694
  if (!contentKey && ExecutionEnvironment.canUseDOM) {                                                                 // 15695
    // Prefer textContent to innerText because many browsers support both but                                          // 15696
    // SVG <text> elements don't support innerText even when <div> does.                                               // 15697
    contentKey = 'textContent' in document.createElement('div') ?                                                      // 15698
      'textContent' :                                                                                                  // 15699
      'innerText';                                                                                                     // 15700
  }                                                                                                                    // 15701
  return contentKey;                                                                                                   // 15702
}                                                                                                                      // 15703
                                                                                                                       // 15704
module.exports = getTextContentAccessor;                                                                               // 15705
                                                                                                                       // 15706
},{"./ExecutionEnvironment":20}],109:[function(_dereq_,module,exports){                                                // 15707
/**                                                                                                                    // 15708
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15709
 *                                                                                                                     // 15710
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15711
 * you may not use this file except in compliance with the License.                                                    // 15712
 * You may obtain a copy of the License at                                                                             // 15713
 *                                                                                                                     // 15714
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15715
 *                                                                                                                     // 15716
 * Unless required by applicable law or agreed to in writing, software                                                 // 15717
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15718
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15719
 * See the License for the specific language governing permissions and                                                 // 15720
 * limitations under the License.                                                                                      // 15721
 *                                                                                                                     // 15722
 * @providesModule getUnboundedScrollPosition                                                                          // 15723
 * @typechecks                                                                                                         // 15724
 */                                                                                                                    // 15725
                                                                                                                       // 15726
"use strict";                                                                                                          // 15727
                                                                                                                       // 15728
/**                                                                                                                    // 15729
 * Gets the scroll position of the supplied element or window.                                                         // 15730
 *                                                                                                                     // 15731
 * The return values are unbounded, unlike `getScrollPosition`. This means they                                        // 15732
 * may be negative or exceed the element boundaries (which is possible using                                           // 15733
 * inertial scrolling).                                                                                                // 15734
 *                                                                                                                     // 15735
 * @param {DOMWindow|DOMElement} scrollable                                                                            // 15736
 * @return {object} Map with `x` and `y` keys.                                                                         // 15737
 */                                                                                                                    // 15738
function getUnboundedScrollPosition(scrollable) {                                                                      // 15739
  if (scrollable === window) {                                                                                         // 15740
    return {                                                                                                           // 15741
      x: window.pageXOffset || document.documentElement.scrollLeft,                                                    // 15742
      y: window.pageYOffset || document.documentElement.scrollTop                                                      // 15743
    };                                                                                                                 // 15744
  }                                                                                                                    // 15745
  return {                                                                                                             // 15746
    x: scrollable.scrollLeft,                                                                                          // 15747
    y: scrollable.scrollTop                                                                                            // 15748
  };                                                                                                                   // 15749
}                                                                                                                      // 15750
                                                                                                                       // 15751
module.exports = getUnboundedScrollPosition;                                                                           // 15752
                                                                                                                       // 15753
},{}],110:[function(_dereq_,module,exports){                                                                           // 15754
/**                                                                                                                    // 15755
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15756
 *                                                                                                                     // 15757
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15758
 * you may not use this file except in compliance with the License.                                                    // 15759
 * You may obtain a copy of the License at                                                                             // 15760
 *                                                                                                                     // 15761
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15762
 *                                                                                                                     // 15763
 * Unless required by applicable law or agreed to in writing, software                                                 // 15764
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15765
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15766
 * See the License for the specific language governing permissions and                                                 // 15767
 * limitations under the License.                                                                                      // 15768
 *                                                                                                                     // 15769
 * @providesModule hyphenate                                                                                           // 15770
 * @typechecks                                                                                                         // 15771
 */                                                                                                                    // 15772
                                                                                                                       // 15773
var _uppercasePattern = /([A-Z])/g;                                                                                    // 15774
                                                                                                                       // 15775
/**                                                                                                                    // 15776
 * Hyphenates a camelcased string, for example:                                                                        // 15777
 *                                                                                                                     // 15778
 *   > hyphenate('backgroundColor')                                                                                    // 15779
 *   < "background-color"                                                                                              // 15780
 *                                                                                                                     // 15781
 * @param {string} string                                                                                              // 15782
 * @return {string}                                                                                                    // 15783
 */                                                                                                                    // 15784
function hyphenate(string) {                                                                                           // 15785
  return string.replace(_uppercasePattern, '-$1').toLowerCase();                                                       // 15786
}                                                                                                                      // 15787
                                                                                                                       // 15788
module.exports = hyphenate;                                                                                            // 15789
                                                                                                                       // 15790
},{}],111:[function(_dereq_,module,exports){                                                                           // 15791
/**                                                                                                                    // 15792
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15793
 *                                                                                                                     // 15794
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15795
 * you may not use this file except in compliance with the License.                                                    // 15796
 * You may obtain a copy of the License at                                                                             // 15797
 *                                                                                                                     // 15798
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15799
 *                                                                                                                     // 15800
 * Unless required by applicable law or agreed to in writing, software                                                 // 15801
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15802
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15803
 * See the License for the specific language governing permissions and                                                 // 15804
 * limitations under the License.                                                                                      // 15805
 *                                                                                                                     // 15806
 * @providesModule instantiateReactComponent                                                                           // 15807
 * @typechecks static-only                                                                                             // 15808
 */                                                                                                                    // 15809
                                                                                                                       // 15810
"use strict";                                                                                                          // 15811
                                                                                                                       // 15812
var warning = _dereq_("./warning");                                                                                    // 15813
                                                                                                                       // 15814
/**                                                                                                                    // 15815
 * Validate a `componentDescriptor`. This should be exposed publicly in a follow                                       // 15816
 * up diff.                                                                                                            // 15817
 *                                                                                                                     // 15818
 * @param {object} descriptor                                                                                          // 15819
 * @return {boolean} Returns true if this is a valid descriptor of a Component.                                        // 15820
 */                                                                                                                    // 15821
function isValidComponentDescriptor(descriptor) {                                                                      // 15822
  return (                                                                                                             // 15823
    typeof descriptor.constructor === 'function' &&                                                                    // 15824
    typeof descriptor.constructor.prototype.construct === 'function' &&                                                // 15825
    typeof descriptor.constructor.prototype.mountComponent === 'function' &&                                           // 15826
    typeof descriptor.constructor.prototype.receiveComponent === 'function'                                            // 15827
  );                                                                                                                   // 15828
}                                                                                                                      // 15829
                                                                                                                       // 15830
/**                                                                                                                    // 15831
 * Given a `componentDescriptor` create an instance that will actually be                                              // 15832
 * mounted. Currently it just extracts an existing clone from composite                                                // 15833
 * components but this is an implementation detail which will change.                                                  // 15834
 *                                                                                                                     // 15835
 * @param {object} descriptor                                                                                          // 15836
 * @return {object} A new instance of componentDescriptor's constructor.                                               // 15837
 * @protected                                                                                                          // 15838
 */                                                                                                                    // 15839
function instantiateReactComponent(descriptor) {                                                                       // 15840
  if ("production" !== "development") {                                                                                // 15841
    ("production" !== "development" ? warning(                                                                         // 15842
      isValidComponentDescriptor(descriptor),                                                                          // 15843
      'Only React Components are valid for mounting.'                                                                  // 15844
    ) : null);                                                                                                         // 15845
    // We use the clone of a composite component instead of the original                                               // 15846
    // instance. This allows us to warn you if you're are accessing the wrong                                          // 15847
    // instance.                                                                                                       // 15848
    var instance = descriptor.__realComponentInstance || descriptor;                                                   // 15849
    instance._descriptor = descriptor;                                                                                 // 15850
    return instance;                                                                                                   // 15851
  }                                                                                                                    // 15852
  // In prod we don't clone, we simply use the same instance for unaffected                                            // 15853
  // behavior. We have to keep the descriptor around for comparison later on.                                          // 15854
  // This should ideally be accepted in the constructor of the instance but                                            // 15855
  // since that is currently overloaded, we just manually attach it here.                                              // 15856
  descriptor._descriptor = descriptor;                                                                                 // 15857
  return descriptor;                                                                                                   // 15858
}                                                                                                                      // 15859
                                                                                                                       // 15860
module.exports = instantiateReactComponent;                                                                            // 15861
                                                                                                                       // 15862
},{"./warning":134}],112:[function(_dereq_,module,exports){                                                            // 15863
/**                                                                                                                    // 15864
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15865
 *                                                                                                                     // 15866
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15867
 * you may not use this file except in compliance with the License.                                                    // 15868
 * You may obtain a copy of the License at                                                                             // 15869
 *                                                                                                                     // 15870
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15871
 *                                                                                                                     // 15872
 * Unless required by applicable law or agreed to in writing, software                                                 // 15873
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15874
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15875
 * See the License for the specific language governing permissions and                                                 // 15876
 * limitations under the License.                                                                                      // 15877
 *                                                                                                                     // 15878
 * @providesModule invariant                                                                                           // 15879
 */                                                                                                                    // 15880
                                                                                                                       // 15881
"use strict";                                                                                                          // 15882
                                                                                                                       // 15883
/**                                                                                                                    // 15884
 * Use invariant() to assert state which your program assumes to be true.                                              // 15885
 *                                                                                                                     // 15886
 * Provide sprintf-style format (only %s is supported) and arguments                                                   // 15887
 * to provide information about what broke and what you were                                                           // 15888
 * expecting.                                                                                                          // 15889
 *                                                                                                                     // 15890
 * The invariant message will be stripped in production, but the invariant                                             // 15891
 * will remain to ensure logic does not differ in production.                                                          // 15892
 */                                                                                                                    // 15893
                                                                                                                       // 15894
var invariant = function(condition) {                                                                                  // 15895
  if (!condition) {                                                                                                    // 15896
    var error = new Error(                                                                                             // 15897
      'Minified exception occured; use the non-minified dev environment for ' +                                        // 15898
      'the full error message and additional helpful warnings.'                                                        // 15899
    );                                                                                                                 // 15900
    error.framesToPop = 1;                                                                                             // 15901
    throw error;                                                                                                       // 15902
  }                                                                                                                    // 15903
};                                                                                                                     // 15904
                                                                                                                       // 15905
if ("production" !== "development") {                                                                                  // 15906
  invariant = function(condition, format, a, b, c, d, e, f) {                                                          // 15907
    if (format === undefined) {                                                                                        // 15908
      throw new Error('invariant requires an error message argument');                                                 // 15909
    }                                                                                                                  // 15910
                                                                                                                       // 15911
    if (!condition) {                                                                                                  // 15912
      var args = [a, b, c, d, e, f];                                                                                   // 15913
      var argIndex = 0;                                                                                                // 15914
      var error = new Error(                                                                                           // 15915
        'Invariant Violation: ' +                                                                                      // 15916
        format.replace(/%s/g, function() { return args[argIndex++]; })                                                 // 15917
      );                                                                                                               // 15918
      error.framesToPop = 1; // we don't care about invariant's own frame                                              // 15919
      throw error;                                                                                                     // 15920
    }                                                                                                                  // 15921
  };                                                                                                                   // 15922
}                                                                                                                      // 15923
                                                                                                                       // 15924
module.exports = invariant;                                                                                            // 15925
                                                                                                                       // 15926
},{}],113:[function(_dereq_,module,exports){                                                                           // 15927
/**                                                                                                                    // 15928
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 15929
 *                                                                                                                     // 15930
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15931
 * you may not use this file except in compliance with the License.                                                    // 15932
 * You may obtain a copy of the License at                                                                             // 15933
 *                                                                                                                     // 15934
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15935
 *                                                                                                                     // 15936
 * Unless required by applicable law or agreed to in writing, software                                                 // 15937
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15938
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15939
 * See the License for the specific language governing permissions and                                                 // 15940
 * limitations under the License.                                                                                      // 15941
 *                                                                                                                     // 15942
 * @providesModule isEventSupported                                                                                    // 15943
 */                                                                                                                    // 15944
                                                                                                                       // 15945
"use strict";                                                                                                          // 15946
                                                                                                                       // 15947
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 15948
                                                                                                                       // 15949
var useHasFeature;                                                                                                     // 15950
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 15951
  useHasFeature =                                                                                                      // 15952
    document.implementation &&                                                                                         // 15953
    document.implementation.hasFeature &&                                                                              // 15954
    // always returns true in newer browsers as per the standard.                                                      // 15955
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature                                               // 15956
    document.implementation.hasFeature('', '') !== true;                                                               // 15957
}                                                                                                                      // 15958
                                                                                                                       // 15959
/**                                                                                                                    // 15960
 * Checks if an event is supported in the current execution environment.                                               // 15961
 *                                                                                                                     // 15962
 * NOTE: This will not work correctly for non-generic events such as `change`,                                         // 15963
 * `reset`, `load`, `error`, and `select`.                                                                             // 15964
 *                                                                                                                     // 15965
 * Borrows from Modernizr.                                                                                             // 15966
 *                                                                                                                     // 15967
 * @param {string} eventNameSuffix Event name, e.g. "click".                                                           // 15968
 * @param {?boolean} capture Check if the capture phase is supported.                                                  // 15969
 * @return {boolean} True if the event is supported.                                                                   // 15970
 * @internal                                                                                                           // 15971
 * @license Modernizr 3.0.0pre (Custom Build) | MIT                                                                    // 15972
 */                                                                                                                    // 15973
function isEventSupported(eventNameSuffix, capture) {                                                                  // 15974
  if (!ExecutionEnvironment.canUseDOM ||                                                                               // 15975
      capture && !('addEventListener' in document)) {                                                                  // 15976
    return false;                                                                                                      // 15977
  }                                                                                                                    // 15978
                                                                                                                       // 15979
  var eventName = 'on' + eventNameSuffix;                                                                              // 15980
  var isSupported = eventName in document;                                                                             // 15981
                                                                                                                       // 15982
  if (!isSupported) {                                                                                                  // 15983
    var element = document.createElement('div');                                                                       // 15984
    element.setAttribute(eventName, 'return;');                                                                        // 15985
    isSupported = typeof element[eventName] === 'function';                                                            // 15986
  }                                                                                                                    // 15987
                                                                                                                       // 15988
  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {                                                  // 15989
    // This is the only way to test support for the `wheel` event in IE9+.                                             // 15990
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');                                           // 15991
  }                                                                                                                    // 15992
                                                                                                                       // 15993
  return isSupported;                                                                                                  // 15994
}                                                                                                                      // 15995
                                                                                                                       // 15996
module.exports = isEventSupported;                                                                                     // 15997
                                                                                                                       // 15998
},{"./ExecutionEnvironment":20}],114:[function(_dereq_,module,exports){                                                // 15999
/**                                                                                                                    // 16000
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16001
 *                                                                                                                     // 16002
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16003
 * you may not use this file except in compliance with the License.                                                    // 16004
 * You may obtain a copy of the License at                                                                             // 16005
 *                                                                                                                     // 16006
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16007
 *                                                                                                                     // 16008
 * Unless required by applicable law or agreed to in writing, software                                                 // 16009
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16010
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16011
 * See the License for the specific language governing permissions and                                                 // 16012
 * limitations under the License.                                                                                      // 16013
 *                                                                                                                     // 16014
 * @providesModule isNode                                                                                              // 16015
 * @typechecks                                                                                                         // 16016
 */                                                                                                                    // 16017
                                                                                                                       // 16018
/**                                                                                                                    // 16019
 * @param {*} object The object to check.                                                                              // 16020
 * @return {boolean} Whether or not the object is a DOM node.                                                          // 16021
 */                                                                                                                    // 16022
function isNode(object) {                                                                                              // 16023
  return !!(object && (                                                                                                // 16024
    typeof Node === 'function' ? object instanceof Node :                                                              // 16025
      typeof object === 'object' &&                                                                                    // 16026
      typeof object.nodeType === 'number' &&                                                                           // 16027
      typeof object.nodeName === 'string'                                                                              // 16028
  ));                                                                                                                  // 16029
}                                                                                                                      // 16030
                                                                                                                       // 16031
module.exports = isNode;                                                                                               // 16032
                                                                                                                       // 16033
},{}],115:[function(_dereq_,module,exports){                                                                           // 16034
/**                                                                                                                    // 16035
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16036
 *                                                                                                                     // 16037
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16038
 * you may not use this file except in compliance with the License.                                                    // 16039
 * You may obtain a copy of the License at                                                                             // 16040
 *                                                                                                                     // 16041
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16042
 *                                                                                                                     // 16043
 * Unless required by applicable law or agreed to in writing, software                                                 // 16044
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16045
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16046
 * See the License for the specific language governing permissions and                                                 // 16047
 * limitations under the License.                                                                                      // 16048
 *                                                                                                                     // 16049
 * @providesModule isTextInputElement                                                                                  // 16050
 */                                                                                                                    // 16051
                                                                                                                       // 16052
"use strict";                                                                                                          // 16053
                                                                                                                       // 16054
/**                                                                                                                    // 16055
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary     // 16056
 */                                                                                                                    // 16057
var supportedInputTypes = {                                                                                            // 16058
  'color': true,                                                                                                       // 16059
  'date': true,                                                                                                        // 16060
  'datetime': true,                                                                                                    // 16061
  'datetime-local': true,                                                                                              // 16062
  'email': true,                                                                                                       // 16063
  'month': true,                                                                                                       // 16064
  'number': true,                                                                                                      // 16065
  'password': true,                                                                                                    // 16066
  'range': true,                                                                                                       // 16067
  'search': true,                                                                                                      // 16068
  'tel': true,                                                                                                         // 16069
  'text': true,                                                                                                        // 16070
  'time': true,                                                                                                        // 16071
  'url': true,                                                                                                         // 16072
  'week': true                                                                                                         // 16073
};                                                                                                                     // 16074
                                                                                                                       // 16075
function isTextInputElement(elem) {                                                                                    // 16076
  return elem && (                                                                                                     // 16077
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||                                                   // 16078
    elem.nodeName === 'TEXTAREA'                                                                                       // 16079
  );                                                                                                                   // 16080
}                                                                                                                      // 16081
                                                                                                                       // 16082
module.exports = isTextInputElement;                                                                                   // 16083
                                                                                                                       // 16084
},{}],116:[function(_dereq_,module,exports){                                                                           // 16085
/**                                                                                                                    // 16086
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16087
 *                                                                                                                     // 16088
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16089
 * you may not use this file except in compliance with the License.                                                    // 16090
 * You may obtain a copy of the License at                                                                             // 16091
 *                                                                                                                     // 16092
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16093
 *                                                                                                                     // 16094
 * Unless required by applicable law or agreed to in writing, software                                                 // 16095
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16096
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16097
 * See the License for the specific language governing permissions and                                                 // 16098
 * limitations under the License.                                                                                      // 16099
 *                                                                                                                     // 16100
 * @providesModule isTextNode                                                                                          // 16101
 * @typechecks                                                                                                         // 16102
 */                                                                                                                    // 16103
                                                                                                                       // 16104
var isNode = _dereq_("./isNode");                                                                                      // 16105
                                                                                                                       // 16106
/**                                                                                                                    // 16107
 * @param {*} object The object to check.                                                                              // 16108
 * @return {boolean} Whether or not the object is a DOM text node.                                                     // 16109
 */                                                                                                                    // 16110
function isTextNode(object) {                                                                                          // 16111
  return isNode(object) && object.nodeType == 3;                                                                       // 16112
}                                                                                                                      // 16113
                                                                                                                       // 16114
module.exports = isTextNode;                                                                                           // 16115
                                                                                                                       // 16116
},{"./isNode":114}],117:[function(_dereq_,module,exports){                                                             // 16117
/**                                                                                                                    // 16118
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16119
 *                                                                                                                     // 16120
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16121
 * you may not use this file except in compliance with the License.                                                    // 16122
 * You may obtain a copy of the License at                                                                             // 16123
 *                                                                                                                     // 16124
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16125
 *                                                                                                                     // 16126
 * Unless required by applicable law or agreed to in writing, software                                                 // 16127
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16128
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16129
 * See the License for the specific language governing permissions and                                                 // 16130
 * limitations under the License.                                                                                      // 16131
 *                                                                                                                     // 16132
 * @providesModule joinClasses                                                                                         // 16133
 * @typechecks static-only                                                                                             // 16134
 */                                                                                                                    // 16135
                                                                                                                       // 16136
"use strict";                                                                                                          // 16137
                                                                                                                       // 16138
/**                                                                                                                    // 16139
 * Combines multiple className strings into one.                                                                       // 16140
 * http://jsperf.com/joinclasses-args-vs-array                                                                         // 16141
 *                                                                                                                     // 16142
 * @param {...?string} classes                                                                                         // 16143
 * @return {string}                                                                                                    // 16144
 */                                                                                                                    // 16145
function joinClasses(className/*, ... */) {                                                                            // 16146
  if (!className) {                                                                                                    // 16147
    className = '';                                                                                                    // 16148
  }                                                                                                                    // 16149
  var nextClass;                                                                                                       // 16150
  var argLength = arguments.length;                                                                                    // 16151
  if (argLength > 1) {                                                                                                 // 16152
    for (var ii = 1; ii < argLength; ii++) {                                                                           // 16153
      nextClass = arguments[ii];                                                                                       // 16154
      nextClass && (className += ' ' + nextClass);                                                                     // 16155
    }                                                                                                                  // 16156
  }                                                                                                                    // 16157
  return className;                                                                                                    // 16158
}                                                                                                                      // 16159
                                                                                                                       // 16160
module.exports = joinClasses;                                                                                          // 16161
                                                                                                                       // 16162
},{}],118:[function(_dereq_,module,exports){                                                                           // 16163
/**                                                                                                                    // 16164
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16165
 *                                                                                                                     // 16166
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16167
 * you may not use this file except in compliance with the License.                                                    // 16168
 * You may obtain a copy of the License at                                                                             // 16169
 *                                                                                                                     // 16170
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16171
 *                                                                                                                     // 16172
 * Unless required by applicable law or agreed to in writing, software                                                 // 16173
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16174
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16175
 * See the License for the specific language governing permissions and                                                 // 16176
 * limitations under the License.                                                                                      // 16177
 *                                                                                                                     // 16178
 * @providesModule keyMirror                                                                                           // 16179
 * @typechecks static-only                                                                                             // 16180
 */                                                                                                                    // 16181
                                                                                                                       // 16182
"use strict";                                                                                                          // 16183
                                                                                                                       // 16184
var invariant = _dereq_("./invariant");                                                                                // 16185
                                                                                                                       // 16186
/**                                                                                                                    // 16187
 * Constructs an enumeration with keys equal to their value.                                                           // 16188
 *                                                                                                                     // 16189
 * For example:                                                                                                        // 16190
 *                                                                                                                     // 16191
 *   var COLORS = keyMirror({blue: null, red: null});                                                                  // 16192
 *   var myColor = COLORS.blue;                                                                                        // 16193
 *   var isColorValid = !!COLORS[myColor];                                                                             // 16194
 *                                                                                                                     // 16195
 * The last line could not be performed if the values of the generated enum were                                       // 16196
 * not equal to their keys.                                                                                            // 16197
 *                                                                                                                     // 16198
 *   Input:  {key1: val1, key2: val2}                                                                                  // 16199
 *   Output: {key1: key1, key2: key2}                                                                                  // 16200
 *                                                                                                                     // 16201
 * @param {object} obj                                                                                                 // 16202
 * @return {object}                                                                                                    // 16203
 */                                                                                                                    // 16204
var keyMirror = function(obj) {                                                                                        // 16205
  var ret = {};                                                                                                        // 16206
  var key;                                                                                                             // 16207
  ("production" !== "development" ? invariant(                                                                         // 16208
    obj instanceof Object && !Array.isArray(obj),                                                                      // 16209
    'keyMirror(...): Argument must be an object.'                                                                      // 16210
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));                                                        // 16211
  for (key in obj) {                                                                                                   // 16212
    if (!obj.hasOwnProperty(key)) {                                                                                    // 16213
      continue;                                                                                                        // 16214
    }                                                                                                                  // 16215
    ret[key] = key;                                                                                                    // 16216
  }                                                                                                                    // 16217
  return ret;                                                                                                          // 16218
};                                                                                                                     // 16219
                                                                                                                       // 16220
module.exports = keyMirror;                                                                                            // 16221
                                                                                                                       // 16222
},{"./invariant":112}],119:[function(_dereq_,module,exports){                                                          // 16223
/**                                                                                                                    // 16224
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16225
 *                                                                                                                     // 16226
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16227
 * you may not use this file except in compliance with the License.                                                    // 16228
 * You may obtain a copy of the License at                                                                             // 16229
 *                                                                                                                     // 16230
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16231
 *                                                                                                                     // 16232
 * Unless required by applicable law or agreed to in writing, software                                                 // 16233
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16234
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16235
 * See the License for the specific language governing permissions and                                                 // 16236
 * limitations under the License.                                                                                      // 16237
 *                                                                                                                     // 16238
 * @providesModule keyOf                                                                                               // 16239
 */                                                                                                                    // 16240
                                                                                                                       // 16241
/**                                                                                                                    // 16242
 * Allows extraction of a minified key. Let's the build system minify keys                                             // 16243
 * without loosing the ability to dynamically use key strings as values                                                // 16244
 * themselves. Pass in an object with a single key/val pair and it will return                                         // 16245
 * you the string key of that single record. Suppose you want to grab the                                              // 16246
 * value for a key 'className' inside of an object. Key/val minification may                                           // 16247
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return                                            // 16248
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then                                        // 16249
 * reuse those resolutions.                                                                                            // 16250
 */                                                                                                                    // 16251
var keyOf = function(oneKeyObj) {                                                                                      // 16252
  var key;                                                                                                             // 16253
  for (key in oneKeyObj) {                                                                                             // 16254
    if (!oneKeyObj.hasOwnProperty(key)) {                                                                              // 16255
      continue;                                                                                                        // 16256
    }                                                                                                                  // 16257
    return key;                                                                                                        // 16258
  }                                                                                                                    // 16259
  return null;                                                                                                         // 16260
};                                                                                                                     // 16261
                                                                                                                       // 16262
                                                                                                                       // 16263
module.exports = keyOf;                                                                                                // 16264
                                                                                                                       // 16265
},{}],120:[function(_dereq_,module,exports){                                                                           // 16266
/**                                                                                                                    // 16267
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16268
 *                                                                                                                     // 16269
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16270
 * you may not use this file except in compliance with the License.                                                    // 16271
 * You may obtain a copy of the License at                                                                             // 16272
 *                                                                                                                     // 16273
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16274
 *                                                                                                                     // 16275
 * Unless required by applicable law or agreed to in writing, software                                                 // 16276
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16277
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16278
 * See the License for the specific language governing permissions and                                                 // 16279
 * limitations under the License.                                                                                      // 16280
 *                                                                                                                     // 16281
 * @providesModule memoizeStringOnly                                                                                   // 16282
 * @typechecks static-only                                                                                             // 16283
 */                                                                                                                    // 16284
                                                                                                                       // 16285
"use strict";                                                                                                          // 16286
                                                                                                                       // 16287
/**                                                                                                                    // 16288
 * Memoizes the return value of a function that accepts one string argument.                                           // 16289
 *                                                                                                                     // 16290
 * @param {function} callback                                                                                          // 16291
 * @return {function}                                                                                                  // 16292
 */                                                                                                                    // 16293
function memoizeStringOnly(callback) {                                                                                 // 16294
  var cache = {};                                                                                                      // 16295
  return function(string) {                                                                                            // 16296
    if (cache.hasOwnProperty(string)) {                                                                                // 16297
      return cache[string];                                                                                            // 16298
    } else {                                                                                                           // 16299
      return cache[string] = callback.call(this, string);                                                              // 16300
    }                                                                                                                  // 16301
  };                                                                                                                   // 16302
}                                                                                                                      // 16303
                                                                                                                       // 16304
module.exports = memoizeStringOnly;                                                                                    // 16305
                                                                                                                       // 16306
},{}],121:[function(_dereq_,module,exports){                                                                           // 16307
/**                                                                                                                    // 16308
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16309
 *                                                                                                                     // 16310
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16311
 * you may not use this file except in compliance with the License.                                                    // 16312
 * You may obtain a copy of the License at                                                                             // 16313
 *                                                                                                                     // 16314
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16315
 *                                                                                                                     // 16316
 * Unless required by applicable law or agreed to in writing, software                                                 // 16317
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16318
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16319
 * See the License for the specific language governing permissions and                                                 // 16320
 * limitations under the License.                                                                                      // 16321
 *                                                                                                                     // 16322
 * @providesModule merge                                                                                               // 16323
 */                                                                                                                    // 16324
                                                                                                                       // 16325
"use strict";                                                                                                          // 16326
                                                                                                                       // 16327
var mergeInto = _dereq_("./mergeInto");                                                                                // 16328
                                                                                                                       // 16329
/**                                                                                                                    // 16330
 * Shallow merges two structures into a return value, without mutating either.                                         // 16331
 *                                                                                                                     // 16332
 * @param {?object} one Optional object with properties to merge from.                                                 // 16333
 * @param {?object} two Optional object with properties to merge from.                                                 // 16334
 * @return {object} The shallow extension of one by two.                                                               // 16335
 */                                                                                                                    // 16336
var merge = function(one, two) {                                                                                       // 16337
  var result = {};                                                                                                     // 16338
  mergeInto(result, one);                                                                                              // 16339
  mergeInto(result, two);                                                                                              // 16340
  return result;                                                                                                       // 16341
};                                                                                                                     // 16342
                                                                                                                       // 16343
module.exports = merge;                                                                                                // 16344
                                                                                                                       // 16345
},{"./mergeInto":123}],122:[function(_dereq_,module,exports){                                                          // 16346
/**                                                                                                                    // 16347
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16348
 *                                                                                                                     // 16349
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16350
 * you may not use this file except in compliance with the License.                                                    // 16351
 * You may obtain a copy of the License at                                                                             // 16352
 *                                                                                                                     // 16353
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16354
 *                                                                                                                     // 16355
 * Unless required by applicable law or agreed to in writing, software                                                 // 16356
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16357
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16358
 * See the License for the specific language governing permissions and                                                 // 16359
 * limitations under the License.                                                                                      // 16360
 *                                                                                                                     // 16361
 * @providesModule mergeHelpers                                                                                        // 16362
 *                                                                                                                     // 16363
 * requiresPolyfills: Array.isArray                                                                                    // 16364
 */                                                                                                                    // 16365
                                                                                                                       // 16366
"use strict";                                                                                                          // 16367
                                                                                                                       // 16368
var invariant = _dereq_("./invariant");                                                                                // 16369
var keyMirror = _dereq_("./keyMirror");                                                                                // 16370
                                                                                                                       // 16371
/**                                                                                                                    // 16372
 * Maximum number of levels to traverse. Will catch circular structures.                                               // 16373
 * @const                                                                                                              // 16374
 */                                                                                                                    // 16375
var MAX_MERGE_DEPTH = 36;                                                                                              // 16376
                                                                                                                       // 16377
/**                                                                                                                    // 16378
 * We won't worry about edge cases like new String('x') or new Boolean(true).                                          // 16379
 * Functions are considered terminals, and arrays are not.                                                             // 16380
 * @param {*} o The item/object/value to test.                                                                         // 16381
 * @return {boolean} true iff the argument is a terminal.                                                              // 16382
 */                                                                                                                    // 16383
var isTerminal = function(o) {                                                                                         // 16384
  return typeof o !== 'object' || o === null;                                                                          // 16385
};                                                                                                                     // 16386
                                                                                                                       // 16387
var mergeHelpers = {                                                                                                   // 16388
                                                                                                                       // 16389
  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,                                                                                    // 16390
                                                                                                                       // 16391
  isTerminal: isTerminal,                                                                                              // 16392
                                                                                                                       // 16393
  /**                                                                                                                  // 16394
   * Converts null/undefined values into empty object.                                                                 // 16395
   *                                                                                                                   // 16396
   * @param {?Object=} arg Argument to be normalized (nullable optional)                                               // 16397
   * @return {!Object}                                                                                                 // 16398
   */                                                                                                                  // 16399
  normalizeMergeArg: function(arg) {                                                                                   // 16400
    return arg === undefined || arg === null ? {} : arg;                                                               // 16401
  },                                                                                                                   // 16402
                                                                                                                       // 16403
  /**                                                                                                                  // 16404
   * If merging Arrays, a merge strategy *must* be supplied. If not, it is                                             // 16405
   * likely the caller's fault. If this function is ever called with anything                                          // 16406
   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.                                       // 16407
   *                                                                                                                   // 16408
   * @param {*} one Array to merge into.                                                                               // 16409
   * @param {*} two Array to merge from.                                                                               // 16410
   */                                                                                                                  // 16411
  checkMergeArrayArgs: function(one, two) {                                                                            // 16412
    ("production" !== "development" ? invariant(                                                                       // 16413
      Array.isArray(one) && Array.isArray(two),                                                                        // 16414
      'Tried to merge arrays, instead got %s and %s.',                                                                 // 16415
      one,                                                                                                             // 16416
      two                                                                                                              // 16417
    ) : invariant(Array.isArray(one) && Array.isArray(two)));                                                          // 16418
  },                                                                                                                   // 16419
                                                                                                                       // 16420
  /**                                                                                                                  // 16421
   * @param {*} one Object to merge into.                                                                              // 16422
   * @param {*} two Object to merge from.                                                                              // 16423
   */                                                                                                                  // 16424
  checkMergeObjectArgs: function(one, two) {                                                                           // 16425
    mergeHelpers.checkMergeObjectArg(one);                                                                             // 16426
    mergeHelpers.checkMergeObjectArg(two);                                                                             // 16427
  },                                                                                                                   // 16428
                                                                                                                       // 16429
  /**                                                                                                                  // 16430
   * @param {*} arg                                                                                                    // 16431
   */                                                                                                                  // 16432
  checkMergeObjectArg: function(arg) {                                                                                 // 16433
    ("production" !== "development" ? invariant(                                                                       // 16434
      !isTerminal(arg) && !Array.isArray(arg),                                                                         // 16435
      'Tried to merge an object, instead got %s.',                                                                     // 16436
      arg                                                                                                              // 16437
    ) : invariant(!isTerminal(arg) && !Array.isArray(arg)));                                                           // 16438
  },                                                                                                                   // 16439
                                                                                                                       // 16440
  /**                                                                                                                  // 16441
   * Checks that a merge was not given a circular object or an object that had                                         // 16442
   * too great of depth.                                                                                               // 16443
   *                                                                                                                   // 16444
   * @param {number} Level of recursion to validate against maximum.                                                   // 16445
   */                                                                                                                  // 16446
  checkMergeLevel: function(level) {                                                                                   // 16447
    ("production" !== "development" ? invariant(                                                                       // 16448
      level < MAX_MERGE_DEPTH,                                                                                         // 16449
      'Maximum deep merge depth exceeded. You may be attempting to merge ' +                                           // 16450
      'circular structures in an unsupported way.'                                                                     // 16451
    ) : invariant(level < MAX_MERGE_DEPTH));                                                                           // 16452
  },                                                                                                                   // 16453
                                                                                                                       // 16454
  /**                                                                                                                  // 16455
   * Checks that the supplied merge strategy is valid.                                                                 // 16456
   *                                                                                                                   // 16457
   * @param {string} Array merge strategy.                                                                             // 16458
   */                                                                                                                  // 16459
  checkArrayStrategy: function(strategy) {                                                                             // 16460
    ("production" !== "development" ? invariant(                                                                       // 16461
      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,                                              // 16462
      'You must provide an array strategy to deep merge functions to ' +                                               // 16463
      'instruct the deep merge how to resolve merging two arrays.'                                                     // 16464
    ) : invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies));                                // 16465
  },                                                                                                                   // 16466
                                                                                                                       // 16467
  /**                                                                                                                  // 16468
   * Set of possible behaviors of merge algorithms when encountering two Arrays                                        // 16469
   * that must be merged together.                                                                                     // 16470
   * - `clobber`: The left `Array` is ignored.                                                                         // 16471
   * - `indexByIndex`: The result is achieved by recursively deep merging at                                           // 16472
   *   each index. (not yet supported.)                                                                                // 16473
   */                                                                                                                  // 16474
  ArrayStrategies: keyMirror({                                                                                         // 16475
    Clobber: true,                                                                                                     // 16476
    IndexByIndex: true                                                                                                 // 16477
  })                                                                                                                   // 16478
                                                                                                                       // 16479
};                                                                                                                     // 16480
                                                                                                                       // 16481
module.exports = mergeHelpers;                                                                                         // 16482
                                                                                                                       // 16483
},{"./invariant":112,"./keyMirror":118}],123:[function(_dereq_,module,exports){                                        // 16484
/**                                                                                                                    // 16485
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16486
 *                                                                                                                     // 16487
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16488
 * you may not use this file except in compliance with the License.                                                    // 16489
 * You may obtain a copy of the License at                                                                             // 16490
 *                                                                                                                     // 16491
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16492
 *                                                                                                                     // 16493
 * Unless required by applicable law or agreed to in writing, software                                                 // 16494
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16495
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16496
 * See the License for the specific language governing permissions and                                                 // 16497
 * limitations under the License.                                                                                      // 16498
 *                                                                                                                     // 16499
 * @providesModule mergeInto                                                                                           // 16500
 * @typechecks static-only                                                                                             // 16501
 */                                                                                                                    // 16502
                                                                                                                       // 16503
"use strict";                                                                                                          // 16504
                                                                                                                       // 16505
var mergeHelpers = _dereq_("./mergeHelpers");                                                                          // 16506
                                                                                                                       // 16507
var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;                                                            // 16508
                                                                                                                       // 16509
/**                                                                                                                    // 16510
 * Shallow merges two structures by mutating the first parameter.                                                      // 16511
 *                                                                                                                     // 16512
 * @param {object} one Object to be merged into.                                                                       // 16513
 * @param {?object} two Optional object with properties to merge from.                                                 // 16514
 */                                                                                                                    // 16515
function mergeInto(one, two) {                                                                                         // 16516
  checkMergeObjectArg(one);                                                                                            // 16517
  if (two != null) {                                                                                                   // 16518
    checkMergeObjectArg(two);                                                                                          // 16519
    for (var key in two) {                                                                                             // 16520
      if (!two.hasOwnProperty(key)) {                                                                                  // 16521
        continue;                                                                                                      // 16522
      }                                                                                                                // 16523
      one[key] = two[key];                                                                                             // 16524
    }                                                                                                                  // 16525
  }                                                                                                                    // 16526
}                                                                                                                      // 16527
                                                                                                                       // 16528
module.exports = mergeInto;                                                                                            // 16529
                                                                                                                       // 16530
},{"./mergeHelpers":122}],124:[function(_dereq_,module,exports){                                                       // 16531
/**                                                                                                                    // 16532
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16533
 *                                                                                                                     // 16534
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16535
 * you may not use this file except in compliance with the License.                                                    // 16536
 * You may obtain a copy of the License at                                                                             // 16537
 *                                                                                                                     // 16538
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16539
 *                                                                                                                     // 16540
 * Unless required by applicable law or agreed to in writing, software                                                 // 16541
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16542
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16543
 * See the License for the specific language governing permissions and                                                 // 16544
 * limitations under the License.                                                                                      // 16545
 *                                                                                                                     // 16546
 * @providesModule mixInto                                                                                             // 16547
 */                                                                                                                    // 16548
                                                                                                                       // 16549
"use strict";                                                                                                          // 16550
                                                                                                                       // 16551
/**                                                                                                                    // 16552
 * Simply copies properties to the prototype.                                                                          // 16553
 */                                                                                                                    // 16554
var mixInto = function(constructor, methodBag) {                                                                       // 16555
  var methodName;                                                                                                      // 16556
  for (methodName in methodBag) {                                                                                      // 16557
    if (!methodBag.hasOwnProperty(methodName)) {                                                                       // 16558
      continue;                                                                                                        // 16559
    }                                                                                                                  // 16560
    constructor.prototype[methodName] = methodBag[methodName];                                                         // 16561
  }                                                                                                                    // 16562
};                                                                                                                     // 16563
                                                                                                                       // 16564
module.exports = mixInto;                                                                                              // 16565
                                                                                                                       // 16566
},{}],125:[function(_dereq_,module,exports){                                                                           // 16567
/**                                                                                                                    // 16568
 * Copyright 2014 Facebook, Inc.                                                                                       // 16569
 *                                                                                                                     // 16570
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16571
 * you may not use this file except in compliance with the License.                                                    // 16572
 * You may obtain a copy of the License at                                                                             // 16573
 *                                                                                                                     // 16574
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16575
 *                                                                                                                     // 16576
 * Unless required by applicable law or agreed to in writing, software                                                 // 16577
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16578
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16579
 * See the License for the specific language governing permissions and                                                 // 16580
 * limitations under the License.                                                                                      // 16581
 *                                                                                                                     // 16582
 * @providesModule monitorCodeUse                                                                                      // 16583
 */                                                                                                                    // 16584
                                                                                                                       // 16585
"use strict";                                                                                                          // 16586
                                                                                                                       // 16587
var invariant = _dereq_("./invariant");                                                                                // 16588
                                                                                                                       // 16589
/**                                                                                                                    // 16590
 * Provides open-source compatible instrumentation for monitoring certain API                                          // 16591
 * uses before we're ready to issue a warning or refactor. It accepts an event                                         // 16592
 * name which may only contain the characters [a-z0-9_] and an optional data                                           // 16593
 * object with further information.                                                                                    // 16594
 */                                                                                                                    // 16595
                                                                                                                       // 16596
function monitorCodeUse(eventName, data) {                                                                             // 16597
  ("production" !== "development" ? invariant(                                                                         // 16598
    eventName && !/[^a-z0-9_]/.test(eventName),                                                                        // 16599
    'You must provide an eventName using only the characters [a-z0-9_]'                                                // 16600
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));                                                          // 16601
}                                                                                                                      // 16602
                                                                                                                       // 16603
module.exports = monitorCodeUse;                                                                                       // 16604
                                                                                                                       // 16605
},{"./invariant":112}],126:[function(_dereq_,module,exports){                                                          // 16606
/**                                                                                                                    // 16607
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16608
 *                                                                                                                     // 16609
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16610
 * you may not use this file except in compliance with the License.                                                    // 16611
 * You may obtain a copy of the License at                                                                             // 16612
 *                                                                                                                     // 16613
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16614
 *                                                                                                                     // 16615
 * Unless required by applicable law or agreed to in writing, software                                                 // 16616
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16617
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16618
 * See the License for the specific language governing permissions and                                                 // 16619
 * limitations under the License.                                                                                      // 16620
 *                                                                                                                     // 16621
 * @providesModule objMap                                                                                              // 16622
 */                                                                                                                    // 16623
                                                                                                                       // 16624
"use strict";                                                                                                          // 16625
                                                                                                                       // 16626
/**                                                                                                                    // 16627
 * For each key/value pair, invokes callback func and constructs a resulting                                           // 16628
 * object which contains, for every key in obj, values that are the result of                                          // 16629
 * of invoking the function:                                                                                           // 16630
 *                                                                                                                     // 16631
 *   func(value, key, iteration)                                                                                       // 16632
 *                                                                                                                     // 16633
 * @param {?object} obj Object to map keys over                                                                        // 16634
 * @param {function} func Invoked for each key/val pair.                                                               // 16635
 * @param {?*} context                                                                                                 // 16636
 * @return {?object} Result of mapping or null if obj is falsey                                                        // 16637
 */                                                                                                                    // 16638
function objMap(obj, func, context) {                                                                                  // 16639
  if (!obj) {                                                                                                          // 16640
    return null;                                                                                                       // 16641
  }                                                                                                                    // 16642
  var i = 0;                                                                                                           // 16643
  var ret = {};                                                                                                        // 16644
  for (var key in obj) {                                                                                               // 16645
    if (obj.hasOwnProperty(key)) {                                                                                     // 16646
      ret[key] = func.call(context, obj[key], key, i++);                                                               // 16647
    }                                                                                                                  // 16648
  }                                                                                                                    // 16649
  return ret;                                                                                                          // 16650
}                                                                                                                      // 16651
                                                                                                                       // 16652
module.exports = objMap;                                                                                               // 16653
                                                                                                                       // 16654
},{}],127:[function(_dereq_,module,exports){                                                                           // 16655
/**                                                                                                                    // 16656
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16657
 *                                                                                                                     // 16658
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16659
 * you may not use this file except in compliance with the License.                                                    // 16660
 * You may obtain a copy of the License at                                                                             // 16661
 *                                                                                                                     // 16662
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16663
 *                                                                                                                     // 16664
 * Unless required by applicable law or agreed to in writing, software                                                 // 16665
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16666
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16667
 * See the License for the specific language governing permissions and                                                 // 16668
 * limitations under the License.                                                                                      // 16669
 *                                                                                                                     // 16670
 * @providesModule objMapKeyVal                                                                                        // 16671
 */                                                                                                                    // 16672
                                                                                                                       // 16673
"use strict";                                                                                                          // 16674
                                                                                                                       // 16675
/**                                                                                                                    // 16676
 * Behaves the same as `objMap` but invokes func with the key first, and value                                         // 16677
 * second. Use `objMap` unless you need this special case.                                                             // 16678
 * Invokes func as:                                                                                                    // 16679
 *                                                                                                                     // 16680
 *   func(key, value, iteration)                                                                                       // 16681
 *                                                                                                                     // 16682
 * @param {?object} obj Object to map keys over                                                                        // 16683
 * @param {!function} func Invoked for each key/val pair.                                                              // 16684
 * @param {?*} context                                                                                                 // 16685
 * @return {?object} Result of mapping or null if obj is falsey                                                        // 16686
 */                                                                                                                    // 16687
function objMapKeyVal(obj, func, context) {                                                                            // 16688
  if (!obj) {                                                                                                          // 16689
    return null;                                                                                                       // 16690
  }                                                                                                                    // 16691
  var i = 0;                                                                                                           // 16692
  var ret = {};                                                                                                        // 16693
  for (var key in obj) {                                                                                               // 16694
    if (obj.hasOwnProperty(key)) {                                                                                     // 16695
      ret[key] = func.call(context, key, obj[key], i++);                                                               // 16696
    }                                                                                                                  // 16697
  }                                                                                                                    // 16698
  return ret;                                                                                                          // 16699
}                                                                                                                      // 16700
                                                                                                                       // 16701
module.exports = objMapKeyVal;                                                                                         // 16702
                                                                                                                       // 16703
},{}],128:[function(_dereq_,module,exports){                                                                           // 16704
/**                                                                                                                    // 16705
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16706
 *                                                                                                                     // 16707
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16708
 * you may not use this file except in compliance with the License.                                                    // 16709
 * You may obtain a copy of the License at                                                                             // 16710
 *                                                                                                                     // 16711
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16712
 *                                                                                                                     // 16713
 * Unless required by applicable law or agreed to in writing, software                                                 // 16714
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16715
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16716
 * See the License for the specific language governing permissions and                                                 // 16717
 * limitations under the License.                                                                                      // 16718
 *                                                                                                                     // 16719
 * @providesModule onlyChild                                                                                           // 16720
 */                                                                                                                    // 16721
"use strict";                                                                                                          // 16722
                                                                                                                       // 16723
var ReactComponent = _dereq_("./ReactComponent");                                                                      // 16724
                                                                                                                       // 16725
var invariant = _dereq_("./invariant");                                                                                // 16726
                                                                                                                       // 16727
/**                                                                                                                    // 16728
 * Returns the first child in a collection of children and verifies that there                                         // 16729
 * is only one child in the collection. The current implementation of this                                             // 16730
 * function assumes that a single child gets passed without a wrapper, but the                                         // 16731
 * purpose of this helper function is to abstract away the particular structure                                        // 16732
 * of children.                                                                                                        // 16733
 *                                                                                                                     // 16734
 * @param {?object} children Child collection structure.                                                               // 16735
 * @return {ReactComponent} The first and only `ReactComponent` contained in the                                       // 16736
 * structure.                                                                                                          // 16737
 */                                                                                                                    // 16738
function onlyChild(children) {                                                                                         // 16739
  ("production" !== "development" ? invariant(                                                                         // 16740
    ReactComponent.isValidComponent(children),                                                                         // 16741
    'onlyChild must be passed a children with exactly one child.'                                                      // 16742
  ) : invariant(ReactComponent.isValidComponent(children)));                                                           // 16743
  return children;                                                                                                     // 16744
}                                                                                                                      // 16745
                                                                                                                       // 16746
module.exports = onlyChild;                                                                                            // 16747
                                                                                                                       // 16748
},{"./ReactComponent":27,"./invariant":112}],129:[function(_dereq_,module,exports){                                    // 16749
/**                                                                                                                    // 16750
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16751
 *                                                                                                                     // 16752
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16753
 * you may not use this file except in compliance with the License.                                                    // 16754
 * You may obtain a copy of the License at                                                                             // 16755
 *                                                                                                                     // 16756
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16757
 *                                                                                                                     // 16758
 * Unless required by applicable law or agreed to in writing, software                                                 // 16759
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16760
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16761
 * See the License for the specific language governing permissions and                                                 // 16762
 * limitations under the License.                                                                                      // 16763
 *                                                                                                                     // 16764
 * @providesModule performanceNow                                                                                      // 16765
 * @typechecks static-only                                                                                             // 16766
 */                                                                                                                    // 16767
                                                                                                                       // 16768
"use strict";                                                                                                          // 16769
                                                                                                                       // 16770
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");                                                          // 16771
                                                                                                                       // 16772
/**                                                                                                                    // 16773
 * Detect if we can use window.performance.now() and gracefully                                                        // 16774
 * fallback to Date.now() if it doesn't exist.                                                                         // 16775
 * We need to support Firefox < 15 for now due to Facebook's webdriver                                                 // 16776
 * infrastructure.                                                                                                     // 16777
 */                                                                                                                    // 16778
var performance = null;                                                                                                // 16779
                                                                                                                       // 16780
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 16781
  performance = window.performance || window.webkitPerformance;                                                        // 16782
}                                                                                                                      // 16783
                                                                                                                       // 16784
if (!performance || !performance.now) {                                                                                // 16785
  performance = Date;                                                                                                  // 16786
}                                                                                                                      // 16787
                                                                                                                       // 16788
var performanceNow = performance.now.bind(performance);                                                                // 16789
                                                                                                                       // 16790
module.exports = performanceNow;                                                                                       // 16791
                                                                                                                       // 16792
},{"./ExecutionEnvironment":20}],130:[function(_dereq_,module,exports){                                                // 16793
/**                                                                                                                    // 16794
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16795
 *                                                                                                                     // 16796
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16797
 * you may not use this file except in compliance with the License.                                                    // 16798
 * You may obtain a copy of the License at                                                                             // 16799
 *                                                                                                                     // 16800
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16801
 *                                                                                                                     // 16802
 * Unless required by applicable law or agreed to in writing, software                                                 // 16803
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16804
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16805
 * See the License for the specific language governing permissions and                                                 // 16806
 * limitations under the License.                                                                                      // 16807
 *                                                                                                                     // 16808
 * @providesModule shallowEqual                                                                                        // 16809
 */                                                                                                                    // 16810
                                                                                                                       // 16811
"use strict";                                                                                                          // 16812
                                                                                                                       // 16813
/**                                                                                                                    // 16814
 * Performs equality by iterating through keys on an object and returning                                              // 16815
 * false when any key has values which are not strictly equal between                                                  // 16816
 * objA and objB. Returns true when the values of all keys are strictly equal.                                         // 16817
 *                                                                                                                     // 16818
 * @return {boolean}                                                                                                   // 16819
 */                                                                                                                    // 16820
function shallowEqual(objA, objB) {                                                                                    // 16821
  if (objA === objB) {                                                                                                 // 16822
    return true;                                                                                                       // 16823
  }                                                                                                                    // 16824
  var key;                                                                                                             // 16825
  // Test for A's keys different from B.                                                                               // 16826
  for (key in objA) {                                                                                                  // 16827
    if (objA.hasOwnProperty(key) &&                                                                                    // 16828
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {                                                      // 16829
      return false;                                                                                                    // 16830
    }                                                                                                                  // 16831
  }                                                                                                                    // 16832
  // Test for B'a keys missing from A.                                                                                 // 16833
  for (key in objB) {                                                                                                  // 16834
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {                                                       // 16835
      return false;                                                                                                    // 16836
    }                                                                                                                  // 16837
  }                                                                                                                    // 16838
  return true;                                                                                                         // 16839
}                                                                                                                      // 16840
                                                                                                                       // 16841
module.exports = shallowEqual;                                                                                         // 16842
                                                                                                                       // 16843
},{}],131:[function(_dereq_,module,exports){                                                                           // 16844
/**                                                                                                                    // 16845
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16846
 *                                                                                                                     // 16847
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16848
 * you may not use this file except in compliance with the License.                                                    // 16849
 * You may obtain a copy of the License at                                                                             // 16850
 *                                                                                                                     // 16851
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16852
 *                                                                                                                     // 16853
 * Unless required by applicable law or agreed to in writing, software                                                 // 16854
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16855
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16856
 * See the License for the specific language governing permissions and                                                 // 16857
 * limitations under the License.                                                                                      // 16858
 *                                                                                                                     // 16859
 * @providesModule shouldUpdateReactComponent                                                                          // 16860
 * @typechecks static-only                                                                                             // 16861
 */                                                                                                                    // 16862
                                                                                                                       // 16863
"use strict";                                                                                                          // 16864
                                                                                                                       // 16865
/**                                                                                                                    // 16866
 * Given a `prevComponentInstance` and `nextComponent`, determines if                                                  // 16867
 * `prevComponentInstance` should be updated as opposed to being destroyed or                                          // 16868
 * replaced by a new instance. The second argument is a descriptor. Future                                             // 16869
 * versions of the reconciler should only compare descriptors to other                                                 // 16870
 * descriptors.                                                                                                        // 16871
 *                                                                                                                     // 16872
 * @param {?object} prevComponentInstance                                                                              // 16873
 * @param {?object} nextDescriptor                                                                                     // 16874
 * @return {boolean} True if `prevComponentInstance` should be updated.                                                // 16875
 * @protected                                                                                                          // 16876
 */                                                                                                                    // 16877
function shouldUpdateReactComponent(prevComponentInstance, nextDescriptor) {                                           // 16878
  // TODO: Remove warning after a release.                                                                             // 16879
  if (prevComponentInstance && nextDescriptor &&                                                                       // 16880
      prevComponentInstance.constructor === nextDescriptor.constructor && (                                            // 16881
        (prevComponentInstance.props && prevComponentInstance.props.key) ===                                           // 16882
        (nextDescriptor.props && nextDescriptor.props.key)                                                             // 16883
      )) {                                                                                                             // 16884
    if (prevComponentInstance._owner === nextDescriptor._owner) {                                                      // 16885
      return true;                                                                                                     // 16886
    } else {                                                                                                           // 16887
      if ("production" !== "development") {                                                                            // 16888
        if (prevComponentInstance.state) {                                                                             // 16889
          console.warn(                                                                                                // 16890
            'A recent change to React has been found to impact your code. ' +                                          // 16891
            'A mounted component will now be unmounted and replaced by a ' +                                           // 16892
            'component (of the same class) if their owners are different. ' +                                          // 16893
            'Previously, ownership was not considered when updating.',                                                 // 16894
            prevComponentInstance,                                                                                     // 16895
            nextDescriptor                                                                                             // 16896
          );                                                                                                           // 16897
        }                                                                                                              // 16898
      }                                                                                                                // 16899
    }                                                                                                                  // 16900
  }                                                                                                                    // 16901
  return false;                                                                                                        // 16902
}                                                                                                                      // 16903
                                                                                                                       // 16904
module.exports = shouldUpdateReactComponent;                                                                           // 16905
                                                                                                                       // 16906
},{}],132:[function(_dereq_,module,exports){                                                                           // 16907
/**                                                                                                                    // 16908
 * Copyright 2014 Facebook, Inc.                                                                                       // 16909
 *                                                                                                                     // 16910
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16911
 * you may not use this file except in compliance with the License.                                                    // 16912
 * You may obtain a copy of the License at                                                                             // 16913
 *                                                                                                                     // 16914
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16915
 *                                                                                                                     // 16916
 * Unless required by applicable law or agreed to in writing, software                                                 // 16917
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16918
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16919
 * See the License for the specific language governing permissions and                                                 // 16920
 * limitations under the License.                                                                                      // 16921
 *                                                                                                                     // 16922
 * @providesModule toArray                                                                                             // 16923
 * @typechecks                                                                                                         // 16924
 */                                                                                                                    // 16925
                                                                                                                       // 16926
var invariant = _dereq_("./invariant");                                                                                // 16927
                                                                                                                       // 16928
/**                                                                                                                    // 16929
 * Convert array-like objects to arrays.                                                                               // 16930
 *                                                                                                                     // 16931
 * This API assumes the caller knows the contents of the data type. For less                                           // 16932
 * well defined inputs use createArrayFrom.                                                                            // 16933
 *                                                                                                                     // 16934
 * @param {object|function} obj                                                                                        // 16935
 * @return {array}                                                                                                     // 16936
 */                                                                                                                    // 16937
function toArray(obj) {                                                                                                // 16938
  var length = obj.length;                                                                                             // 16939
                                                                                                                       // 16940
  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in                                        // 16941
  // old versions of Safari).                                                                                          // 16942
  ("production" !== "development" ? invariant(                                                                         // 16943
    !Array.isArray(obj) &&                                                                                             // 16944
    (typeof obj === 'object' || typeof obj === 'function'),                                                            // 16945
    'toArray: Array-like object expected'                                                                              // 16946
  ) : invariant(!Array.isArray(obj) &&                                                                                 // 16947
  (typeof obj === 'object' || typeof obj === 'function')));                                                            // 16948
                                                                                                                       // 16949
  ("production" !== "development" ? invariant(                                                                         // 16950
    typeof length === 'number',                                                                                        // 16951
    'toArray: Object needs a length property'                                                                          // 16952
  ) : invariant(typeof length === 'number'));                                                                          // 16953
                                                                                                                       // 16954
  ("production" !== "development" ? invariant(                                                                         // 16955
    length === 0 ||                                                                                                    // 16956
    (length - 1) in obj,                                                                                               // 16957
    'toArray: Object should have keys for indices'                                                                     // 16958
  ) : invariant(length === 0 ||                                                                                        // 16959
  (length - 1) in obj));                                                                                               // 16960
                                                                                                                       // 16961
  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs                                           // 16962
  // without method will throw during the slice call and skip straight to the                                          // 16963
  // fallback.                                                                                                         // 16964
  if (obj.hasOwnProperty) {                                                                                            // 16965
    try {                                                                                                              // 16966
      return Array.prototype.slice.call(obj);                                                                          // 16967
    } catch (e) {                                                                                                      // 16968
      // IE < 9 does not support Array#slice on collections objects                                                    // 16969
    }                                                                                                                  // 16970
  }                                                                                                                    // 16971
                                                                                                                       // 16972
  // Fall back to copying key by key. This assumes all keys have a value,                                              // 16973
  // so will not preserve sparsely populated inputs.                                                                   // 16974
  var ret = Array(length);                                                                                             // 16975
  for (var ii = 0; ii < length; ii++) {                                                                                // 16976
    ret[ii] = obj[ii];                                                                                                 // 16977
  }                                                                                                                    // 16978
  return ret;                                                                                                          // 16979
}                                                                                                                      // 16980
                                                                                                                       // 16981
module.exports = toArray;                                                                                              // 16982
                                                                                                                       // 16983
},{"./invariant":112}],133:[function(_dereq_,module,exports){                                                          // 16984
/**                                                                                                                    // 16985
 * Copyright 2013-2014 Facebook, Inc.                                                                                  // 16986
 *                                                                                                                     // 16987
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 16988
 * you may not use this file except in compliance with the License.                                                    // 16989
 * You may obtain a copy of the License at                                                                             // 16990
 *                                                                                                                     // 16991
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 16992
 *                                                                                                                     // 16993
 * Unless required by applicable law or agreed to in writing, software                                                 // 16994
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 16995
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16996
 * See the License for the specific language governing permissions and                                                 // 16997
 * limitations under the License.                                                                                      // 16998
 *                                                                                                                     // 16999
 * @providesModule traverseAllChildren                                                                                 // 17000
 */                                                                                                                    // 17001
                                                                                                                       // 17002
"use strict";                                                                                                          // 17003
                                                                                                                       // 17004
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");                                                          // 17005
var ReactTextComponent = _dereq_("./ReactTextComponent");                                                              // 17006
                                                                                                                       // 17007
var invariant = _dereq_("./invariant");                                                                                // 17008
                                                                                                                       // 17009
var SEPARATOR = ReactInstanceHandles.SEPARATOR;                                                                        // 17010
var SUBSEPARATOR = ':';                                                                                                // 17011
                                                                                                                       // 17012
/**                                                                                                                    // 17013
 * TODO: Test that:                                                                                                    // 17014
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.                                          // 17015
 * 2. it('should fail when supplied duplicate key', function() {                                                       // 17016
 * 3. That a single child and an array with one item have the same key pattern.                                        // 17017
 * });                                                                                                                 // 17018
 */                                                                                                                    // 17019
                                                                                                                       // 17020
var userProvidedKeyEscaperLookup = {                                                                                   // 17021
  '=': '=0',                                                                                                           // 17022
  '.': '=1',                                                                                                           // 17023
  ':': '=2'                                                                                                            // 17024
};                                                                                                                     // 17025
                                                                                                                       // 17026
var userProvidedKeyEscapeRegex = /[=.:]/g;                                                                             // 17027
                                                                                                                       // 17028
function userProvidedKeyEscaper(match) {                                                                               // 17029
  return userProvidedKeyEscaperLookup[match];                                                                          // 17030
}                                                                                                                      // 17031
                                                                                                                       // 17032
/**                                                                                                                    // 17033
 * Generate a key string that identifies a component within a set.                                                     // 17034
 *                                                                                                                     // 17035
 * @param {*} component A component that could contain a manual key.                                                   // 17036
 * @param {number} index Index that is used if a manual key is not provided.                                           // 17037
 * @return {string}                                                                                                    // 17038
 */                                                                                                                    // 17039
function getComponentKey(component, index) {                                                                           // 17040
  if (component && component.props && component.props.key != null) {                                                   // 17041
    // Explicit key                                                                                                    // 17042
    return wrapUserProvidedKey(component.props.key);                                                                   // 17043
  }                                                                                                                    // 17044
  // Implicit key determined by the index in the set                                                                   // 17045
  return index.toString(36);                                                                                           // 17046
}                                                                                                                      // 17047
                                                                                                                       // 17048
/**                                                                                                                    // 17049
 * Escape a component key so that it is safe to use in a reactid.                                                      // 17050
 *                                                                                                                     // 17051
 * @param {*} key Component key to be escaped.                                                                         // 17052
 * @return {string} An escaped string.                                                                                 // 17053
 */                                                                                                                    // 17054
function escapeUserProvidedKey(text) {                                                                                 // 17055
  return ('' + text).replace(                                                                                          // 17056
    userProvidedKeyEscapeRegex,                                                                                        // 17057
    userProvidedKeyEscaper                                                                                             // 17058
  );                                                                                                                   // 17059
}                                                                                                                      // 17060
                                                                                                                       // 17061
/**                                                                                                                    // 17062
 * Wrap a `key` value explicitly provided by the user to distinguish it from                                           // 17063
 * implicitly-generated keys generated by a component's index in its parent.                                           // 17064
 *                                                                                                                     // 17065
 * @param {string} key Value of a user-provided `key` attribute                                                        // 17066
 * @return {string}                                                                                                    // 17067
 */                                                                                                                    // 17068
function wrapUserProvidedKey(key) {                                                                                    // 17069
  return '$' + escapeUserProvidedKey(key);                                                                             // 17070
}                                                                                                                      // 17071
                                                                                                                       // 17072
/**                                                                                                                    // 17073
 * @param {?*} children Children tree container.                                                                       // 17074
 * @param {!string} nameSoFar Name of the key path so far.                                                             // 17075
 * @param {!number} indexSoFar Number of children encountered until this point.                                        // 17076
 * @param {!function} callback Callback to invoke with each child found.                                               // 17077
 * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 17078
 * process.                                                                                                            // 17079
 * @return {!number} The number of children in this subtree.                                                           // 17080
 */                                                                                                                    // 17081
var traverseAllChildrenImpl =                                                                                          // 17082
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {                                               // 17083
    var subtreeCount = 0;  // Count of children found in the current subtree.                                          // 17084
    if (Array.isArray(children)) {                                                                                     // 17085
      for (var i = 0; i < children.length; i++) {                                                                      // 17086
        var child = children[i];                                                                                       // 17087
        var nextName = (                                                                                               // 17088
          nameSoFar +                                                                                                  // 17089
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +                                                                     // 17090
          getComponentKey(child, i)                                                                                    // 17091
        );                                                                                                             // 17092
        var nextIndex = indexSoFar + subtreeCount;                                                                     // 17093
        subtreeCount += traverseAllChildrenImpl(                                                                       // 17094
          child,                                                                                                       // 17095
          nextName,                                                                                                    // 17096
          nextIndex,                                                                                                   // 17097
          callback,                                                                                                    // 17098
          traverseContext                                                                                              // 17099
        );                                                                                                             // 17100
      }                                                                                                                // 17101
    } else {                                                                                                           // 17102
      var type = typeof children;                                                                                      // 17103
      var isOnlyChild = nameSoFar === '';                                                                              // 17104
      // If it's the only child, treat the name as if it was wrapped in an array                                       // 17105
      // so that it's consistent if the number of children grows                                                       // 17106
      var storageName =                                                                                                // 17107
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;                                            // 17108
      if (children == null || type === 'boolean') {                                                                    // 17109
        // All of the above are perceived as null.                                                                     // 17110
        callback(traverseContext, null, storageName, indexSoFar);                                                      // 17111
        subtreeCount = 1;                                                                                              // 17112
      } else if (children.type && children.type.prototype &&                                                           // 17113
                 children.type.prototype.mountComponentIntoNode) {                                                     // 17114
        callback(traverseContext, children, storageName, indexSoFar);                                                  // 17115
        subtreeCount = 1;                                                                                              // 17116
      } else {                                                                                                         // 17117
        if (type === 'object') {                                                                                       // 17118
          ("production" !== "development" ? invariant(                                                                 // 17119
            !children || children.nodeType !== 1,                                                                      // 17120
            'traverseAllChildren(...): Encountered an invalid child; DOM ' +                                           // 17121
            'elements are not valid children of React components.'                                                     // 17122
          ) : invariant(!children || children.nodeType !== 1));                                                        // 17123
          for (var key in children) {                                                                                  // 17124
            if (children.hasOwnProperty(key)) {                                                                        // 17125
              subtreeCount += traverseAllChildrenImpl(                                                                 // 17126
                children[key],                                                                                         // 17127
                (                                                                                                      // 17128
                  nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +                                                 // 17129
                  wrapUserProvidedKey(key) + SUBSEPARATOR +                                                            // 17130
                  getComponentKey(children[key], 0)                                                                    // 17131
                ),                                                                                                     // 17132
                indexSoFar + subtreeCount,                                                                             // 17133
                callback,                                                                                              // 17134
                traverseContext                                                                                        // 17135
              );                                                                                                       // 17136
            }                                                                                                          // 17137
          }                                                                                                            // 17138
        } else if (type === 'string') {                                                                                // 17139
          var normalizedText = new ReactTextComponent(children);                                                       // 17140
          callback(traverseContext, normalizedText, storageName, indexSoFar);                                          // 17141
          subtreeCount += 1;                                                                                           // 17142
        } else if (type === 'number') {                                                                                // 17143
          var normalizedNumber = new ReactTextComponent('' + children);                                                // 17144
          callback(traverseContext, normalizedNumber, storageName, indexSoFar);                                        // 17145
          subtreeCount += 1;                                                                                           // 17146
        }                                                                                                              // 17147
      }                                                                                                                // 17148
    }                                                                                                                  // 17149
    return subtreeCount;                                                                                               // 17150
  };                                                                                                                   // 17151
                                                                                                                       // 17152
/**                                                                                                                    // 17153
 * Traverses children that are typically specified as `props.children`, but                                            // 17154
 * might also be specified through attributes:                                                                         // 17155
 *                                                                                                                     // 17156
 * - `traverseAllChildren(this.props.children, ...)`                                                                   // 17157
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 17158
 *                                                                                                                     // 17159
 * The `traverseContext` is an optional argument that is passed through the                                            // 17160
 * entire traversal. It can be used to store accumulations or anything else that                                       // 17161
 * the callback might find relevant.                                                                                   // 17162
 *                                                                                                                     // 17163
 * @param {?*} children Children tree object.                                                                          // 17164
 * @param {!function} callback To invoke upon traversing each child.                                                   // 17165
 * @param {?*} traverseContext Context for traversal.                                                                  // 17166
 */                                                                                                                    // 17167
function traverseAllChildren(children, callback, traverseContext) {                                                    // 17168
  if (children !== null && children !== undefined) {                                                                   // 17169
    traverseAllChildrenImpl(children, '', 0, callback, traverseContext);                                               // 17170
  }                                                                                                                    // 17171
}                                                                                                                      // 17172
                                                                                                                       // 17173
module.exports = traverseAllChildren;                                                                                  // 17174
                                                                                                                       // 17175
},{"./ReactInstanceHandles":53,"./ReactTextComponent":70,"./invariant":112}],134:[function(_dereq_,module,exports){    // 17176
/**                                                                                                                    // 17177
 * Copyright 2014 Facebook, Inc.                                                                                       // 17178
 *                                                                                                                     // 17179
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 17180
 * you may not use this file except in compliance with the License.                                                    // 17181
 * You may obtain a copy of the License at                                                                             // 17182
 *                                                                                                                     // 17183
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 17184
 *                                                                                                                     // 17185
 * Unless required by applicable law or agreed to in writing, software                                                 // 17186
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 17187
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 17188
 * See the License for the specific language governing permissions and                                                 // 17189
 * limitations under the License.                                                                                      // 17190
 *                                                                                                                     // 17191
 * @providesModule warning                                                                                             // 17192
 */                                                                                                                    // 17193
                                                                                                                       // 17194
"use strict";                                                                                                          // 17195
                                                                                                                       // 17196
var emptyFunction = _dereq_("./emptyFunction");                                                                        // 17197
                                                                                                                       // 17198
/**                                                                                                                    // 17199
 * Similar to invariant but only logs a warning if the condition is not met.                                           // 17200
 * This can be used to log issues in development environments in critical                                              // 17201
 * paths. Removing the logging code for production environments will keep the                                          // 17202
 * same logic and follow the same code paths.                                                                          // 17203
 */                                                                                                                    // 17204
                                                                                                                       // 17205
var warning = emptyFunction;                                                                                           // 17206
                                                                                                                       // 17207
if ("production" !== "development") {                                                                                  // 17208
  warning = function(condition, format ) {var args=Array.prototype.slice.call(arguments,2);                            // 17209
    if (format === undefined) {                                                                                        // 17210
      throw new Error(                                                                                                 // 17211
        '`warning(condition, format, ...args)` requires a warning ' +                                                  // 17212
        'message argument'                                                                                             // 17213
      );                                                                                                               // 17214
    }                                                                                                                  // 17215
                                                                                                                       // 17216
    if (!condition) {                                                                                                  // 17217
      var argIndex = 0;                                                                                                // 17218
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));                       // 17219
    }                                                                                                                  // 17220
  };                                                                                                                   // 17221
}                                                                                                                      // 17222
                                                                                                                       // 17223
module.exports = warning;                                                                                              // 17224
                                                                                                                       // 17225
},{"./emptyFunction":96}]},{},[24])                                                                                    // 17226
(24)                                                                                                                   // 17227
});                                                                                                                    // 17228
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/react/src/ReactMeteor.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var ReactMeteorMixin = {                                                                                               // 1
  _handleMeteorChange: function() {                                                                                    // 2
    this.setState(this.getMeteorState());                                                                              // 3
  },                                                                                                                   // 4
                                                                                                                       // 5
  _cancelComputation: function() {                                                                                     // 6
    if (this._meteorComputation) {                                                                                     // 7
      this._meteorComputation.stop();                                                                                  // 8
      this._meteorComputation = null;                                                                                  // 9
    }                                                                                                                  // 10
  },                                                                                                                   // 11
                                                                                                                       // 12
  componentWillMount: function() {                                                                                     // 13
    this._meteorComputation = Deps.autorun(this._handleMeteorChange);                                                  // 14
  },                                                                                                                   // 15
                                                                                                                       // 16
  componentWillReceiveProps: function(nextProps) {                                                                     // 17
    var oldProps = this.props;                                                                                         // 18
    this.props = nextProps;                                                                                            // 19
    this._handleMeteorChange();                                                                                        // 20
    this.props = oldProps;                                                                                             // 21
  },                                                                                                                   // 22
                                                                                                                       // 23
  componentWillUnmount: function() {                                                                                   // 24
    this._cancelComputation();                                                                                         // 25
  }                                                                                                                    // 26
};                                                                                                                     // 27
                                                                                                                       // 28
// So you don't have to mix in ReactMeteor.Mixin explicitly.                                                           // 29
function createClass(spec) {                                                                                           // 30
  spec.mixins = spec.mixins || [];                                                                                     // 31
  spec.mixins.push(ReactMeteorMixin);                                                                                  // 32
  return React.createClass(spec);                                                                                      // 33
}                                                                                                                      // 34
                                                                                                                       // 35
if (typeof exports === "object") {                                                                                     // 36
  ReactMeteor = exports;                                                                                               // 37
} else {                                                                                                               // 38
  ReactMeteor = {};                                                                                                    // 39
}                                                                                                                      // 40
                                                                                                                       // 41
ReactMeteor.Mixin = ReactMeteorMixin;                                                                                  // 42
ReactMeteor.createClass = createClass;                                                                                 // 43
                                                                                                                       // 44
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);
